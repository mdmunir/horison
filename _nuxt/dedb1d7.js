/*! For license information please see LICENSES */
(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{429:function(e,t,n){"use strict";n.d(t,"a",(function(){return ee})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return In})),n.d(t,"d",(function(){return di})),n.d(t,"e",(function(){return Oe})),n.d(t,"f",(function(){return Ua})),n.d(t,"g",(function(){return Bn})),n.d(t,"h",(function(){return Ha})),n.d(t,"i",(function(){return Ms})),n.d(t,"j",(function(){return l})),n.d(t,"k",(function(){return cs})),n.d(t,"l",(function(){return he})),n.d(t,"m",(function(){return ze})),n.d(t,"n",(function(){return za}));const r="141",o={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},l={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},c=100,h=301,d=302,f=303,m=304,v=306,_=1e3,x=1001,y=1002,M=1003,S=1004,w=1005,T=1006,E=1008,A=1009,L=1014,C=1015,R=1016,P=1020,D=1023,I=1026,N=1027,O=33776,z=33777,U=33778,F=33779,B=2300,k=2301,V=2302,H=2400,G=2401,W=2402,j=3e3,X=3001,Y="srgb",Z="srgb-linear",K=7680,J=35044,Q="300 es",$=1035;class ee{addEventListener(e,t){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[e]&&(n[e]=[]),-1===n[e].indexOf(t)&&n[e].push(t)}hasEventListener(e,t){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[e]&&-1!==n[e].indexOf(t)}removeEventListener(e,t){if(void 0===this._listeners)return;const n=this._listeners[e];if(void 0!==n){const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}dispatchEvent(e){if(void 0===this._listeners)return;const t=this._listeners[e.type];if(void 0!==t){e.target=this;const n=t.slice(0);for(let i=0,t=n.length;i<t;i++)n[i].call(this,e);e.target=null}}}const te=[];for(let i=0;i<256;i++)te[i]=(i<16?"0":"")+i.toString(16);const ne=Math.PI/180,ie=180/Math.PI;function re(){const e=4294967295*Math.random()|0,t=4294967295*Math.random()|0,n=4294967295*Math.random()|0,r=4294967295*Math.random()|0;return(te[255&e]+te[e>>8&255]+te[e>>16&255]+te[e>>24&255]+"-"+te[255&t]+te[t>>8&255]+"-"+te[t>>16&15|64]+te[t>>24&255]+"-"+te[63&n|128]+te[n>>8&255]+"-"+te[n>>16&255]+te[n>>24&255]+te[255&r]+te[r>>8&255]+te[r>>16&255]+te[r>>24&255]).toLowerCase()}function ae(e,t,n){return Math.max(t,Math.min(n,e))}function se(e,t){return(e%t+t)%t}function oe(e,t,n){return(1-n)*e+n*t}function le(e){return 0==(e&e-1)&&0!==e}function ce(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}class he{constructor(e=0,t=0){this.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e,t){return void 0!==t?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)}addScalar(s){return this.x+=s,this.y+=s,this}addVectors(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this}addScaledVector(e,s){return this.x+=e.x*s,this.y+=e.y*s,this}sub(e,t){return void 0!==t?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)}subScalar(s){return this.x-=s,this.y-=s,this}subVectors(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6],this.y=r[1]*t+r[4]*n+r[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),s=Math.sin(t),r=this.x-e.x,o=this.y-e.y;return this.x=r*n-o*s+e.x,this.y=r*s+o*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class ue{constructor(){this.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,r,o,l,c,h,d){const f=this.elements;return f[0]=e,f[1]=r,f[2]=c,f[3]=t,f[4]=o,f[5]=h,f[6]=n,f[7]=l,f[8]=d,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(a,b){const e=a.elements,t=b.elements,n=this.elements,r=e[0],o=e[3],l=e[6],c=e[1],h=e[4],d=e[7],f=e[2],m=e[5],v=e[8],_=t[0],x=t[3],y=t[6],M=t[1],S=t[4],w=t[7],T=t[2],E=t[5],A=t[8];return n[0]=r*_+o*M+l*T,n[3]=r*x+o*S+l*E,n[6]=r*y+o*w+l*A,n[1]=c*_+h*M+d*T,n[4]=c*x+h*S+d*E,n[7]=c*y+h*w+d*A,n[2]=f*_+m*M+v*T,n[5]=f*x+m*S+v*E,n[8]=f*y+m*w+v*A,this}multiplyScalar(s){const e=this.elements;return e[0]*=s,e[3]*=s,e[6]*=s,e[1]*=s,e[4]*=s,e[7]*=s,e[2]*=s,e[5]*=s,e[8]*=s,this}determinant(){const e=this.elements,a=e[0],b=e[1],t=e[2],n=e[3],r=e[4],o=e[5],g=e[6],l=e[7],i=e[8];return a*r*i-a*o*l-b*n*i+b*o*g+t*n*l-t*r*g}invert(){const e=this.elements,t=e[0],n=e[1],r=e[2],o=e[3],l=e[4],c=e[5],h=e[6],d=e[7],f=e[8],m=f*l-c*d,v=c*h-f*o,_=d*o-l*h,x=t*m+n*v+r*_;if(0===x)return this.set(0,0,0,0,0,0,0,0,0);const y=1/x;return e[0]=m*y,e[1]=(r*d-f*n)*y,e[2]=(c*n-r*l)*y,e[3]=v*y,e[4]=(f*t-r*h)*y,e[5]=(r*o-c*t)*y,e[6]=_*y,e[7]=(n*h-d*t)*y,e[8]=(l*t-n*o)*y,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,r,o,l,c){const h=Math.cos(o),s=Math.sin(o);return this.set(n*h,n*s,-n*(h*l+s*c)+l+e,-r*s,r*h,-r*(-s*l+h*c)+c+t,0,0,1),this}scale(e,t){const n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this}rotate(e){const t=Math.cos(e),s=Math.sin(e),n=this.elements,r=n[0],o=n[3],l=n[6],c=n[1],h=n[4],d=n[7];return n[0]=t*r+s*c,n[3]=t*o+s*h,n[6]=t*l+s*d,n[1]=-s*r+t*c,n[4]=-s*o+t*h,n[7]=-s*l+t*d,this}translate(e,t){const n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let i=0;i<9;i++)this.elements[i]=e[i+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return(new this.constructor).fromArray(this.elements)}}function de(e){for(let i=e.length-1;i>=0;--i)if(e[i]>65535)return!0;return!1}Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array;function pe(e){return document.createElementNS("http://www.w3.org/1999/xhtml",e)}function fe(e){return e<.04045?.0773993808*e:Math.pow(.9478672986*e+.0521327014,2.4)}function me(e){return e<.0031308?12.92*e:1.055*Math.pow(e,.41666)-.055}const ge={[Y]:{[Z]:fe},[Z]:{[Y]:me}},ve={legacyMode:!0,get workingColorSpace(){return Z},set workingColorSpace(e){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(e,t,n){if(this.legacyMode||t===n||!t||!n)return e;if(ge[t]&&void 0!==ge[t][n]){const r=ge[t][n];return e.r=r(e.r),e.g=r(e.g),e.b=r(e.b),e}throw new Error("Unsupported color space conversion.")},fromWorkingColorSpace:function(e,t){return this.convert(e,this.workingColorSpace,t)},toWorkingColorSpace:function(e,t){return this.convert(e,t,this.workingColorSpace)}},_e={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},xe={r:0,g:0,b:0},ye={h:0,s:0,l:0},Me={h:0,s:0,l:0};function be(p,q,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?p+6*(q-p)*e:e<.5?q:e<2/3?p+6*(q-p)*(2/3-e):p}function Se(source,e){return e.r=source.r,e.g=source.g,e.b=source.b,e}class we{constructor(e,g,b){return this.isColor=!0,this.r=1,this.g=1,this.b=1,void 0===g&&void 0===b?this.set(e):this.setRGB(e,g,b)}set(e){return e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t="srgb"){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,ve.toWorkingColorSpace(this,t),this}setRGB(e,g,b,t="srgb-linear"){return this.r=e,this.g=g,this.b=b,ve.toWorkingColorSpace(this,t),this}setHSL(e,s,t,n="srgb-linear"){if(e=se(e,1),s=ae(s,0,1),t=ae(t,0,1),0===s)this.r=this.g=this.b=t;else{const p=t<=.5?t*(1+s):t+s-t*s,q=2*t-p;this.r=be(q,p,e+1/3),this.g=be(q,p,e),this.b=be(q,p,e-1/3)}return ve.toWorkingColorSpace(this,n),this}setStyle(style,e="srgb"){function t(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+style+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)){let r;const o=n[1],l=n[2];switch(o){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(l))return this.r=Math.min(255,parseInt(r[1],10))/255,this.g=Math.min(255,parseInt(r[2],10))/255,this.b=Math.min(255,parseInt(r[3],10))/255,ve.toWorkingColorSpace(this,e),t(r[4]),this;if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(l))return this.r=Math.min(100,parseInt(r[1],10))/100,this.g=Math.min(100,parseInt(r[2],10))/100,this.b=Math.min(100,parseInt(r[3],10))/100,ve.toWorkingColorSpace(this,e),t(r[4]),this;break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(l)){const n=parseFloat(r[1])/360,s=parseInt(r[2],10)/100,o=parseInt(r[3],10)/100;return t(r[4]),this.setHSL(n,s,o,e)}}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(style)){const t=n[1],r=t.length;if(3===r)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,ve.toWorkingColorSpace(this,e),this;if(6===r)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,ve.toWorkingColorSpace(this,e),this}return style&&style.length>0?this.setColorName(style,e):this}setColorName(style,e="srgb"){const t=_e[style.toLowerCase()];return void 0!==t?this.setHex(t,e):console.warn("THREE.Color: Unknown color "+style),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=fe(e.r),this.g=fe(e.g),this.b=fe(e.b),this}copyLinearToSRGB(e){return this.r=me(e.r),this.g=me(e.g),this.b=me(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e="srgb"){return ve.fromWorkingColorSpace(Se(this,xe),e),ae(255*xe.r,0,255)<<16^ae(255*xe.g,0,255)<<8^ae(255*xe.b,0,255)<<0}getHexString(e="srgb"){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t="srgb-linear"){ve.fromWorkingColorSpace(Se(this,xe),t);const n=xe.r,g=xe.g,b=xe.b,r=Math.max(n,g,b),o=Math.min(n,g,b);let l,c;const h=(o+r)/2;if(o===r)l=0,c=0;else{const e=r-o;switch(c=h<=.5?e/(r+o):e/(2-r-o),r){case n:l=(g-b)/e+(g<b?6:0);break;case g:l=(b-n)/e+2;break;case b:l=(n-g)/e+4}l/=6}return e.h=l,e.s=c,e.l=h,e}getRGB(e,t="srgb-linear"){return ve.fromWorkingColorSpace(Se(this,xe),t),e.r=xe.r,e.g=xe.g,e.b=xe.b,e}getStyle(e="srgb"){return ve.fromWorkingColorSpace(Se(this,xe),e),e!==Y?`color(${e} ${xe.r} ${xe.g} ${xe.b})`:`rgb(${255*xe.r|0},${255*xe.g|0},${255*xe.b|0})`}offsetHSL(e,s,t){return this.getHSL(ye),ye.h+=e,ye.s+=s,ye.l+=t,this.setHSL(ye.h,ye.s,ye.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(s){return this.r+=s,this.g+=s,this.b+=s,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(s){return this.r*=s,this.g*=s,this.b*=s,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(ye),e.getHSL(Me);const n=oe(ye.h,Me.h,t),s=oe(ye.s,Me.s,t),r=oe(ye.l,Me.l,t);return this.setHSL(n,s,r),this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),!0===e.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}let Te;we.NAMES=_e;class Ee{static getDataURL(image){if(/^data:/i.test(image.src))return image.src;if("undefined"==typeof HTMLCanvasElement)return image.src;let canvas;if(image instanceof HTMLCanvasElement)canvas=image;else{void 0===Te&&(Te=pe("canvas")),Te.width=image.width,Te.height=image.height;const e=Te.getContext("2d");image instanceof ImageData?e.putImageData(image,0,0):e.drawImage(image,0,0,image.width,image.height),canvas=Te}return canvas.width>2048||canvas.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",image),canvas.toDataURL("image/jpeg",.6)):canvas.toDataURL("image/png")}static sRGBToLinear(image){if("undefined"!=typeof HTMLImageElement&&image instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&image instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&image instanceof ImageBitmap){const canvas=pe("canvas");canvas.width=image.width,canvas.height=image.height;const e=canvas.getContext("2d");e.drawImage(image,0,0,image.width,image.height);const t=e.getImageData(0,0,image.width,image.height),data=t.data;for(let i=0;i<data.length;i++)data[i]=255*fe(data[i]/255);return e.putImageData(t,0,0),canvas}if(image.data){const data=image.data.slice(0);for(let i=0;i<data.length;i++)data instanceof Uint8Array||data instanceof Uint8ClampedArray?data[i]=Math.floor(255*fe(data[i]/255)):data[i]=fe(data[i]);return{data:data,width:image.width,height:image.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),image}}class Ae{constructor(data=null){this.isSource=!0,this.uuid=re(),this.data=data,this.version=0}set needsUpdate(e){!0===e&&this.version++}toJSON(meta){const e=void 0===meta||"string"==typeof meta;if(!e&&void 0!==meta.images[this.uuid])return meta.images[this.uuid];const output={uuid:this.uuid,url:""},data=this.data;if(null!==data){let e;if(Array.isArray(data)){e=[];for(let i=0,t=data.length;i<t;i++)data[i].isDataTexture?e.push(Le(data[i].image)):e.push(Le(data[i]))}else e=Le(data);output.url=e}return e||(meta.images[this.uuid]=output),output}}function Le(image){return"undefined"!=typeof HTMLImageElement&&image instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&image instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&image instanceof ImageBitmap?Ee.getDataURL(image):image.data?{data:Array.prototype.slice.call(image.data),width:image.width,height:image.height,type:image.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let Ce=0;class Re extends ee{constructor(image=Re.DEFAULT_IMAGE,e=Re.DEFAULT_MAPPING,t=1001,n=1001,r=1006,o=1008,l=1023,c=1009,h=1,d=3e3){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:Ce++}),this.uuid=re(),this.name="",this.source=new Ae(image),this.mipmaps=[],this.mapping=e,this.wrapS=t,this.wrapT=n,this.magFilter=r,this.minFilter=o,this.anisotropy=h,this.format=l,this.internalFormat=null,this.type=c,this.offset=new he(0,0),this.repeat=new he(1,1),this.center=new he(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ue,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=d,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(source){return this.name=source.name,this.source=source.source,this.mipmaps=source.mipmaps.slice(0),this.mapping=source.mapping,this.wrapS=source.wrapS,this.wrapT=source.wrapT,this.magFilter=source.magFilter,this.minFilter=source.minFilter,this.anisotropy=source.anisotropy,this.format=source.format,this.internalFormat=source.internalFormat,this.type=source.type,this.offset.copy(source.offset),this.repeat.copy(source.repeat),this.center.copy(source.center),this.rotation=source.rotation,this.matrixAutoUpdate=source.matrixAutoUpdate,this.matrix.copy(source.matrix),this.generateMipmaps=source.generateMipmaps,this.premultiplyAlpha=source.premultiplyAlpha,this.flipY=source.flipY,this.unpackAlignment=source.unpackAlignment,this.encoding=source.encoding,this.userData=JSON.parse(JSON.stringify(source.userData)),this.needsUpdate=!0,this}toJSON(meta){const e=void 0===meta||"string"==typeof meta;if(!e&&void 0!==meta.textures[this.uuid])return meta.textures[this.uuid];const output={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(meta).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return"{}"!==JSON.stringify(this.userData)&&(output.userData=this.userData),e||(meta.textures[this.uuid]=output),output}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(300!==this.mapping)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case _:e.x=e.x-Math.floor(e.x);break;case x:e.x=e.x<0?0:1;break;case y:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case _:e.y=e.y-Math.floor(e.y);break;case x:e.y=e.y<0?0:1;break;case y:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){!0===e&&(this.version++,this.source.needsUpdate=!0)}}Re.DEFAULT_IMAGE=null,Re.DEFAULT_MAPPING=300;class Pe{constructor(e=0,t=0,n=0,r=1){this.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=r}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,r){return this.x=e,this.y=t,this.z=n,this.w=r,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this}add(e,t){return void 0!==t?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)}addScalar(s){return this.x+=s,this.y+=s,this.z+=s,this.w+=s,this}addVectors(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this.w=a.w+b.w,this}addScaledVector(e,s){return this.x+=e.x*s,this.y+=e.y*s,this.z+=e.z*s,this.w+=e.w*s,this}sub(e,t){return void 0!==t?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)}subScalar(s){return this.x-=s,this.y-=s,this.z-=s,this.w-=s,this}subVectors(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this.w=a.w-b.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,r=this.z,o=this.w,l=e.elements;return this.x=l[0]*t+l[4]*n+l[8]*r+l[12]*o,this.y=l[1]*t+l[5]*n+l[9]*r+l[13]*o,this.z=l[2]*t+l[6]*n+l[10]*r+l[14]*o,this.w=l[3]*t+l[7]*n+l[11]*r+l[15]*o,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(q){this.w=2*Math.acos(q.w);const s=Math.sqrt(1-q.w*q.w);return s<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=q.x/s,this.y=q.y/s,this.z=q.z/s),this}setAxisAngleFromRotationMatrix(e){let t,n,r,o;const l=.01,c=.1,h=e.elements,d=h[0],f=h[4],m=h[8],v=h[1],_=h[5],x=h[9],y=h[2],M=h[6],S=h[10];if(Math.abs(f-v)<l&&Math.abs(m-y)<l&&Math.abs(x-M)<l){if(Math.abs(f+v)<c&&Math.abs(m+y)<c&&Math.abs(x+M)<c&&Math.abs(d+_+S-3)<c)return this.set(1,0,0,0),this;t=Math.PI;const e=(d+1)/2,h=(_+1)/2,w=(S+1)/2,T=(f+v)/4,E=(m+y)/4,A=(x+M)/4;return e>h&&e>w?e<l?(n=0,r=.707106781,o=.707106781):(n=Math.sqrt(e),r=T/n,o=E/n):h>w?h<l?(n=.707106781,r=0,o=.707106781):(r=Math.sqrt(h),n=T/r,o=A/r):w<l?(n=.707106781,r=.707106781,o=0):(o=Math.sqrt(w),n=E/o,r=A/o),this.set(n,r,o,t),this}let s=Math.sqrt((M-x)*(M-x)+(m-y)*(m-y)+(v-f)*(v-f));return Math.abs(s)<.001&&(s=1),this.x=(M-x)/s,this.y=(m-y)/s,this.z=(v-f)/s,this.w=Math.acos((d+_+S-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class De extends ee{constructor(e,t,n={}){super(),this.isWebGLRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new Pe(0,0,e,t),this.scissorTest=!1,this.viewport=new Pe(0,0,e,t);const image={width:e,height:t,depth:1};this.texture=new Re(image,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.internalFormat=void 0!==n.internalFormat?n.internalFormat:null,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:T,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0!==n.stencilBuffer&&n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null,this.samples=void 0!==n.samples?n.samples:0}setSize(e,t,n=1){this.width===e&&this.height===t&&this.depth===n||(this.width=e,this.height=t,this.depth=n,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return(new this.constructor).copy(this)}copy(source){this.width=source.width,this.height=source.height,this.depth=source.depth,this.viewport.copy(source.viewport),this.texture=source.texture.clone(),this.texture.isRenderTargetTexture=!0;const image=Object.assign({},source.texture.image);return this.texture.source=new Ae(image),this.depthBuffer=source.depthBuffer,this.stencilBuffer=source.stencilBuffer,null!==source.depthTexture&&(this.depthTexture=source.depthTexture.clone()),this.samples=source.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Ie extends Re{constructor(data=null,e=1,t=1,n=1){super(null),this.isDataArrayTexture=!0,this.image={data:data,width:e,height:t,depth:n},this.magFilter=M,this.minFilter=M,this.wrapR=x,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Ne extends Re{constructor(data=null,e=1,t=1,n=1){super(null),this.isData3DTexture=!0,this.image={data:data,width:e,height:t,depth:n},this.magFilter=M,this.minFilter=M,this.wrapR=x,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Oe{constructor(e=0,t=0,n=0,r=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=r}static slerp(e,t,n,r){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),n.slerpQuaternions(e,t,r)}static slerpFlat(e,t,n,r,o,l,c){let h=n[r+0],d=n[r+1],f=n[r+2],m=n[r+3];const v=o[l+0],_=o[l+1],x=o[l+2],y=o[l+3];if(0===c)return e[t+0]=h,e[t+1]=d,e[t+2]=f,void(e[t+3]=m);if(1===c)return e[t+0]=v,e[t+1]=_,e[t+2]=x,void(e[t+3]=y);if(m!==y||h!==v||d!==_||f!==x){let s=1-c;const e=h*v+d*_+f*x+m*y,t=e>=0?1:-1,n=1-e*e;if(n>Number.EPSILON){const r=Math.sqrt(n),o=Math.atan2(r,e*t);s=Math.sin(s*o)/r,c=Math.sin(c*o)/r}const r=c*t;if(h=h*s+v*r,d=d*s+_*r,f=f*s+x*r,m=m*s+y*r,s===1-c){const e=1/Math.sqrt(h*h+d*d+f*f+m*m);h*=e,d*=e,f*=e,m*=e}}e[t]=h,e[t+1]=d,e[t+2]=f,e[t+3]=m}static multiplyQuaternionsFlat(e,t,n,r,o,l){const c=n[r],h=n[r+1],d=n[r+2],f=n[r+3],m=o[l],v=o[l+1],_=o[l+2],x=o[l+3];return e[t]=c*x+f*m+h*_-d*v,e[t+1]=h*x+f*v+d*m-c*_,e[t+2]=d*x+f*_+c*v-h*m,e[t+3]=f*x-c*m-h*v-d*_,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,r){return this._x=e,this._y=t,this._z=n,this._w=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){if(!e||!e.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const n=e._x,r=e._y,o=e._z,l=e._order,c=Math.cos,h=Math.sin,d=c(n/2),f=c(r/2),m=c(o/2),v=h(n/2),_=h(r/2),x=h(o/2);switch(l){case"XYZ":this._x=v*f*m+d*_*x,this._y=d*_*m-v*f*x,this._z=d*f*x+v*_*m,this._w=d*f*m-v*_*x;break;case"YXZ":this._x=v*f*m+d*_*x,this._y=d*_*m-v*f*x,this._z=d*f*x-v*_*m,this._w=d*f*m+v*_*x;break;case"ZXY":this._x=v*f*m-d*_*x,this._y=d*_*m+v*f*x,this._z=d*f*x+v*_*m,this._w=d*f*m-v*_*x;break;case"ZYX":this._x=v*f*m-d*_*x,this._y=d*_*m+v*f*x,this._z=d*f*x-v*_*m,this._w=d*f*m+v*_*x;break;case"YZX":this._x=v*f*m+d*_*x,this._y=d*_*m+v*f*x,this._z=d*f*x-v*_*m,this._w=d*f*m-v*_*x;break;case"XZY":this._x=v*f*m-d*_*x,this._y=d*_*m-v*f*x,this._z=d*f*x+v*_*m,this._w=d*f*m+v*_*x;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+l)}return!1!==t&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,s=Math.sin(n);return this._x=e.x*s,this._y=e.y*s,this._z=e.z*s,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],r=t[4],o=t[8],l=t[1],c=t[5],h=t[9],d=t[2],f=t[6],m=t[10],v=n+c+m;if(v>0){const s=.5/Math.sqrt(v+1);this._w=.25/s,this._x=(f-h)*s,this._y=(o-d)*s,this._z=(l-r)*s}else if(n>c&&n>m){const s=2*Math.sqrt(1+n-c-m);this._w=(f-h)/s,this._x=.25*s,this._y=(r+l)/s,this._z=(o+d)/s}else if(c>m){const s=2*Math.sqrt(1+c-n-m);this._w=(o-d)/s,this._x=(r+l)/s,this._y=.25*s,this._z=(h+f)/s}else{const s=2*Math.sqrt(1+m-n-c);this._w=(l-r)/s,this._x=(o+d)/s,this._y=(h+f)/s,this._z=.25*s}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(q){return 2*Math.acos(Math.abs(ae(this.dot(q),-1,1)))}rotateTowards(q,e){const t=this.angleTo(q);if(0===t)return this;const n=Math.min(1,e/t);return this.slerp(q,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(q,p){return void 0!==p?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(q,p)):this.multiplyQuaternions(this,q)}premultiply(q){return this.multiplyQuaternions(q,this)}multiplyQuaternions(a,b){const e=a._x,t=a._y,n=a._z,r=a._w,o=b._x,l=b._y,c=b._z,h=b._w;return this._x=e*h+r*o+t*c-n*l,this._y=t*h+r*l+n*o-e*c,this._z=n*h+r*c+e*l-t*o,this._w=r*h-e*o-t*l-n*c,this._onChangeCallback(),this}slerp(e,t){if(0===t)return this;if(1===t)return this.copy(e);const n=this._x,r=this._y,o=this._z,l=this._w;let c=l*e._w+n*e._x+r*e._y+o*e._z;if(c<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,c=-c):this.copy(e),c>=1)return this._w=l,this._x=n,this._y=r,this._z=o,this;const h=1-c*c;if(h<=Number.EPSILON){const s=1-t;return this._w=s*l+t*this._w,this._x=s*n+t*this._x,this._y=s*r+t*this._y,this._z=s*o+t*this._z,this.normalize(),this._onChangeCallback(),this}const d=Math.sqrt(h),f=Math.atan2(d,c),m=Math.sin((1-t)*f)/d,v=Math.sin(t*f)/d;return this._w=l*m+this._w*v,this._x=n*m+this._x*v,this._y=r*m+this._y*v,this._z=o*m+this._z*v,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=Math.random(),t=Math.sqrt(1-e),n=Math.sqrt(e),r=2*Math.PI*Math.random(),o=2*Math.PI*Math.random();return this.set(t*Math.cos(r),n*Math.sin(o),n*Math.cos(o),t*Math.sin(r))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class ze{constructor(e=0,t=0,n=0){this.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return void 0===n&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e,t){return void 0!==t?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)}addScalar(s){return this.x+=s,this.y+=s,this.z+=s,this}addVectors(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this}addScaledVector(e,s){return this.x+=e.x*s,this.y+=e.y*s,this.z+=e.z*s,this}sub(e,t){return void 0!==t?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)}subScalar(s){return this.x-=s,this.y-=s,this.z-=s,this}subVectors(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this}multiply(e,t){return void 0!==t?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(a,b){return this.x=a.x*b.x,this.y=a.y*b.y,this.z=a.z*b.z,this}applyEuler(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(Fe.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(Fe.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,r=this.z,o=e.elements;return this.x=o[0]*t+o[3]*n+o[6]*r,this.y=o[1]*t+o[4]*n+o[7]*r,this.z=o[2]*t+o[5]*n+o[8]*r,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,r=this.z,o=e.elements,l=1/(o[3]*t+o[7]*n+o[11]*r+o[15]);return this.x=(o[0]*t+o[4]*n+o[8]*r+o[12])*l,this.y=(o[1]*t+o[5]*n+o[9]*r+o[13])*l,this.z=(o[2]*t+o[6]*n+o[10]*r+o[14])*l,this}applyQuaternion(q){const e=this.x,t=this.y,n=this.z,r=q.x,o=q.y,l=q.z,c=q.w,h=c*e+o*n-l*t,d=c*t+l*e-r*n,f=c*n+r*t-o*e,m=-r*e-o*t-l*n;return this.x=h*c+m*-r+d*-l-f*-o,this.y=d*c+m*-o+f*-r-h*-l,this.z=f*c+m*-l+h*-o-d*-r,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,r=this.z,o=e.elements;return this.x=o[0]*t+o[4]*n+o[8]*r,this.y=o[1]*t+o[5]*n+o[9]*r,this.z=o[2]*t+o[6]*n+o[10]*r,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e,t){return void 0!==t?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)}crossVectors(a,b){const e=a.x,t=a.y,n=a.z,r=b.x,o=b.y,l=b.z;return this.x=t*l-n*o,this.y=n*r-e*l,this.z=e*o-t*r,this}projectOnVector(e){const t=e.lengthSq();if(0===t)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return Ue.copy(this).projectOnVector(e),this.sub(Ue)}reflect(e){return this.sub(Ue.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(0===t)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(ae(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,r=this.z-e.z;return t*t+n*n+r*r}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(s){return this.setFromSphericalCoords(s.radius,s.phi,s.theta)}setFromSphericalCoords(e,t,n){const r=Math.sin(t)*e;return this.x=r*Math.sin(n),this.y=Math.cos(t)*e,this.z=r*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),r=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=r,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,4*t)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,3*t)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const u=2*(Math.random()-.5),e=Math.random()*Math.PI*2,t=Math.sqrt(1-u**2);return this.x=t*Math.cos(e),this.y=t*Math.sin(e),this.z=u,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Ue=new ze,Fe=new Oe;class Be{constructor(e=new ze(1/0,1/0,1/0),t=new ze(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){let t=1/0,n=1/0,r=1/0,o=-1/0,l=-1/0,c=-1/0;for(let i=0,h=e.length;i<h;i+=3){const h=e[i],d=e[i+1],f=e[i+2];h<t&&(t=h),d<n&&(n=d),f<r&&(r=f),h>o&&(o=h),d>l&&(l=d),f>c&&(c=f)}return this.min.set(t,n,r),this.max.set(o,l,c),this}setFromBufferAttribute(e){let t=1/0,n=1/0,r=1/0,o=-1/0,l=-1/0,c=-1/0;for(let i=0,h=e.count;i<h;i++){const h=e.getX(i),d=e.getY(i),f=e.getZ(i);h<t&&(t=h),d<n&&(n=d),f<r&&(r=f),h>o&&(o=h),d>l&&(l=d),f>c&&(c=f)}return this.min.set(t,n,r),this.max.set(o,l,c),this}setFromPoints(e){this.makeEmpty();for(let i=0,t=e.length;i<t;i++)this.expandByPoint(e[i]);return this}setFromCenterAndSize(e,t){const n=Ve.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(object,e=!1){return this.makeEmpty(),this.expandByObject(object,e)}clone(){return(new this.constructor).copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(object,e=!1){object.updateWorldMatrix(!1,!1);const t=object.geometry;if(void 0!==t)if(e&&null!=t.attributes&&void 0!==t.attributes.position){const e=t.attributes.position;for(let i=0,t=e.count;i<t;i++)Ve.fromBufferAttribute(e,i).applyMatrix4(object.matrixWorld),this.expandByPoint(Ve)}else null===t.boundingBox&&t.computeBoundingBox(),He.copy(t.boundingBox),He.applyMatrix4(object.matrixWorld),this.union(He);const n=object.children;for(let i=0,t=n.length;i<t;i++)this.expandByObject(n[i],e);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,Ve),Ve.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Ze),Ke.subVectors(this.max,Ze),Ge.subVectors(e.a,Ze),We.subVectors(e.b,Ze),je.subVectors(e.c,Ze),qe.subVectors(We,Ge),Xe.subVectors(je,We),Ye.subVectors(Ge,je);let t=[0,-qe.z,qe.y,0,-Xe.z,Xe.y,0,-Ye.z,Ye.y,qe.z,0,-qe.x,Xe.z,0,-Xe.x,Ye.z,0,-Ye.x,-qe.y,qe.x,0,-Xe.y,Xe.x,0,-Ye.y,Ye.x,0];return!!$e(t,Ge,We,je,Ke)&&(t=[1,0,0,0,1,0,0,0,1],!!$e(t,Ge,We,je,Ke)&&(Je.crossVectors(qe,Xe),t=[Je.x,Je.y,Je.z],$e(t,Ge,We,je,Ke)))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return Ve.copy(e).clamp(this.min,this.max).sub(e).length()}getBoundingSphere(e){return this.getCenter(e.center),e.radius=.5*this.getSize(Ve).length(),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()||(ke[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),ke[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),ke[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),ke[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),ke[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),ke[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),ke[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),ke[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(ke)),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const ke=[new ze,new ze,new ze,new ze,new ze,new ze,new ze,new ze],Ve=new ze,He=new Be,Ge=new ze,We=new ze,je=new ze,qe=new ze,Xe=new ze,Ye=new ze,Ze=new ze,Ke=new ze,Je=new ze,Qe=new ze;function $e(e,t,n,r,o){for(let i=0,l=e.length-3;i<=l;i+=3){Qe.fromArray(e,i);const l=o.x*Math.abs(Qe.x)+o.y*Math.abs(Qe.y)+o.z*Math.abs(Qe.z),c=t.dot(Qe),h=n.dot(Qe),d=r.dot(Qe);if(Math.max(-Math.max(c,h,d),Math.min(c,h,d))>l)return!1}return!0}const et=new Be,tt=new ze,nt=new ze,it=new ze;class at{constructor(e=new ze,t=-1){this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;void 0!==t?n.copy(t):et.setFromPoints(e).getCenter(n);let r=0;for(let i=0,t=e.length;i<t;i++)r=Math.max(r,n.distanceToSquared(e[i]));return this.radius=Math.sqrt(r),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){it.subVectors(e,this.center);const t=it.lengthSq();if(t>this.radius*this.radius){const e=Math.sqrt(t),n=.5*(e-this.radius);this.center.add(it.multiplyScalar(n/e)),this.radius+=n}return this}union(e){return!0===this.center.equals(e.center)?nt.set(0,0,1).multiplyScalar(e.radius):nt.subVectors(e.center,this.center).normalize().multiplyScalar(e.radius),this.expandByPoint(tt.copy(e.center).add(nt)),this.expandByPoint(tt.copy(e.center).sub(nt)),this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const st=new ze,ot=new ze,lt=new ze,ct=new ze,ht=new ze,ut=new ze,pt=new ze;class ft{constructor(e=new ze,t=new ze(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.direction).multiplyScalar(e).add(this.origin)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,st)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=st.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(st.copy(this.direction).multiplyScalar(t).add(this.origin),st.distanceToSquared(e))}distanceSqToSegment(e,t,n,r){ot.copy(e).add(t).multiplyScalar(.5),lt.copy(t).sub(e).normalize(),ct.copy(this.origin).sub(ot);const o=.5*e.distanceTo(t),l=-this.direction.dot(lt),c=ct.dot(this.direction),h=-ct.dot(lt),d=ct.lengthSq(),f=Math.abs(1-l*l);let m,v,_,x;if(f>0)if(m=l*h-c,v=l*c-h,x=o*f,m>=0)if(v>=-x)if(v<=x){const e=1/f;m*=e,v*=e,_=m*(m+l*v+2*c)+v*(l*m+v+2*h)+d}else v=o,m=Math.max(0,-(l*v+c)),_=-m*m+v*(v+2*h)+d;else v=-o,m=Math.max(0,-(l*v+c)),_=-m*m+v*(v+2*h)+d;else v<=-x?(m=Math.max(0,-(-l*o+c)),v=m>0?-o:Math.min(Math.max(-o,-h),o),_=-m*m+v*(v+2*h)+d):v<=x?(m=0,v=Math.min(Math.max(-o,-h),o),_=v*(v+2*h)+d):(m=Math.max(0,-(l*o+c)),v=m>0?o:Math.min(Math.max(-o,-h),o),_=-m*m+v*(v+2*h)+d);else v=l>0?-o:o,m=Math.max(0,-(l*v+c)),_=-m*m+v*(v+2*h)+d;return n&&n.copy(this.direction).multiplyScalar(m).add(this.origin),r&&r.copy(lt).multiplyScalar(v).add(ot),_}intersectSphere(e,t){st.subVectors(e.center,this.origin);const n=st.dot(this.direction),r=st.dot(st)-n*n,o=e.radius*e.radius;if(r>o)return null;const l=Math.sqrt(o-r),c=n-l,h=n+l;return c<0&&h<0?null:c<0?this.at(h,t):this.at(c,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return null===n?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);if(0===t)return!0;return e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,r,o,l,c,h;const d=1/this.direction.x,f=1/this.direction.y,m=1/this.direction.z,v=this.origin;return d>=0?(n=(e.min.x-v.x)*d,r=(e.max.x-v.x)*d):(n=(e.max.x-v.x)*d,r=(e.min.x-v.x)*d),f>=0?(o=(e.min.y-v.y)*f,l=(e.max.y-v.y)*f):(o=(e.max.y-v.y)*f,l=(e.min.y-v.y)*f),n>l||o>r?null:((o>n||n!=n)&&(n=o),(l<r||r!=r)&&(r=l),m>=0?(c=(e.min.z-v.z)*m,h=(e.max.z-v.z)*m):(c=(e.max.z-v.z)*m,h=(e.min.z-v.z)*m),n>h||c>r?null:((c>n||n!=n)&&(n=c),(h<r||r!=r)&&(r=h),r<0?null:this.at(n>=0?n:r,t)))}intersectsBox(e){return null!==this.intersectBox(e,st)}intersectTriangle(a,b,e,t,n){ht.subVectors(b,a),ut.subVectors(e,a),pt.crossVectors(ht,ut);let r,o=this.direction.dot(pt);if(o>0){if(t)return null;r=1}else{if(!(o<0))return null;r=-1,o=-o}ct.subVectors(this.origin,a);const l=r*this.direction.dot(ut.crossVectors(ct,ut));if(l<0)return null;const c=r*this.direction.dot(ht.cross(ct));if(c<0)return null;if(l+c>o)return null;const h=-r*ct.dot(pt);return h<0?null:this.at(h/o,n)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class mt{constructor(){this.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,r,o,l,c,h,d,f,m,v,_,x,y,M){const S=this.elements;return S[0]=e,S[4]=t,S[8]=n,S[12]=r,S[1]=o,S[5]=l,S[9]=c,S[13]=h,S[2]=d,S[6]=f,S[10]=m,S[14]=v,S[3]=_,S[7]=x,S[11]=y,S[15]=M,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new mt).fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,r=1/gt.setFromMatrixColumn(e,0).length(),o=1/gt.setFromMatrixColumn(e,1).length(),l=1/gt.setFromMatrixColumn(e,2).length();return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=0,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=0,t[8]=n[8]*l,t[9]=n[9]*l,t[10]=n[10]*l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const t=this.elements,n=e.x,r=e.y,o=e.z,a=Math.cos(n),b=Math.sin(n),l=Math.cos(r),c=Math.sin(r),h=Math.cos(o),d=Math.sin(o);if("XYZ"===e.order){const e=a*h,n=a*d,r=b*h,o=b*d;t[0]=l*h,t[4]=-l*d,t[8]=c,t[1]=n+r*c,t[5]=e-o*c,t[9]=-b*l,t[2]=o-e*c,t[6]=r+n*c,t[10]=a*l}else if("YXZ"===e.order){const e=l*h,n=l*d,r=c*h,o=c*d;t[0]=e+o*b,t[4]=r*b-n,t[8]=a*c,t[1]=a*d,t[5]=a*h,t[9]=-b,t[2]=n*b-r,t[6]=o+e*b,t[10]=a*l}else if("ZXY"===e.order){const e=l*h,n=l*d,r=c*h,o=c*d;t[0]=e-o*b,t[4]=-a*d,t[8]=r+n*b,t[1]=n+r*b,t[5]=a*h,t[9]=o-e*b,t[2]=-a*c,t[6]=b,t[10]=a*l}else if("ZYX"===e.order){const e=a*h,n=a*d,r=b*h,o=b*d;t[0]=l*h,t[4]=r*c-n,t[8]=e*c+o,t[1]=l*d,t[5]=o*c+e,t[9]=n*c-r,t[2]=-c,t[6]=b*l,t[10]=a*l}else if("YZX"===e.order){const e=a*l,n=a*c,r=b*l,o=b*c;t[0]=l*h,t[4]=o-e*d,t[8]=r*d+n,t[1]=d,t[5]=a*h,t[9]=-b*h,t[2]=-c*h,t[6]=n*d+r,t[10]=e-o*d}else if("XZY"===e.order){const e=a*l,n=a*c,r=b*l,o=b*c;t[0]=l*h,t[4]=-d,t[8]=c*h,t[1]=e*d+o,t[5]=a*h,t[9]=n*d-r,t[2]=r*d-n,t[6]=b*h,t[10]=o*d+e}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(q){return this.compose(_t,q,xt)}lookAt(e,t,n){const r=this.elements;return bt.subVectors(e,t),0===bt.lengthSq()&&(bt.z=1),bt.normalize(),yt.crossVectors(n,bt),0===yt.lengthSq()&&(1===Math.abs(n.z)?bt.x+=1e-4:bt.z+=1e-4,bt.normalize(),yt.crossVectors(n,bt)),yt.normalize(),Mt.crossVectors(bt,yt),r[0]=yt.x,r[4]=Mt.x,r[8]=bt.x,r[1]=yt.y,r[5]=Mt.y,r[9]=bt.y,r[2]=yt.z,r[6]=Mt.z,r[10]=bt.z,this}multiply(e,t){return void 0!==t?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(a,b){const e=a.elements,t=b.elements,n=this.elements,r=e[0],o=e[4],l=e[8],c=e[12],h=e[1],d=e[5],f=e[9],m=e[13],v=e[2],_=e[6],x=e[10],y=e[14],M=e[3],S=e[7],w=e[11],T=e[15],E=t[0],A=t[4],L=t[8],C=t[12],R=t[1],P=t[5],D=t[9],I=t[13],N=t[2],O=t[6],z=t[10],U=t[14],F=t[3],B=t[7],k=t[11],V=t[15];return n[0]=r*E+o*R+l*N+c*F,n[4]=r*A+o*P+l*O+c*B,n[8]=r*L+o*D+l*z+c*k,n[12]=r*C+o*I+l*U+c*V,n[1]=h*E+d*R+f*N+m*F,n[5]=h*A+d*P+f*O+m*B,n[9]=h*L+d*D+f*z+m*k,n[13]=h*C+d*I+f*U+m*V,n[2]=v*E+_*R+x*N+y*F,n[6]=v*A+_*P+x*O+y*B,n[10]=v*L+_*D+x*z+y*k,n[14]=v*C+_*I+x*U+y*V,n[3]=M*E+S*R+w*N+T*F,n[7]=M*A+S*P+w*O+T*B,n[11]=M*L+S*D+w*z+T*k,n[15]=M*C+S*I+w*U+T*V,this}multiplyScalar(s){const e=this.elements;return e[0]*=s,e[4]*=s,e[8]*=s,e[12]*=s,e[1]*=s,e[5]*=s,e[9]*=s,e[13]*=s,e[2]*=s,e[6]*=s,e[10]*=s,e[14]*=s,e[3]*=s,e[7]*=s,e[11]*=s,e[15]*=s,this}determinant(){const e=this.elements,t=e[0],n=e[4],r=e[8],o=e[12],l=e[1],c=e[5],h=e[9],d=e[13],f=e[2],m=e[6],v=e[10],_=e[14];return e[3]*(+o*h*m-r*d*m-o*c*v+n*d*v+r*c*_-n*h*_)+e[7]*(+t*h*_-t*d*v+o*l*v-r*l*_+r*d*f-o*h*f)+e[11]*(+t*d*m-t*c*_-o*l*m+n*l*_+o*c*f-n*d*f)+e[15]*(-r*c*f-t*h*m+t*c*v+r*l*m-n*l*v+n*h*f)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const r=this.elements;return e.isVector3?(r[12]=e.x,r[13]=e.y,r[14]=e.z):(r[12]=e,r[13]=t,r[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],r=e[2],o=e[3],l=e[4],c=e[5],h=e[6],d=e[7],f=e[8],m=e[9],v=e[10],_=e[11],x=e[12],y=e[13],M=e[14],S=e[15],w=m*M*d-y*v*d+y*h*_-c*M*_-m*h*S+c*v*S,T=x*v*d-f*M*d-x*h*_+l*M*_+f*h*S-l*v*S,E=f*y*d-x*m*d+x*c*_-l*y*_-f*c*S+l*m*S,A=x*m*h-f*y*h-x*c*v+l*y*v+f*c*M-l*m*M,L=t*w+n*T+r*E+o*A;if(0===L)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const C=1/L;return e[0]=w*C,e[1]=(y*v*o-m*M*o-y*r*_+n*M*_+m*r*S-n*v*S)*C,e[2]=(c*M*o-y*h*o+y*r*d-n*M*d-c*r*S+n*h*S)*C,e[3]=(m*h*o-c*v*o-m*r*d+n*v*d+c*r*_-n*h*_)*C,e[4]=T*C,e[5]=(f*M*o-x*v*o+x*r*_-t*M*_-f*r*S+t*v*S)*C,e[6]=(x*h*o-l*M*o-x*r*d+t*M*d+l*r*S-t*h*S)*C,e[7]=(l*v*o-f*h*o+f*r*d-t*v*d-l*r*_+t*h*_)*C,e[8]=E*C,e[9]=(x*m*o-f*y*o-x*n*_+t*y*_+f*n*S-t*m*S)*C,e[10]=(l*y*o-x*c*o+x*n*d-t*y*d-l*n*S+t*c*S)*C,e[11]=(f*c*o-l*m*o-f*n*d+t*m*d+l*n*_-t*c*_)*C,e[12]=A*C,e[13]=(f*y*r-x*m*r+x*n*v-t*y*v-f*n*M+t*m*M)*C,e[14]=(x*c*r-l*y*r-x*n*h+t*y*h+l*n*M-t*c*M)*C,e[15]=(l*m*r-f*c*r+f*n*h-t*m*h-l*n*v+t*c*v)*C,this}scale(e){const t=this.elements,n=e.x,r=e.y,o=e.z;return t[0]*=n,t[4]*=r,t[8]*=o,t[1]*=n,t[5]*=r,t[9]*=o,t[2]*=n,t[6]*=r,t[10]*=o,t[3]*=n,t[7]*=r,t[11]*=o,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],r=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,r))}makeTranslation(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),s=Math.sin(e);return this.set(1,0,0,0,0,t,-s,0,0,s,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),s=Math.sin(e);return this.set(t,0,s,0,0,1,0,0,-s,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),s=Math.sin(e);return this.set(t,-s,0,0,s,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),s=Math.sin(t),r=1-n,o=e.x,l=e.y,c=e.z,h=r*o,d=r*l;return this.set(h*o+n,h*l-s*c,h*c+s*l,0,h*l+s*c,d*l+n,d*c-s*o,0,h*c-s*l,d*c+s*o,r*c*c+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,r,o,l){return this.set(1,n,o,0,e,1,l,0,t,r,1,0,0,0,0,1),this}compose(e,t,n){const r=this.elements,o=t._x,l=t._y,c=t._z,h=t._w,d=o+o,f=l+l,m=c+c,v=o*d,_=o*f,x=o*m,y=l*f,M=l*m,S=c*m,w=h*d,T=h*f,E=h*m,A=n.x,L=n.y,C=n.z;return r[0]=(1-(y+S))*A,r[1]=(_+E)*A,r[2]=(x-T)*A,r[3]=0,r[4]=(_-E)*L,r[5]=(1-(v+S))*L,r[6]=(M+w)*L,r[7]=0,r[8]=(x+T)*C,r[9]=(M-w)*C,r[10]=(1-(v+y))*C,r[11]=0,r[12]=e.x,r[13]=e.y,r[14]=e.z,r[15]=1,this}decompose(e,t,n){const r=this.elements;let o=gt.set(r[0],r[1],r[2]).length();const l=gt.set(r[4],r[5],r[6]).length(),c=gt.set(r[8],r[9],r[10]).length();this.determinant()<0&&(o=-o),e.x=r[12],e.y=r[13],e.z=r[14],vt.copy(this);const h=1/o,d=1/l,f=1/c;return vt.elements[0]*=h,vt.elements[1]*=h,vt.elements[2]*=h,vt.elements[4]*=d,vt.elements[5]*=d,vt.elements[6]*=d,vt.elements[8]*=f,vt.elements[9]*=f,vt.elements[10]*=f,t.setFromRotationMatrix(vt),n.x=o,n.y=l,n.z=c,this}makePerspective(e,t,n,r,o,l){void 0===l&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const c=this.elements,h=2*o/(t-e),d=2*o/(n-r),a=(t+e)/(t-e),b=(n+r)/(n-r),f=-(l+o)/(l-o),m=-2*l*o/(l-o);return c[0]=h,c[4]=0,c[8]=a,c[12]=0,c[1]=0,c[5]=d,c[9]=b,c[13]=0,c[2]=0,c[6]=0,c[10]=f,c[14]=m,c[3]=0,c[7]=0,c[11]=-1,c[15]=0,this}makeOrthographic(e,t,n,r,o,l){const c=this.elements,h=1/(t-e),d=1/(n-r),p=1/(l-o),f=(t+e)*h,m=(n+r)*d,v=(l+o)*p;return c[0]=2*h,c[4]=0,c[8]=0,c[12]=-f,c[1]=0,c[5]=2*d,c[9]=0,c[13]=-m,c[2]=0,c[6]=0,c[10]=-2*p,c[14]=-v,c[3]=0,c[7]=0,c[11]=0,c[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let i=0;i<16;i++)this.elements[i]=e[i+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const gt=new ze,vt=new mt,_t=new ze(0,0,0),xt=new ze(1,1,1),yt=new ze,Mt=new ze,bt=new ze,St=new mt,wt=new Oe;class Tt{constructor(e=0,t=0,n=0,r=Tt.DefaultOrder){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=r}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,r=this._order){return this._x=e,this._y=t,this._z=n,this._order=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const r=e.elements,o=r[0],l=r[4],c=r[8],h=r[1],d=r[5],f=r[9],m=r[2],v=r[6],_=r[10];switch(t){case"XYZ":this._y=Math.asin(ae(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-f,_),this._z=Math.atan2(-l,o)):(this._x=Math.atan2(v,d),this._z=0);break;case"YXZ":this._x=Math.asin(-ae(f,-1,1)),Math.abs(f)<.9999999?(this._y=Math.atan2(c,_),this._z=Math.atan2(h,d)):(this._y=Math.atan2(-m,o),this._z=0);break;case"ZXY":this._x=Math.asin(ae(v,-1,1)),Math.abs(v)<.9999999?(this._y=Math.atan2(-m,_),this._z=Math.atan2(-l,d)):(this._y=0,this._z=Math.atan2(h,o));break;case"ZYX":this._y=Math.asin(-ae(m,-1,1)),Math.abs(m)<.9999999?(this._x=Math.atan2(v,_),this._z=Math.atan2(h,o)):(this._x=0,this._z=Math.atan2(-l,d));break;case"YZX":this._z=Math.asin(ae(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(-f,d),this._y=Math.atan2(-m,o)):(this._x=0,this._y=Math.atan2(c,_));break;case"XZY":this._z=Math.asin(-ae(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(v,d),this._y=Math.atan2(c,o)):(this._x=Math.atan2(-f,_),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,!0===n&&this._onChangeCallback(),this}setFromQuaternion(q,e,t){return St.makeRotationFromQuaternion(q),this.setFromRotationMatrix(St,e,t)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return wt.setFromEuler(this),this.setFromQuaternion(wt,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}toVector3(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")}}Tt.DefaultOrder="XYZ",Tt.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class Et{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return 0!=(this.mask&e.mask)}isEnabled(e){return 0!=(this.mask&(1<<e|0))}}let At=0;const Lt=new ze,Ct=new Oe,Rt=new mt,Pt=new ze,Dt=new ze,It=new ze,Nt=new Oe,Ot=new ze(1,0,0),zt=new ze(0,1,0),Ut=new ze(0,0,1),Ft={type:"added"},Bt={type:"removed"};class kt extends ee{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:At++}),this.uuid=re(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=kt.DefaultUp.clone();const e=new ze,t=new Tt,n=new Oe,r=new ze(1,1,1);t._onChange((function(){n.setFromEuler(t,!1)})),n._onChange((function(){t.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new mt},normalMatrix:{value:new ue}}),this.matrix=new mt,this.matrixWorld=new mt,this.matrixAutoUpdate=kt.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new Et,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(q){return this.quaternion.premultiply(q),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(q){this.quaternion.copy(q)}rotateOnAxis(e,t){return Ct.setFromAxisAngle(e,t),this.quaternion.multiply(Ct),this}rotateOnWorldAxis(e,t){return Ct.setFromAxisAngle(e,t),this.quaternion.premultiply(Ct),this}rotateX(e){return this.rotateOnAxis(Ot,e)}rotateY(e){return this.rotateOnAxis(zt,e)}rotateZ(e){return this.rotateOnAxis(Ut,e)}translateOnAxis(e,t){return Lt.copy(e).applyQuaternion(this.quaternion),this.position.add(Lt.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(Ot,e)}translateY(e){return this.translateOnAxis(zt,e)}translateZ(e){return this.translateOnAxis(Ut,e)}localToWorld(e){return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return e.applyMatrix4(Rt.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?Pt.copy(e):Pt.set(e,t,n);const r=this.parent;this.updateWorldMatrix(!0,!1),Dt.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Rt.lookAt(Dt,Pt,this.up):Rt.lookAt(Pt,Dt,this.up),this.quaternion.setFromRotationMatrix(Rt),r&&(Rt.extractRotation(r.matrixWorld),Ct.setFromRotationMatrix(Rt),this.quaternion.premultiply(Ct.invert()))}add(object){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.add(arguments[i]);return this}return object===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",object),this):(object&&object.isObject3D?(null!==object.parent&&object.parent.remove(object),object.parent=this,this.children.push(object),object.dispatchEvent(Ft)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",object),this)}remove(object){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}const e=this.children.indexOf(object);return-1!==e&&(object.parent=null,this.children.splice(e,1),object.dispatchEvent(Bt)),this}removeFromParent(){const e=this.parent;return null!==e&&e.remove(this),this}clear(){for(let i=0;i<this.children.length;i++){const object=this.children[i];object.parent=null,object.dispatchEvent(Bt)}return this.children.length=0,this}attach(object){return this.updateWorldMatrix(!0,!1),Rt.copy(this.matrixWorld).invert(),null!==object.parent&&(object.parent.updateWorldMatrix(!0,!1),Rt.multiply(object.parent.matrixWorld)),object.applyMatrix4(Rt),this.add(object),object.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let i=0,n=this.children.length;i<n;i++){const object=this.children[i].getObjectByProperty(e,t);if(void 0!==object)return object}}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Dt,e,It),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Dt,Nt,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let i=0,n=t.length;i<n;i++)t[i].traverse(e)}traverseVisible(e){if(!1===this.visible)return;e(this);const t=this.children;for(let i=0,n=t.length;i<n;i++)t[i].traverseVisible(e)}traverseAncestors(e){const t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let i=0,n=t.length;i<n;i++)t[i].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(!0===e&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t){const e=this.children;for(let i=0,t=e.length;i<t;i++)e[i].updateWorldMatrix(!1,!0)}}toJSON(meta){const e=void 0===meta||"string"==typeof meta,output={};e&&(meta={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},output.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const object={};function t(e,element){return void 0===e[element.uuid]&&(e[element.uuid]=element.toJSON(meta)),element.uuid}if(object.uuid=this.uuid,object.type=this.type,""!==this.name&&(object.name=this.name),!0===this.castShadow&&(object.castShadow=!0),!0===this.receiveShadow&&(object.receiveShadow=!0),!1===this.visible&&(object.visible=!1),!1===this.frustumCulled&&(object.frustumCulled=!1),0!==this.renderOrder&&(object.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(object.userData=this.userData),object.layers=this.layers.mask,object.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(object.matrixAutoUpdate=!1),this.isInstancedMesh&&(object.type="InstancedMesh",object.count=this.count,object.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(object.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?object.background=this.background.toJSON():this.background.isTexture&&(object.background=this.background.toJSON(meta).uuid)),this.environment&&this.environment.isTexture&&(object.environment=this.environment.toJSON(meta).uuid);else if(this.isMesh||this.isLine||this.isPoints){object.geometry=t(meta.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const n=e.shapes;if(Array.isArray(n))for(let i=0,e=n.length;i<e;i++){const e=n[i];t(meta.shapes,e)}else t(meta.shapes,n)}}if(this.isSkinnedMesh&&(object.bindMode=this.bindMode,object.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(t(meta.skeletons,this.skeleton),object.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let i=0,n=this.material.length;i<n;i++)e.push(t(meta.materials,this.material[i]));object.material=e}else object.material=t(meta.materials,this.material);if(this.children.length>0){object.children=[];for(let i=0;i<this.children.length;i++)object.children.push(this.children[i].toJSON(meta).object)}if(this.animations.length>0){object.animations=[];for(let i=0;i<this.animations.length;i++){const e=this.animations[i];object.animations.push(t(meta.animations,e))}}if(e){const e=n(meta.geometries),t=n(meta.materials),r=n(meta.textures),o=n(meta.images),l=n(meta.shapes),c=n(meta.skeletons),h=n(meta.animations),d=n(meta.nodes);e.length>0&&(output.geometries=e),t.length>0&&(output.materials=t),r.length>0&&(output.textures=r),o.length>0&&(output.images=o),l.length>0&&(output.shapes=l),c.length>0&&(output.skeletons=c),h.length>0&&(output.animations=h),d.length>0&&(output.nodes=d)}return output.object=object,output;function n(e){const t=[];for(const n in e){const data=e[n];delete data.metadata,t.push(data)}return t}}clone(e){return(new this.constructor).copy(this,e)}copy(source,e=!0){if(this.name=source.name,this.up.copy(source.up),this.position.copy(source.position),this.rotation.order=source.rotation.order,this.quaternion.copy(source.quaternion),this.scale.copy(source.scale),this.matrix.copy(source.matrix),this.matrixWorld.copy(source.matrixWorld),this.matrixAutoUpdate=source.matrixAutoUpdate,this.matrixWorldNeedsUpdate=source.matrixWorldNeedsUpdate,this.layers.mask=source.layers.mask,this.visible=source.visible,this.castShadow=source.castShadow,this.receiveShadow=source.receiveShadow,this.frustumCulled=source.frustumCulled,this.renderOrder=source.renderOrder,this.userData=JSON.parse(JSON.stringify(source.userData)),!0===e)for(let i=0;i<source.children.length;i++){const e=source.children[i];this.add(e.clone())}return this}}kt.DefaultUp=new ze(0,1,0),kt.DefaultMatrixAutoUpdate=!0;const Vt=new ze,Ht=new ze,Gt=new ze,Wt=new ze,jt=new ze,qt=new ze,Xt=new ze,Yt=new ze,Zt=new ze,Kt=new ze;class Jt{constructor(a=new ze,b=new ze,e=new ze){this.a=a,this.b=b,this.c=e}static getNormal(a,b,e,t){t.subVectors(e,b),Vt.subVectors(a,b),t.cross(Vt);const n=t.lengthSq();return n>0?t.multiplyScalar(1/Math.sqrt(n)):t.set(0,0,0)}static getBarycoord(e,a,b,t,n){Vt.subVectors(t,a),Ht.subVectors(b,a),Gt.subVectors(e,a);const r=Vt.dot(Vt),o=Vt.dot(Ht),l=Vt.dot(Gt),c=Ht.dot(Ht),h=Ht.dot(Gt),d=r*c-o*o;if(0===d)return n.set(-2,-1,-1);const f=1/d,u=(c*l-o*h)*f,m=(r*h-o*l)*f;return n.set(1-u-m,m,u)}static containsPoint(e,a,b,t){return this.getBarycoord(e,a,b,t,Wt),Wt.x>=0&&Wt.y>=0&&Wt.x+Wt.y<=1}static getUV(e,t,n,r,o,l,c,h){return this.getBarycoord(e,t,n,r,Wt),h.set(0,0),h.addScaledVector(o,Wt.x),h.addScaledVector(l,Wt.y),h.addScaledVector(c,Wt.z),h}static isFrontFacing(a,b,e,t){return Vt.subVectors(e,b),Ht.subVectors(a,b),Vt.cross(Ht).dot(t)<0}set(a,b,e){return this.a.copy(a),this.b.copy(b),this.c.copy(e),this}setFromPointsAndIndices(e,t,n,r){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[r]),this}setFromAttributeAndIndices(e,t,n,r){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,r),this}clone(){return(new this.constructor).copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Vt.subVectors(this.c,this.b),Ht.subVectors(this.a,this.b),.5*Vt.cross(Ht).length()}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return Jt.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return Jt.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,r,o){return Jt.getUV(e,this.a,this.b,this.c,t,n,r,o)}containsPoint(e){return Jt.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return Jt.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(p,e){const a=this.a,b=this.b,t=this.c;let n,r;jt.subVectors(b,a),qt.subVectors(t,a),Yt.subVectors(p,a);const o=jt.dot(Yt),l=qt.dot(Yt);if(o<=0&&l<=0)return e.copy(a);Zt.subVectors(p,b);const c=jt.dot(Zt),h=qt.dot(Zt);if(c>=0&&h<=c)return e.copy(b);const d=o*h-c*l;if(d<=0&&o>=0&&c<=0)return n=o/(o-c),e.copy(a).addScaledVector(jt,n);Kt.subVectors(p,t);const f=jt.dot(Kt),m=qt.dot(Kt);if(m>=0&&f<=m)return e.copy(t);const v=f*l-o*m;if(v<=0&&l>=0&&m<=0)return r=l/(l-m),e.copy(a).addScaledVector(qt,r);const _=c*m-f*h;if(_<=0&&h-c>=0&&f-m>=0)return Xt.subVectors(t,b),r=(h-c)/(h-c+(f-m)),e.copy(b).addScaledVector(Xt,r);const x=1/(_+v+d);return n=v*x,r=d*x,e.copy(a).addScaledVector(jt,n).addScaledVector(qt,r)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let Qt=0;class $t extends ee{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:Qt++}),this.uuid=re(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=c,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=K,this.stencilZFail=K,this.stencilZPass=K,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(void 0!==e)for(const t in e){const n=e[t];if(void 0===n){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}if("shading"===t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===n;continue}const r=this[t];void 0!==r?r&&r.isColor?r.set(n):r&&r.isVector3&&n&&n.isVector3?r.copy(n):this[t]=n:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}}toJSON(meta){const e=void 0===meta||"string"==typeof meta;e&&(meta={textures:{},images:{}});const data={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function t(e){const t=[];for(const n in e){const data=e[n];delete data.metadata,t.push(data)}return t}if(data.uuid=this.uuid,data.type=this.type,""!==this.name&&(data.name=this.name),this.color&&this.color.isColor&&(data.color=this.color.getHex()),void 0!==this.roughness&&(data.roughness=this.roughness),void 0!==this.metalness&&(data.metalness=this.metalness),void 0!==this.sheen&&(data.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(data.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(data.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(data.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(data.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(data.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(data.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(data.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(data.shininess=this.shininess),void 0!==this.clearcoat&&(data.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(data.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(data.clearcoatMap=this.clearcoatMap.toJSON(meta).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(data.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(meta).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(data.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(meta).uuid,data.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.iridescence&&(data.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(data.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(data.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(data.iridescenceMap=this.iridescenceMap.toJSON(meta).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(data.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(meta).uuid),this.map&&this.map.isTexture&&(data.map=this.map.toJSON(meta).uuid),this.matcap&&this.matcap.isTexture&&(data.matcap=this.matcap.toJSON(meta).uuid),this.alphaMap&&this.alphaMap.isTexture&&(data.alphaMap=this.alphaMap.toJSON(meta).uuid),this.lightMap&&this.lightMap.isTexture&&(data.lightMap=this.lightMap.toJSON(meta).uuid,data.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(data.aoMap=this.aoMap.toJSON(meta).uuid,data.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(data.bumpMap=this.bumpMap.toJSON(meta).uuid,data.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(data.normalMap=this.normalMap.toJSON(meta).uuid,data.normalMapType=this.normalMapType,data.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(data.displacementMap=this.displacementMap.toJSON(meta).uuid,data.displacementScale=this.displacementScale,data.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(data.roughnessMap=this.roughnessMap.toJSON(meta).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(data.metalnessMap=this.metalnessMap.toJSON(meta).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(data.emissiveMap=this.emissiveMap.toJSON(meta).uuid),this.specularMap&&this.specularMap.isTexture&&(data.specularMap=this.specularMap.toJSON(meta).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(data.specularIntensityMap=this.specularIntensityMap.toJSON(meta).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(data.specularColorMap=this.specularColorMap.toJSON(meta).uuid),this.envMap&&this.envMap.isTexture&&(data.envMap=this.envMap.toJSON(meta).uuid,void 0!==this.combine&&(data.combine=this.combine)),void 0!==this.envMapIntensity&&(data.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(data.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(data.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(data.gradientMap=this.gradientMap.toJSON(meta).uuid),void 0!==this.transmission&&(data.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(data.transmissionMap=this.transmissionMap.toJSON(meta).uuid),void 0!==this.thickness&&(data.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(data.thicknessMap=this.thicknessMap.toJSON(meta).uuid),void 0!==this.attenuationDistance&&(data.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(data.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(data.size=this.size),null!==this.shadowSide&&(data.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(data.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(data.blending=this.blending),0!==this.side&&(data.side=this.side),this.vertexColors&&(data.vertexColors=!0),this.opacity<1&&(data.opacity=this.opacity),!0===this.transparent&&(data.transparent=this.transparent),data.depthFunc=this.depthFunc,data.depthTest=this.depthTest,data.depthWrite=this.depthWrite,data.colorWrite=this.colorWrite,data.stencilWrite=this.stencilWrite,data.stencilWriteMask=this.stencilWriteMask,data.stencilFunc=this.stencilFunc,data.stencilRef=this.stencilRef,data.stencilFuncMask=this.stencilFuncMask,data.stencilFail=this.stencilFail,data.stencilZFail=this.stencilZFail,data.stencilZPass=this.stencilZPass,void 0!==this.rotation&&0!==this.rotation&&(data.rotation=this.rotation),!0===this.polygonOffset&&(data.polygonOffset=!0),0!==this.polygonOffsetFactor&&(data.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(data.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(data.linewidth=this.linewidth),void 0!==this.dashSize&&(data.dashSize=this.dashSize),void 0!==this.gapSize&&(data.gapSize=this.gapSize),void 0!==this.scale&&(data.scale=this.scale),!0===this.dithering&&(data.dithering=!0),this.alphaTest>0&&(data.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(data.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(data.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(data.wireframe=this.wireframe),this.wireframeLinewidth>1&&(data.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(data.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(data.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(data.flatShading=this.flatShading),!1===this.visible&&(data.visible=!1),!1===this.toneMapped&&(data.toneMapped=!1),!1===this.fog&&(data.fog=!1),"{}"!==JSON.stringify(this.userData)&&(data.userData=this.userData),e){const e=t(meta.textures),n=t(meta.images);e.length>0&&(data.textures=e),n.length>0&&(data.images=n)}return data}clone(){return(new this.constructor).copy(this)}copy(source){this.name=source.name,this.blending=source.blending,this.side=source.side,this.vertexColors=source.vertexColors,this.opacity=source.opacity,this.transparent=source.transparent,this.blendSrc=source.blendSrc,this.blendDst=source.blendDst,this.blendEquation=source.blendEquation,this.blendSrcAlpha=source.blendSrcAlpha,this.blendDstAlpha=source.blendDstAlpha,this.blendEquationAlpha=source.blendEquationAlpha,this.depthFunc=source.depthFunc,this.depthTest=source.depthTest,this.depthWrite=source.depthWrite,this.stencilWriteMask=source.stencilWriteMask,this.stencilFunc=source.stencilFunc,this.stencilRef=source.stencilRef,this.stencilFuncMask=source.stencilFuncMask,this.stencilFail=source.stencilFail,this.stencilZFail=source.stencilZFail,this.stencilZPass=source.stencilZPass,this.stencilWrite=source.stencilWrite;const e=source.clippingPlanes;let t=null;if(null!==e){const n=e.length;t=new Array(n);for(let i=0;i!==n;++i)t[i]=e[i].clone()}return this.clippingPlanes=t,this.clipIntersection=source.clipIntersection,this.clipShadows=source.clipShadows,this.shadowSide=source.shadowSide,this.colorWrite=source.colorWrite,this.precision=source.precision,this.polygonOffset=source.polygonOffset,this.polygonOffsetFactor=source.polygonOffsetFactor,this.polygonOffsetUnits=source.polygonOffsetUnits,this.dithering=source.dithering,this.alphaTest=source.alphaTest,this.alphaToCoverage=source.alphaToCoverage,this.premultipliedAlpha=source.premultipliedAlpha,this.visible=source.visible,this.toneMapped=source.toneMapped,this.userData=JSON.parse(JSON.stringify(source.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){!0===e&&this.version++}get vertexTangents(){return console.warn("THREE."+this.type+": .vertexTangents has been removed."),!1}set vertexTangents(e){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}$t.fromType=function(){return null};class en extends $t{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new we(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.fog=source.fog,this}}const tn=new ze,nn=new he;class rn{constructor(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=!0===n,this.usage=J,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(e){!0===e&&this.version++}setUsage(e){return this.usage=e,this}copy(source){return this.name=source.name,this.array=new source.array.constructor(source.array),this.itemSize=source.itemSize,this.count=source.count,this.normalized=source.normalized,this.usage=source.usage,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}copyColorsArray(e){const t=this.array;let n=0;for(let i=0,r=e.length;i<r;i++){let r=e[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),r=new we),t[n++]=r.r,t[n++]=r.g,t[n++]=r.b}return this}copyVector2sArray(e){const t=this.array;let n=0;for(let i=0,r=e.length;i<r;i++){let r=e[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),r=new he),t[n++]=r.x,t[n++]=r.y}return this}copyVector3sArray(e){const t=this.array;let n=0;for(let i=0,r=e.length;i<r;i++){let r=e[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),r=new ze),t[n++]=r.x,t[n++]=r.y,t[n++]=r.z}return this}copyVector4sArray(e){const t=this.array;let n=0;for(let i=0,r=e.length;i<r;i++){let r=e[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),r=new Pe),t[n++]=r.x,t[n++]=r.y,t[n++]=r.z,t[n++]=r.w}return this}applyMatrix3(e){if(2===this.itemSize)for(let i=0,t=this.count;i<t;i++)nn.fromBufferAttribute(this,i),nn.applyMatrix3(e),this.setXY(i,nn.x,nn.y);else if(3===this.itemSize)for(let i=0,t=this.count;i<t;i++)tn.fromBufferAttribute(this,i),tn.applyMatrix3(e),this.setXYZ(i,tn.x,tn.y,tn.z);return this}applyMatrix4(e){for(let i=0,t=this.count;i<t;i++)tn.fromBufferAttribute(this,i),tn.applyMatrix4(e),this.setXYZ(i,tn.x,tn.y,tn.z);return this}applyNormalMatrix(e){for(let i=0,t=this.count;i<t;i++)tn.fromBufferAttribute(this,i),tn.applyNormalMatrix(e),this.setXYZ(i,tn.x,tn.y,tn.z);return this}transformDirection(e){for(let i=0,t=this.count;i<t;i++)tn.fromBufferAttribute(this,i),tn.transformDirection(e),this.setXYZ(i,tn.x,tn.y,tn.z);return this}set(e,t=0){return this.array.set(e,t),this}getX(e){return this.array[e*this.itemSize]}setX(e,t){return this.array[e*this.itemSize]=t,this}getY(e){return this.array[e*this.itemSize+1]}setY(e,t){return this.array[e*this.itemSize+1]=t,this}getZ(e){return this.array[e*this.itemSize+2]}setZ(e,t){return this.array[e*this.itemSize+2]=t,this}getW(e){return this.array[e*this.itemSize+3]}setW(e,t){return this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,r){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=r,this}setXYZW(e,t,n,r,o){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=r,this.array[e+3]=o,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const data={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(data.name=this.name),this.usage!==J&&(data.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(data.updateRange=this.updateRange),data}}class an extends rn{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class sn extends rn{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class on extends rn{constructor(e,t,n){super(new Float32Array(e),t,n)}}let ln=0;const cn=new mt,hn=new kt,un=new ze,dn=new Be,pn=new Be,fn=new ze;class mn extends ee{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:ln++}),this.uuid=re(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(de(e)?sn:an)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return void 0!==this.attributes[e]}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;void 0!==t&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const t=(new ue).getNormalMatrix(e);n.applyNormalMatrix(t),n.needsUpdate=!0}const r=this.attributes.tangent;return void 0!==r&&(r.transformDirection(e),r.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(q){return cn.makeRotationFromQuaternion(q),this.applyMatrix4(cn),this}rotateX(e){return cn.makeRotationX(e),this.applyMatrix4(cn),this}rotateY(e){return cn.makeRotationY(e),this.applyMatrix4(cn),this}rotateZ(e){return cn.makeRotationZ(e),this.applyMatrix4(cn),this}translate(e,t,n){return cn.makeTranslation(e,t,n),this.applyMatrix4(cn),this}scale(e,t,n){return cn.makeScale(e,t,n),this.applyMatrix4(cn),this}lookAt(e){return hn.lookAt(e),hn.updateMatrix(),this.applyMatrix4(hn.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(un).negate(),this.translate(un.x,un.y,un.z),this}setFromPoints(e){const t=[];for(let i=0,n=e.length;i<n;i++){const n=e[i];t.push(n.x,n.y,n.z||0)}return this.setAttribute("position",new on(t,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Be);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new ze(-1/0,-1/0,-1/0),new ze(1/0,1/0,1/0));if(void 0!==e){if(this.boundingBox.setFromBufferAttribute(e),t)for(let i=0,e=t.length;i<e;i++){const e=t[i];dn.setFromBufferAttribute(e),this.morphTargetsRelative?(fn.addVectors(this.boundingBox.min,dn.min),this.boundingBox.expandByPoint(fn),fn.addVectors(this.boundingBox.max,dn.max),this.boundingBox.expandByPoint(fn)):(this.boundingBox.expandByPoint(dn.min),this.boundingBox.expandByPoint(dn.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new at);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new ze,1/0);if(e){const n=this.boundingSphere.center;if(dn.setFromBufferAttribute(e),t)for(let i=0,e=t.length;i<e;i++){const e=t[i];pn.setFromBufferAttribute(e),this.morphTargetsRelative?(fn.addVectors(dn.min,pn.min),dn.expandByPoint(fn),fn.addVectors(dn.max,pn.max),dn.expandByPoint(fn)):(dn.expandByPoint(pn.min),dn.expandByPoint(pn.max))}dn.getCenter(n);let r=0;for(let i=0,t=e.count;i<t;i++)fn.fromBufferAttribute(e,i),r=Math.max(r,n.distanceToSquared(fn));if(t)for(let i=0,o=t.length;i<o;i++){const o=t[i],l=this.morphTargetsRelative;for(let t=0,c=o.count;t<c;t++)fn.fromBufferAttribute(o,t),l&&(un.fromBufferAttribute(e,t),fn.add(un)),r=Math.max(r,n.distanceToSquared(fn))}this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(null===e||void 0===t.position||void 0===t.normal||void 0===t.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const n=e.array,r=t.position.array,o=t.normal.array,l=t.uv.array,c=r.length/3;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new rn(new Float32Array(4*c),4));const h=this.getAttribute("tangent").array,d=[],f=[];for(let i=0;i<c;i++)d[i]=new ze,f[i]=new ze;const m=new ze,v=new ze,_=new ze,x=new he,y=new he,M=new he,S=new ze,w=new ze;function T(a,b,e){m.fromArray(r,3*a),v.fromArray(r,3*b),_.fromArray(r,3*e),x.fromArray(l,2*a),y.fromArray(l,2*b),M.fromArray(l,2*e),v.sub(m),_.sub(m),y.sub(x),M.sub(x);const t=1/(y.x*M.y-M.x*y.y);isFinite(t)&&(S.copy(v).multiplyScalar(M.y).addScaledVector(_,-y.y).multiplyScalar(t),w.copy(_).multiplyScalar(y.x).addScaledVector(v,-M.x).multiplyScalar(t),d[a].add(S),d[b].add(S),d[e].add(S),f[a].add(w),f[b].add(w),f[e].add(w))}let E=this.groups;0===E.length&&(E=[{start:0,count:n.length}]);for(let i=0,e=E.length;i<e;++i){const e=E[i],t=e.start;for(let r=t,o=t+e.count;r<o;r+=3)T(n[r+0],n[r+1],n[r+2])}const A=new ze,L=new ze,C=new ze,R=new ze;function P(e){C.fromArray(o,3*e),R.copy(C);const t=d[e];A.copy(t),A.sub(C.multiplyScalar(C.dot(t))).normalize(),L.crossVectors(R,t);const n=L.dot(f[e])<0?-1:1;h[4*e]=A.x,h[4*e+1]=A.y,h[4*e+2]=A.z,h[4*e+3]=n}for(let i=0,e=E.length;i<e;++i){const e=E[i],t=e.start;for(let r=t,o=t+e.count;r<o;r+=3)P(n[r+0]),P(n[r+1]),P(n[r+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(void 0!==t){let n=this.getAttribute("normal");if(void 0===n)n=new rn(new Float32Array(3*t.count),3),this.setAttribute("normal",n);else for(let i=0,e=n.count;i<e;i++)n.setXYZ(i,0,0,0);const r=new ze,o=new ze,l=new ze,c=new ze,h=new ze,d=new ze,f=new ze,m=new ze;if(e)for(let i=0,v=e.count;i<v;i+=3){const v=e.getX(i+0),_=e.getX(i+1),x=e.getX(i+2);r.fromBufferAttribute(t,v),o.fromBufferAttribute(t,_),l.fromBufferAttribute(t,x),f.subVectors(l,o),m.subVectors(r,o),f.cross(m),c.fromBufferAttribute(n,v),h.fromBufferAttribute(n,_),d.fromBufferAttribute(n,x),c.add(f),h.add(f),d.add(f),n.setXYZ(v,c.x,c.y,c.z),n.setXYZ(_,h.x,h.y,h.z),n.setXYZ(x,d.x,d.y,d.z)}else for(let i=0,e=t.count;i<e;i+=3)r.fromBufferAttribute(t,i+0),o.fromBufferAttribute(t,i+1),l.fromBufferAttribute(t,i+2),f.subVectors(l,o),m.subVectors(r,o),f.cross(m),n.setXYZ(i+0,f.x,f.y,f.z),n.setXYZ(i+1,f.x,f.y,f.z),n.setXYZ(i+2,f.x,f.y,f.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(e,t){if(!e||!e.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e);void 0===t&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const n=this.attributes;for(const r in n){if(void 0===e.attributes[r])continue;const o=n[r].array,l=e.attributes[r],c=l.array,h=l.itemSize*t,d=Math.min(c.length,o.length-h);for(let i=0,e=h;i<d;i++,e++)o[e]=c[i]}return this}normalizeNormals(){const e=this.attributes.normal;for(let i=0,t=e.count;i<t;i++)fn.fromBufferAttribute(e,i),fn.normalize(),e.setXYZ(i,fn.x,fn.y,fn.z)}toNonIndexed(){function e(e,t){const n=e.array,r=e.itemSize,o=e.normalized,l=new n.constructor(t.length*r);let c=0,h=0;for(let i=0,o=t.length;i<o;i++){c=e.isInterleavedBufferAttribute?t[i]*e.data.stride+e.offset:t[i]*r;for(let e=0;e<r;e++)l[h++]=n[c++]}return new rn(l,r,o)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new mn,n=this.index.array,r=this.attributes;for(const o in r){const l=e(r[o],n);t.setAttribute(o,l)}const o=this.morphAttributes;for(const r in o){const l=[],c=o[r];for(let i=0,t=c.length;i<t;i++){const t=e(c[i],n);l.push(t)}t.morphAttributes[r]=l}t.morphTargetsRelative=this.morphTargetsRelative;const l=this.groups;for(let i=0,e=l.length;i<e;i++){const e=l[i];t.addGroup(e.start,e.count,e.materialIndex)}return t}toJSON(){const data={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(data.uuid=this.uuid,data.type=this.type,""!==this.name&&(data.name=this.name),Object.keys(this.userData).length>0&&(data.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const t in e)void 0!==e[t]&&(data[t]=e[t]);return data}data.data={attributes:{}};const e=this.index;null!==e&&(data.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const t=this.attributes;for(const e in t){const n=t[e];data.data.attributes[e]=n.toJSON(data.data)}const n={};let r=!1;for(const e in this.morphAttributes){const t=this.morphAttributes[e],o=[];for(let i=0,e=t.length;i<e;i++){const e=t[i];o.push(e.toJSON(data.data))}o.length>0&&(n[e]=o,r=!0)}r&&(data.data.morphAttributes=n,data.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(data.data.groups=JSON.parse(JSON.stringify(o)));const l=this.boundingSphere;return null!==l&&(data.data.boundingSphere={center:l.center.toArray(),radius:l.radius}),data}clone(){return(new this.constructor).copy(this)}copy(source){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const data={};this.name=source.name;const e=source.index;null!==e&&this.setIndex(e.clone(data));const t=source.attributes;for(const e in t){const n=t[e];this.setAttribute(e,n.clone(data))}const n=source.morphAttributes;for(const e in n){const t=[],r=n[e];for(let i=0,e=r.length;i<e;i++)t.push(r[i].clone(data));this.morphAttributes[e]=t}this.morphTargetsRelative=source.morphTargetsRelative;const r=source.groups;for(let i=0,e=r.length;i<e;i++){const e=r[i];this.addGroup(e.start,e.count,e.materialIndex)}const o=source.boundingBox;null!==o&&(this.boundingBox=o.clone());const l=source.boundingSphere;return null!==l&&(this.boundingSphere=l.clone()),this.drawRange.start=source.drawRange.start,this.drawRange.count=source.drawRange.count,this.userData=source.userData,void 0!==source.parameters&&(this.parameters=Object.assign({},source.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}const gn=new mt,vn=new ft,_n=new at,xn=new ze,yn=new ze,Mn=new ze,bn=new ze,Sn=new ze,wn=new ze,Tn=new ze,En=new ze,An=new ze,Ln=new he,Cn=new he,Rn=new he,Pn=new ze,Dn=new ze;class In extends kt{constructor(e=new mn,t=new en){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(source,e){return super.copy(source,e),void 0!==source.morphTargetInfluences&&(this.morphTargetInfluences=source.morphTargetInfluences.slice()),void 0!==source.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},source.morphTargetDictionary)),this.material=source.material,this.geometry=source.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,t=Object.keys(e);if(t.length>0){const n=e[t[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=n.length;e<t;e++){const t=n[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[t]=e}}}}raycast(e,t){const n=this.geometry,r=this.material,o=this.matrixWorld;if(void 0===r)return;if(null===n.boundingSphere&&n.computeBoundingSphere(),_n.copy(n.boundingSphere),_n.applyMatrix4(o),!1===e.ray.intersectsSphere(_n))return;if(gn.copy(o).invert(),vn.copy(e.ray).applyMatrix4(gn),null!==n.boundingBox&&!1===vn.intersectsBox(n.boundingBox))return;let l;const c=n.index,h=n.attributes.position,d=n.morphAttributes.position,f=n.morphTargetsRelative,m=n.attributes.uv,v=n.attributes.uv2,_=n.groups,x=n.drawRange;if(null!==c)if(Array.isArray(r))for(let i=0,n=_.length;i<n;i++){const n=_[i],o=r[n.materialIndex];for(let r=Math.max(n.start,x.start),_=Math.min(c.count,Math.min(n.start+n.count,x.start+x.count));r<_;r+=3){const a=c.getX(r),b=c.getX(r+1),_=c.getX(r+2);l=Nn(this,o,e,vn,h,d,f,m,v,a,b,_),l&&(l.faceIndex=Math.floor(r/3),l.face.materialIndex=n.materialIndex,t.push(l))}}else{for(let i=Math.max(0,x.start),n=Math.min(c.count,x.start+x.count);i<n;i+=3){const a=c.getX(i),b=c.getX(i+1),n=c.getX(i+2);l=Nn(this,r,e,vn,h,d,f,m,v,a,b,n),l&&(l.faceIndex=Math.floor(i/3),t.push(l))}}else if(void 0!==h)if(Array.isArray(r))for(let i=0,n=_.length;i<n;i++){const n=_[i],o=r[n.materialIndex];for(let r=Math.max(n.start,x.start),c=Math.min(h.count,Math.min(n.start+n.count,x.start+x.count));r<c;r+=3){l=Nn(this,o,e,vn,h,d,f,m,v,r,r+1,r+2),l&&(l.faceIndex=Math.floor(r/3),l.face.materialIndex=n.materialIndex,t.push(l))}}else{for(let i=Math.max(0,x.start),n=Math.min(h.count,x.start+x.count);i<n;i+=3){l=Nn(this,r,e,vn,h,d,f,m,v,i,i+1,i+2),l&&(l.faceIndex=Math.floor(i/3),t.push(l))}}}}function Nn(object,e,t,n,r,o,l,c,h,a,b,d){xn.fromBufferAttribute(r,a),yn.fromBufferAttribute(r,b),Mn.fromBufferAttribute(r,d);const f=object.morphTargetInfluences;if(o&&f){Tn.set(0,0,0),En.set(0,0,0),An.set(0,0,0);for(let i=0,e=o.length;i<e;i++){const e=f[i],t=o[i];0!==e&&(bn.fromBufferAttribute(t,a),Sn.fromBufferAttribute(t,b),wn.fromBufferAttribute(t,d),l?(Tn.addScaledVector(bn,e),En.addScaledVector(Sn,e),An.addScaledVector(wn,e)):(Tn.addScaledVector(bn.sub(xn),e),En.addScaledVector(Sn.sub(yn),e),An.addScaledVector(wn.sub(Mn),e)))}xn.add(Tn),yn.add(En),Mn.add(An)}object.isSkinnedMesh&&(object.boneTransform(a,xn),object.boneTransform(b,yn),object.boneTransform(d,Mn));const m=function(object,e,t,n,r,o,l,c){let h;if(h=1===e.side?n.intersectTriangle(l,o,r,!0,c):n.intersectTriangle(r,o,l,2!==e.side,c),null===h)return null;Dn.copy(c),Dn.applyMatrix4(object.matrixWorld);const d=t.ray.origin.distanceTo(Dn);return d<t.near||d>t.far?null:{distance:d,point:Dn.clone(),object:object}}(object,e,t,n,xn,yn,Mn,Pn);if(m){c&&(Ln.fromBufferAttribute(c,a),Cn.fromBufferAttribute(c,b),Rn.fromBufferAttribute(c,d),m.uv=Jt.getUV(Pn,xn,yn,Mn,Ln,Cn,Rn,new he)),h&&(Ln.fromBufferAttribute(h,a),Cn.fromBufferAttribute(h,b),Rn.fromBufferAttribute(h,d),m.uv2=Jt.getUV(Pn,xn,yn,Mn,Ln,Cn,Rn,new he));const e={a:a,b:b,c:d,normal:new ze,materialIndex:0};Jt.getNormal(xn,yn,Mn,e.normal),m.face=e}return m}class On extends mn{constructor(e=1,t=1,n=1,r=1,o=1,l=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:r,heightSegments:o,depthSegments:l};const c=this;r=Math.floor(r),o=Math.floor(o),l=Math.floor(l);const h=[],d=[],f=[],m=[];let v=0,_=0;function x(u,e,t,n,r,o,l,x,y,M,S){const w=o/y,T=l/M,E=o/2,A=l/2,L=x/2,C=y+1,R=M+1;let P=0,D=0;const I=new ze;for(let o=0;o<R;o++){const l=o*T-A;for(let c=0;c<C;c++){const h=c*w-E;I[u]=h*n,I[e]=l*r,I[t]=L,d.push(I.x,I.y,I.z),I[u]=0,I[e]=0,I[t]=x>0?1:-1,f.push(I.x,I.y,I.z),m.push(c/y),m.push(1-o/M),P+=1}}for(let e=0;e<M;e++)for(let t=0;t<y;t++){const a=v+t+C*e,b=v+t+C*(e+1),n=v+(t+1)+C*(e+1),r=v+(t+1)+C*e;h.push(a,b,r),h.push(b,n,r),D+=6}c.addGroup(_,D,S),_+=D,v+=P}x("z","y","x",-1,-1,n,t,e,l,o,0),x("z","y","x",1,-1,n,t,-e,l,o,1),x("x","z","y",1,1,e,n,t,r,l,2),x("x","z","y",1,-1,e,n,-t,r,l,3),x("x","y","z",1,-1,e,t,n,r,o,4),x("x","y","z",-1,-1,e,t,-n,r,o,5),this.setIndex(h),this.setAttribute("position",new on(d,3)),this.setAttribute("normal",new on(f,3)),this.setAttribute("uv",new on(m,2))}static fromJSON(data){return new On(data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments)}}function zn(e){const t={};for(const u in e){t[u]={};for(const p in e[u]){const n=e[u][p];n&&(n.isColor||n.isMatrix3||n.isMatrix4||n.isVector2||n.isVector3||n.isVector4||n.isTexture||n.isQuaternion)?t[u][p]=n.clone():Array.isArray(n)?t[u][p]=n.slice():t[u][p]=n}}return t}function Un(e){const t={};for(let u=0;u<e.length;u++){const n=zn(e[u]);for(const p in n)t[p]=n[p]}return t}const Fn={clone:zn,merge:Un};class Bn extends $t{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==e&&(void 0!==e.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}copy(source){return super.copy(source),this.fragmentShader=source.fragmentShader,this.vertexShader=source.vertexShader,this.uniforms=zn(source.uniforms),this.defines=Object.assign({},source.defines),this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.fog=source.fog,this.lights=source.lights,this.clipping=source.clipping,this.extensions=Object.assign({},source.extensions),this.glslVersion=source.glslVersion,this}toJSON(meta){const data=super.toJSON(meta);data.glslVersion=this.glslVersion,data.uniforms={};for(const e in this.uniforms){const t=this.uniforms[e].value;t&&t.isTexture?data.uniforms[e]={type:"t",value:t.toJSON(meta).uuid}:t&&t.isColor?data.uniforms[e]={type:"c",value:t.getHex()}:t&&t.isVector2?data.uniforms[e]={type:"v2",value:t.toArray()}:t&&t.isVector3?data.uniforms[e]={type:"v3",value:t.toArray()}:t&&t.isVector4?data.uniforms[e]={type:"v4",value:t.toArray()}:t&&t.isMatrix3?data.uniforms[e]={type:"m3",value:t.toArray()}:t&&t.isMatrix4?data.uniforms[e]={type:"m4",value:t.toArray()}:data.uniforms[e]={value:t}}Object.keys(this.defines).length>0&&(data.defines=this.defines),data.vertexShader=this.vertexShader,data.fragmentShader=this.fragmentShader;const e={};for(const t in this.extensions)!0===this.extensions[t]&&(e[t]=!0);return Object.keys(e).length>0&&(data.extensions=e),data}}class kn extends kt{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new mt,this.projectionMatrix=new mt,this.projectionMatrixInverse=new mt}copy(source,e){return super.copy(source,e),this.matrixWorldInverse.copy(source.matrixWorldInverse),this.projectionMatrix.copy(source.projectionMatrix),this.projectionMatrixInverse.copy(source.projectionMatrixInverse),this}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}class Vn extends kn{constructor(e=50,t=1,n=.1,r=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=r,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(source,e){return super.copy(source,e),this.fov=source.fov,this.zoom=source.zoom,this.near=source.near,this.far=source.far,this.focus=source.focus,this.aspect=source.aspect,this.view=null===source.view?null:Object.assign({},source.view),this.filmGauge=source.filmGauge,this.filmOffset=source.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=2*ie*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(.5*ne*this.fov);return.5*this.getFilmHeight()/e}getEffectiveFOV(){return 2*ie*Math.atan(Math.tan(.5*ne*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,r,o,l){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=r,this.view.width=o,this.view.height=l,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(.5*ne*this.fov)/this.zoom,n=2*t,r=this.aspect*n,o=-.5*r;const view=this.view;if(null!==this.view&&this.view.enabled){const e=view.fullWidth,l=view.fullHeight;o+=view.offsetX*r/e,t-=view.offsetY*n/l,r*=view.width/e,n*=view.height/l}const l=this.filmOffset;0!==l&&(o+=e*l/this.getFilmWidth()),this.projectionMatrix.makePerspective(o,o+r,t,t-n,e,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(meta){const data=super.toJSON(meta);return data.object.fov=this.fov,data.object.zoom=this.zoom,data.object.near=this.near,data.object.far=this.far,data.object.focus=this.focus,data.object.aspect=this.aspect,null!==this.view&&(data.object.view=Object.assign({},this.view)),data.object.filmGauge=this.filmGauge,data.object.filmOffset=this.filmOffset,data}}const Hn=90;class Gn extends kt{constructor(e,t,n){if(super(),this.type="CubeCamera",!0!==n.isWebGLCubeRenderTarget)return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");this.renderTarget=n;const r=new Vn(Hn,1,e,t);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new ze(1,0,0)),this.add(r);const o=new Vn(Hn,1,e,t);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new ze(-1,0,0)),this.add(o);const l=new Vn(Hn,1,e,t);l.layers=this.layers,l.up.set(0,0,1),l.lookAt(new ze(0,1,0)),this.add(l);const c=new Vn(Hn,1,e,t);c.layers=this.layers,c.up.set(0,0,-1),c.lookAt(new ze(0,-1,0)),this.add(c);const h=new Vn(Hn,1,e,t);h.layers=this.layers,h.up.set(0,-1,0),h.lookAt(new ze(0,0,1)),this.add(h);const d=new Vn(Hn,1,e,t);d.layers=this.layers,d.up.set(0,-1,0),d.lookAt(new ze(0,0,-1)),this.add(d)}update(e,t){null===this.parent&&this.updateMatrixWorld();const n=this.renderTarget,[r,o,l,c,h,d]=this.children,f=e.getRenderTarget(),m=e.toneMapping,v=e.xr.enabled;e.toneMapping=0,e.xr.enabled=!1;const _=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0),e.render(t,r),e.setRenderTarget(n,1),e.render(t,o),e.setRenderTarget(n,2),e.render(t,l),e.setRenderTarget(n,3),e.render(t,c),e.setRenderTarget(n,4),e.render(t,h),n.texture.generateMipmaps=_,e.setRenderTarget(n,5),e.render(t,d),e.setRenderTarget(f),e.toneMapping=m,e.xr.enabled=v,n.texture.needsPMREMUpdate=!0}}class Wn extends Re{constructor(e,t,n,r,o,l,c,d,f,m){super(e=void 0!==e?e:[],t=void 0!==t?t:h,n,r,o,l,c,d,f,m),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class jn extends De{constructor(e,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const image={width:e,height:e,depth:1},n=[image,image,image,image,image,image];this.texture=new Wn(n,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==t.generateMipmaps&&t.generateMipmaps,this.texture.minFilter=void 0!==t.minFilter?t.minFilter:T}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"},r=new On(5,5,5),o=new Bn({name:"CubemapFromEquirect",uniforms:zn(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:1,blending:0});o.uniforms.tEquirect.value=t;const l=new In(r,o),c=t.minFilter;t.minFilter===E&&(t.minFilter=T);return new Gn(1,10,this).update(e,l),t.minFilter=c,l.geometry.dispose(),l.material.dispose(),this}clear(e,t,n,r){const o=e.getRenderTarget();for(let i=0;i<6;i++)e.setRenderTarget(this,i),e.clear(t,n,r);e.setRenderTarget(o)}}const qn=new ze,Xn=new ze,Yn=new ue;class Zn{constructor(e=new ze(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,r){return this.normal.set(e,t,n),this.constant=r,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(a,b,e){const t=qn.subVectors(e,b).cross(Xn.subVectors(a,b)).normalize();return this.setFromNormalAndCoplanarPoint(t,a),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)}intersectLine(line,e){const t=line.delta(qn),n=this.normal.dot(t);if(0===n)return 0===this.distanceToPoint(line.start)?e.copy(line.start):null;const r=-(line.start.dot(this.normal)+this.constant)/n;return r<0||r>1?null:e.copy(t).multiplyScalar(r).add(line.start)}intersectsLine(line){const e=this.distanceToPoint(line.start),t=this.distanceToPoint(line.end);return e<0&&t>0||t<0&&e>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||Yn.getNormalMatrix(e),r=this.coplanarPoint(qn).applyMatrix4(e),o=this.normal.applyMatrix3(n).normalize();return this.constant=-r.dot(o),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const Kn=new at,Jn=new ze;class Qn{constructor(e=new Zn,t=new Zn,n=new Zn,r=new Zn,o=new Zn,l=new Zn){this.planes=[e,t,n,r,o,l]}set(e,t,n,r,o,l){const c=this.planes;return c[0].copy(e),c[1].copy(t),c[2].copy(n),c[3].copy(r),c[4].copy(o),c[5].copy(l),this}copy(e){const t=this.planes;for(let i=0;i<6;i++)t[i].copy(e.planes[i]);return this}setFromProjectionMatrix(e){const t=this.planes,n=e.elements,r=n[0],o=n[1],l=n[2],c=n[3],h=n[4],d=n[5],f=n[6],m=n[7],v=n[8],_=n[9],x=n[10],y=n[11],M=n[12],S=n[13],w=n[14],T=n[15];return t[0].setComponents(c-r,m-h,y-v,T-M).normalize(),t[1].setComponents(c+r,m+h,y+v,T+M).normalize(),t[2].setComponents(c+o,m+d,y+_,T+S).normalize(),t[3].setComponents(c-o,m-d,y-_,T-S).normalize(),t[4].setComponents(c-l,m-f,y-x,T-w).normalize(),t[5].setComponents(c+l,m+f,y+x,T+w).normalize(),this}intersectsObject(object){const e=object.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),Kn.copy(e.boundingSphere).applyMatrix4(object.matrixWorld),this.intersectsSphere(Kn)}intersectsSprite(e){return Kn.center.set(0,0,0),Kn.radius=.7071067811865476,Kn.applyMatrix4(e.matrixWorld),this.intersectsSphere(Kn)}intersectsSphere(e){const t=this.planes,n=e.center,r=-e.radius;for(let i=0;i<6;i++){if(t[i].distanceToPoint(n)<r)return!1}return!0}intersectsBox(e){const t=this.planes;for(let i=0;i<6;i++){const n=t[i];if(Jn.x=n.normal.x>0?e.max.x:e.min.x,Jn.y=n.normal.y>0?e.max.y:e.min.y,Jn.z=n.normal.z>0?e.max.z:e.min.z,n.distanceToPoint(Jn)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let i=0;i<6;i++)if(t[i].distanceToPoint(e)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function $n(){let e=null,t=!1,n=null,r=null;function o(time,t){n(time,t),r=e.requestAnimationFrame(o)}return{start:function(){!0!==t&&null!==n&&(r=e.requestAnimationFrame(o),t=!0)},stop:function(){e.cancelAnimationFrame(r),t=!1},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function ei(e,t){const n=t.isWebGL2,r=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),r.get(e)},remove:function(t){t.isInterleavedBufferAttribute&&(t=t.data);const data=r.get(t);data&&(e.deleteBuffer(data.buffer),r.delete(t))},update:function(t,o){if(t.isGLBufferAttribute){const e=r.get(t);return void((!e||e.version<t.version)&&r.set(t,{buffer:t.buffer,type:t.type,bytesPerElement:t.elementSize,version:t.version}))}t.isInterleavedBufferAttribute&&(t=t.data);const data=r.get(t);void 0===data?r.set(t,function(t,r){const o=t.array,l=t.usage,c=e.createBuffer();let h;if(e.bindBuffer(r,c),e.bufferData(r,o,l),t.onUploadCallback(),o instanceof Float32Array)h=5126;else if(o instanceof Uint16Array)if(t.isFloat16BufferAttribute){if(!n)throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");h=5131}else h=5123;else if(o instanceof Int16Array)h=5122;else if(o instanceof Uint32Array)h=5125;else if(o instanceof Int32Array)h=5124;else if(o instanceof Int8Array)h=5120;else if(o instanceof Uint8Array)h=5121;else{if(!(o instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+o);h=5121}return{buffer:c,type:h,bytesPerElement:o.BYTES_PER_ELEMENT,version:t.version}}(t,o)):data.version<t.version&&(!function(t,r,o){const l=r.array,c=r.updateRange;e.bindBuffer(o,t),-1===c.count?e.bufferSubData(o,0,l):(n?e.bufferSubData(o,c.offset*l.BYTES_PER_ELEMENT,l,c.offset,c.count):e.bufferSubData(o,c.offset*l.BYTES_PER_ELEMENT,l.subarray(c.offset,c.offset+c.count)),c.count=-1)}(data.buffer,t,o),data.version=t.version)}}}class ti extends mn{constructor(e=1,t=1,n=1,r=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:r};const o=e/2,l=t/2,c=Math.floor(n),h=Math.floor(r),d=c+1,f=h+1,m=e/c,v=t/h,_=[],x=[],y=[],M=[];for(let e=0;e<f;e++){const t=e*v-l;for(let n=0;n<d;n++){const r=n*m-o;x.push(r,-t,0),y.push(0,0,1),M.push(n/c),M.push(1-e/h)}}for(let e=0;e<h;e++)for(let t=0;t<c;t++){const a=t+d*e,b=t+d*(e+1),n=t+1+d*(e+1),r=t+1+d*e;_.push(a,b,r),_.push(b,n,r)}this.setIndex(_),this.setAttribute("position",new on(x,3)),this.setAttribute("normal",new on(y,3)),this.setAttribute("uv",new on(M,2))}static fromJSON(data){return new ti(data.width,data.height,data.widthSegments,data.heightSegments)}}const ni={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#ifdef USE_IRIDESCENCE\nvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = mix(F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence);\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#endif\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",iridescence_fragment:"#ifdef USE_IRIDESCENCE\nconst mat3 XYZ_TO_REC709 = mat3(\n    3.2404542, -0.9692660,  0.0556434,\n   -1.5371385,  1.8760108, -0.2040259,\n   -0.4985314,  0.0415560,  1.0572252\n);\nvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n   vec3 sqrtF0 = sqrt( fresnel0 );\n   return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n}\nvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n   return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n}\nfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n   return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n}\nvec3 evalSensitivity( float OPD, vec3 shift ) {\n   float phase = 2.0 * PI * OPD * 1.0e-9;\n   vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n   vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n   vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n   vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( -pow2( phase ) * var );\n   xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[0] ) * exp( -4.5282e+09 * pow2( phase ) );\n   xyz /= 1.0685e-7;\n   vec3 srgb = XYZ_TO_REC709 * xyz;\n   return srgb;\n}\nvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n   vec3 I;\n   float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n   float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n   float cosTheta2Sq = 1.0 - sinTheta2Sq;\n   if ( cosTheta2Sq < 0.0 ) {\n       return vec3( 1.0 );\n   }\n   float cosTheta2 = sqrt( cosTheta2Sq );\n   float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n   float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n   float R21 = R12;\n   float T121 = 1.0 - R12;\n   float phi12 = 0.0;\n   if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n   float phi21 = PI - phi12;\n   vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );   vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n   vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n   vec3 phi23 = vec3( 0.0 );\n   if ( baseIOR[0] < iridescenceIOR ) phi23[0] = PI;\n   if ( baseIOR[1] < iridescenceIOR ) phi23[1] = PI;\n   if ( baseIOR[2] < iridescenceIOR ) phi23[2] = PI;\n   float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n   vec3 phi = vec3( phi21 ) + phi23;\n   vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n   vec3 r123 = sqrt( R123 );\n   vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n   vec3 C0 = R12 + Rs;\n   I = C0;\n   vec3 Cm = Rs - T121;\n   for ( int m = 1; m <= 2; ++m ) {\n       Cm *= r123;\n       vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n       I += Cm * Sm;\n   }\n   return max( I, vec3( 0.0 ) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\n\t#else\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\nfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\nif ( material.iridescenceThickness == 0.0 ) {\n\tmaterial.iridescence = 0.0;\n} else {\n\tmaterial.iridescence = saturate( material.iridescence );\n}\nif ( material.iridescence > 0.0 ) {\n\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tgl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );\n\t#endif\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"},ii={common:{diffuse:{value:new we(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new ue},uv2Transform:{value:new ue},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new he(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new we(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new we(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new ue}},sprite:{diffuse:{value:new we(16777215)},opacity:{value:1},center:{value:new he(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new ue}}},ri={basic:{uniforms:Un([ii.common,ii.specularmap,ii.envmap,ii.aomap,ii.lightmap,ii.fog]),vertexShader:ni.meshbasic_vert,fragmentShader:ni.meshbasic_frag},lambert:{uniforms:Un([ii.common,ii.specularmap,ii.envmap,ii.aomap,ii.lightmap,ii.emissivemap,ii.fog,ii.lights,{emissive:{value:new we(0)}}]),vertexShader:ni.meshlambert_vert,fragmentShader:ni.meshlambert_frag},phong:{uniforms:Un([ii.common,ii.specularmap,ii.envmap,ii.aomap,ii.lightmap,ii.emissivemap,ii.bumpmap,ii.normalmap,ii.displacementmap,ii.fog,ii.lights,{emissive:{value:new we(0)},specular:{value:new we(1118481)},shininess:{value:30}}]),vertexShader:ni.meshphong_vert,fragmentShader:ni.meshphong_frag},standard:{uniforms:Un([ii.common,ii.envmap,ii.aomap,ii.lightmap,ii.emissivemap,ii.bumpmap,ii.normalmap,ii.displacementmap,ii.roughnessmap,ii.metalnessmap,ii.fog,ii.lights,{emissive:{value:new we(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ni.meshphysical_vert,fragmentShader:ni.meshphysical_frag},toon:{uniforms:Un([ii.common,ii.aomap,ii.lightmap,ii.emissivemap,ii.bumpmap,ii.normalmap,ii.displacementmap,ii.gradientmap,ii.fog,ii.lights,{emissive:{value:new we(0)}}]),vertexShader:ni.meshtoon_vert,fragmentShader:ni.meshtoon_frag},matcap:{uniforms:Un([ii.common,ii.bumpmap,ii.normalmap,ii.displacementmap,ii.fog,{matcap:{value:null}}]),vertexShader:ni.meshmatcap_vert,fragmentShader:ni.meshmatcap_frag},points:{uniforms:Un([ii.points,ii.fog]),vertexShader:ni.points_vert,fragmentShader:ni.points_frag},dashed:{uniforms:Un([ii.common,ii.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ni.linedashed_vert,fragmentShader:ni.linedashed_frag},depth:{uniforms:Un([ii.common,ii.displacementmap]),vertexShader:ni.depth_vert,fragmentShader:ni.depth_frag},normal:{uniforms:Un([ii.common,ii.bumpmap,ii.normalmap,ii.displacementmap,{opacity:{value:1}}]),vertexShader:ni.meshnormal_vert,fragmentShader:ni.meshnormal_frag},sprite:{uniforms:Un([ii.sprite,ii.fog]),vertexShader:ni.sprite_vert,fragmentShader:ni.sprite_frag},background:{uniforms:{uvTransform:{value:new ue},t2D:{value:null}},vertexShader:ni.background_vert,fragmentShader:ni.background_frag},cube:{uniforms:Un([ii.envmap,{opacity:{value:1}}]),vertexShader:ni.cube_vert,fragmentShader:ni.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ni.equirect_vert,fragmentShader:ni.equirect_frag},distanceRGBA:{uniforms:Un([ii.common,ii.displacementmap,{referencePosition:{value:new ze},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ni.distanceRGBA_vert,fragmentShader:ni.distanceRGBA_frag},shadow:{uniforms:Un([ii.lights,ii.fog,{color:{value:new we(0)},opacity:{value:1}}]),vertexShader:ni.shadow_vert,fragmentShader:ni.shadow_frag}};function ai(e,t,n,r,o,l){const c=new we(0);let h,d,f=!0===o?0:1,m=null,_=0,x=null;function y(e,t){n.buffers.color.setClear(e.r,e.g,e.b,t,l)}return{getClearColor:function(){return c},setClearColor:function(e,t=1){c.set(e),f=t,y(c,f)},getClearAlpha:function(){return f},setClearAlpha:function(e){f=e,y(c,f)},render:function(n,o){let l=!1,M=!0===o.isScene?o.background:null;M&&M.isTexture&&(M=t.get(M));const S=e.xr,w=S.getSession&&S.getSession();w&&"additive"===w.environmentBlendMode&&(M=null),null===M?y(c,f):M&&M.isColor&&(y(M,1),l=!0),(e.autoClear||l)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),M&&(M.isCubeTexture||M.mapping===v)?(void 0===d&&(d=new In(new On(1,1,1),new Bn({name:"BackgroundCubeMaterial",uniforms:zn(ri.cube.uniforms),vertexShader:ri.cube.vertexShader,fragmentShader:ri.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),d.geometry.deleteAttribute("normal"),d.geometry.deleteAttribute("uv"),d.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(d.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(d)),d.material.uniforms.envMap.value=M,d.material.uniforms.flipEnvMap.value=M.isCubeTexture&&!1===M.isRenderTargetTexture?-1:1,m===M&&_===M.version&&x===e.toneMapping||(d.material.needsUpdate=!0,m=M,_=M.version,x=e.toneMapping),d.layers.enableAll(),n.unshift(d,d.geometry,d.material,0,0,null)):M&&M.isTexture&&(void 0===h&&(h=new In(new ti(2,2),new Bn({name:"BackgroundMaterial",uniforms:zn(ri.background.uniforms),vertexShader:ri.background.vertexShader,fragmentShader:ri.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),Object.defineProperty(h.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(h)),h.material.uniforms.t2D.value=M,!0===M.matrixAutoUpdate&&M.updateMatrix(),h.material.uniforms.uvTransform.value.copy(M.matrix),m===M&&_===M.version&&x===e.toneMapping||(h.material.needsUpdate=!0,m=M,_=M.version,x=e.toneMapping),h.layers.enableAll(),n.unshift(h,h.geometry,h.material,0,0,null))}}}function si(e,t,n,r){const o=e.getParameter(34921),l=r.isWebGL2?null:t.get("OES_vertex_array_object"),c=r.isWebGL2||null!==l,h={},d=x(null);let f=d,m=!1;function v(t){return r.isWebGL2?e.bindVertexArray(t):l.bindVertexArrayOES(t)}function _(t){return r.isWebGL2?e.deleteVertexArray(t):l.deleteVertexArrayOES(t)}function x(e){const t=[],n=[],r=[];for(let i=0;i<o;i++)t[i]=0,n[i]=0,r[i]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:n,attributeDivisors:r,object:e,attributes:{},index:null}}function y(){const e=f.newAttributes;for(let i=0,t=e.length;i<t;i++)e[i]=0}function M(e){S(e,0)}function S(n,o){const l=f.newAttributes,c=f.enabledAttributes,h=f.attributeDivisors;if(l[n]=1,0===c[n]&&(e.enableVertexAttribArray(n),c[n]=1),h[n]!==o){(r.isWebGL2?e:t.get("ANGLE_instanced_arrays"))[r.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,o),h[n]=o}}function w(){const t=f.newAttributes,n=f.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==t[i]&&(e.disableVertexAttribArray(i),n[i]=0)}function T(t,n,o,l,c,h){!0!==r.isWebGL2||5124!==o&&5125!==o?e.vertexAttribPointer(t,n,o,l,c,h):e.vertexAttribIPointer(t,n,o,c,h)}function E(){A(),m=!0,f!==d&&(f=d,v(f.object))}function A(){d.geometry=null,d.program=null,d.wireframe=!1}return{setup:function(object,o,d,_,E){let A=!1;if(c){const t=function(t,n,o){const c=!0===o.wireframe;let d=h[t.id];void 0===d&&(d={},h[t.id]=d);let f=d[n.id];void 0===f&&(f={},d[n.id]=f);let m=f[c];void 0===m&&(m=x(r.isWebGL2?e.createVertexArray():l.createVertexArrayOES()),f[c]=m);return m}(_,d,o);f!==t&&(f=t,v(f.object)),A=function(object,e,t,n){const r=f.attributes,o=e.attributes;let l=0;const c=t.getAttributes();for(const e in c){if(c[e].location>=0){const t=r[e];let n=o[e];if(void 0===n&&("instanceMatrix"===e&&object.instanceMatrix&&(n=object.instanceMatrix),"instanceColor"===e&&object.instanceColor&&(n=object.instanceColor)),void 0===t)return!0;if(t.attribute!==n)return!0;if(n&&t.data!==n.data)return!0;l++}}return f.attributesNum!==l||f.index!==n}(object,_,d,E),A&&function(object,e,t,n){const r={},o=e.attributes;let l=0;const c=t.getAttributes();for(const e in c){if(c[e].location>=0){let t=o[e];void 0===t&&("instanceMatrix"===e&&object.instanceMatrix&&(t=object.instanceMatrix),"instanceColor"===e&&object.instanceColor&&(t=object.instanceColor));const data={};data.attribute=t,t&&t.data&&(data.data=t.data),r[e]=data,l++}}f.attributes=r,f.attributesNum=l,f.index=n}(object,_,d,E)}else{const e=!0===o.wireframe;f.geometry===_.id&&f.program===d.id&&f.wireframe===e||(f.geometry=_.id,f.program=d.id,f.wireframe=e,A=!0)}null!==E&&n.update(E,34963),(A||m)&&(m=!1,function(object,o,l,c){if(!1===r.isWebGL2&&(object.isInstancedMesh||c.isInstancedBufferGeometry)&&null===t.get("ANGLE_instanced_arrays"))return;y();const h=c.attributes,d=l.getAttributes(),f=o.defaultAttributeValues;for(const t in d){const r=d[t];if(r.location>=0){let o=h[t];if(void 0===o&&("instanceMatrix"===t&&object.instanceMatrix&&(o=object.instanceMatrix),"instanceColor"===t&&object.instanceColor&&(o=object.instanceColor)),void 0!==o){const t=o.normalized,l=o.itemSize,h=n.get(o);if(void 0===h)continue;const d=h.buffer,f=h.type,m=h.bytesPerElement;if(o.isInterleavedBufferAttribute){const data=o.data,n=data.stride,h=o.offset;if(data.isInstancedInterleavedBuffer){for(let i=0;i<r.locationSize;i++)S(r.location+i,data.meshPerAttribute);!0!==object.isInstancedMesh&&void 0===c._maxInstanceCount&&(c._maxInstanceCount=data.meshPerAttribute*data.count)}else for(let i=0;i<r.locationSize;i++)M(r.location+i);e.bindBuffer(34962,d);for(let i=0;i<r.locationSize;i++)T(r.location+i,l/r.locationSize,f,t,n*m,(h+l/r.locationSize*i)*m)}else{if(o.isInstancedBufferAttribute){for(let i=0;i<r.locationSize;i++)S(r.location+i,o.meshPerAttribute);!0!==object.isInstancedMesh&&void 0===c._maxInstanceCount&&(c._maxInstanceCount=o.meshPerAttribute*o.count)}else for(let i=0;i<r.locationSize;i++)M(r.location+i);e.bindBuffer(34962,d);for(let i=0;i<r.locationSize;i++)T(r.location+i,l/r.locationSize,f,t,l*m,l/r.locationSize*i*m)}}else if(void 0!==f){const n=f[t];if(void 0!==n)switch(n.length){case 2:e.vertexAttrib2fv(r.location,n);break;case 3:e.vertexAttrib3fv(r.location,n);break;case 4:e.vertexAttrib4fv(r.location,n);break;default:e.vertexAttrib1fv(r.location,n)}}}}w()}(object,o,d,_),null!==E&&e.bindBuffer(34963,n.get(E).buffer))},reset:E,resetDefaultState:A,dispose:function(){E();for(const e in h){const t=h[e];for(const e in t){const n=t[e];for(const e in n)_(n[e].object),delete n[e];delete t[e]}delete h[e]}},releaseStatesOfGeometry:function(e){if(void 0===h[e.id])return;const t=h[e.id];for(const e in t){const n=t[e];for(const e in n)_(n[e].object),delete n[e];delete t[e]}delete h[e.id]},releaseStatesOfProgram:function(e){for(const t in h){const n=h[t];if(void 0===n[e.id])continue;const r=n[e.id];for(const e in r)_(r[e].object),delete r[e];delete n[e.id]}},initAttributes:y,enableAttribute:M,disableUnusedAttributes:w}}function oi(e,t,n,r){const o=r.isWebGL2;let l;this.setMode=function(e){l=e},this.render=function(t,r){e.drawArrays(l,t,r),n.update(r,l,1)},this.renderInstances=function(r,c,h){if(0===h)return;let d,f;if(o)d=e,f="drawArraysInstanced";else if(d=t.get("ANGLE_instanced_arrays"),f="drawArraysInstancedANGLE",null===d)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");d[f](l,r,c,h),n.update(c,l,h)}}function ci(e,t,n){let r;function o(t){if("highp"===t){if(e.getShaderPrecisionFormat(35633,36338).precision>0&&e.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(35633,36337).precision>0&&e.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const l="undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&e instanceof WebGL2ComputeRenderingContext;let c=void 0!==n.precision?n.precision:"highp";const h=o(c);h!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",h,"instead."),c=h);const d=l||t.has("WEBGL_draw_buffers"),f=!0===n.logarithmicDepthBuffer,m=e.getParameter(34930),v=e.getParameter(35660),_=e.getParameter(3379),x=e.getParameter(34076),y=e.getParameter(34921),M=e.getParameter(36347),S=e.getParameter(36348),w=e.getParameter(36349),T=v>0,E=l||t.has("OES_texture_float");return{isWebGL2:l,drawBuffers:d,getMaxAnisotropy:function(){if(void 0!==r)return r;if(!0===t.has("EXT_texture_filter_anisotropic")){const n=t.get("EXT_texture_filter_anisotropic");r=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else r=0;return r},getMaxPrecision:o,precision:c,logarithmicDepthBuffer:f,maxTextures:m,maxVertexTextures:v,maxTextureSize:_,maxCubemapSize:x,maxAttributes:y,maxVertexUniforms:M,maxVaryings:S,maxFragmentUniforms:w,vertexTextures:T,floatFragmentTextures:E,floatVertexTextures:T&&E,maxSamples:l?e.getParameter(36183):0}}function hi(e){const t=this;let n=null,r=0,o=!1,l=!1;const c=new Zn,h=new ue,d={value:null,needsUpdate:!1};function f(){d.value!==n&&(d.value=n,d.needsUpdate=r>0),t.numPlanes=r,t.numIntersection=0}function m(e,n,r,o){const l=null!==e?e.length:0;let f=null;if(0!==l){if(f=d.value,!0!==o||null===f){const t=r+4*l,o=n.matrixWorldInverse;h.getNormalMatrix(o),(null===f||f.length<t)&&(f=new Float32Array(t));for(let i=0,t=r;i!==l;++i,t+=4)c.copy(e[i]).applyMatrix4(o,h),c.normal.toArray(f,t),f[t+3]=c.constant}d.value=f,d.needsUpdate=!0}return t.numPlanes=l,t.numIntersection=0,f}this.uniform=d,this.numPlanes=0,this.numIntersection=0,this.init=function(e,t,l){const c=0!==e.length||t||0!==r||o;return o=t,n=m(e,l,0),r=e.length,c},this.beginShadows=function(){l=!0,m(null)},this.endShadows=function(){l=!1,f()},this.setState=function(t,c,h){const v=t.clippingPlanes,_=t.clipIntersection,x=t.clipShadows,y=e.get(t);if(!o||null===v||0===v.length||l&&!x)l?m(null):f();else{const e=l?0:r,t=4*e;let o=y.clippingState||null;d.value=o,o=m(v,c,t,h);for(let i=0;i!==t;++i)o[i]=n[i];y.clippingState=o,this.numIntersection=_?this.numPlanes:0,this.numPlanes+=e}}}function ui(e){let t=new WeakMap;function n(e,t){return t===f?e.mapping=h:t===m&&(e.mapping=d),e}function r(e){const n=e.target;n.removeEventListener("dispose",r);const o=t.get(n);void 0!==o&&(t.delete(n),o.dispose())}return{get:function(o){if(o&&o.isTexture&&!1===o.isRenderTargetTexture){const l=o.mapping;if(l===f||l===m){if(t.has(o)){return n(t.get(o).texture,o.mapping)}{const image=o.image;if(image&&image.height>0){const l=new jn(image.height/2);return l.fromEquirectangularTexture(e,o),t.set(o,l),o.addEventListener("dispose",r),n(l.texture,o.mapping)}return null}}}return o},dispose:function(){t=new WeakMap}}}ri.physical={uniforms:Un([ri.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new he(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new we(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new he},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new we(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new we(1,1,1)},specularColorMap:{value:null}}]),vertexShader:ni.meshphysical_vert,fragmentShader:ni.meshphysical_frag};class di extends kn{constructor(e=-1,t=1,n=1,r=-1,o=.1,l=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=r,this.near=o,this.far=l,this.updateProjectionMatrix()}copy(source,e){return super.copy(source,e),this.left=source.left,this.right=source.right,this.top=source.top,this.bottom=source.bottom,this.near=source.near,this.far=source.far,this.zoom=source.zoom,this.view=null===source.view?null:Object.assign({},source.view),this}setViewOffset(e,t,n,r,o,l){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=r,this.view.width=o,this.view.height=l,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,r=(this.top+this.bottom)/2;let o=n-e,l=n+e,c=r+t,h=r-t;if(null!==this.view&&this.view.enabled){const e=(this.right-this.left)/this.view.fullWidth/this.zoom,t=(this.top-this.bottom)/this.view.fullHeight/this.zoom;o+=e*this.view.offsetX,l=o+e*this.view.width,c-=t*this.view.offsetY,h=c-t*this.view.height}this.projectionMatrix.makeOrthographic(o,l,c,h,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(meta){const data=super.toJSON(meta);return data.object.zoom=this.zoom,data.object.left=this.left,data.object.right=this.right,data.object.top=this.top,data.object.bottom=this.bottom,data.object.near=this.near,data.object.far=this.far,null!==this.view&&(data.object.view=Object.assign({},this.view)),data}}const pi=[.125,.215,.35,.446,.526,.582],fi=20,mi=new di,gi=new we;let vi=null;const _i=(1+Math.sqrt(5))/2,xi=1/_i,yi=[new ze(1,1,1),new ze(-1,1,1),new ze(1,1,-1),new ze(-1,1,-1),new ze(0,_i,xi),new ze(0,_i,-xi),new ze(xi,0,_i),new ze(-xi,0,_i),new ze(_i,xi,0),new ze(-_i,xi,0)];class Mi{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,r=100){vi=this._renderer.getRenderTarget(),this._setSize(256);const o=this._allocateTargets();return o.depthBuffer=!0,this._sceneToCubeUV(e,n,r,o),t>0&&this._blur(o,0,0,t),this._applyPMREM(o),this._cleanup(o),o}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=Ti(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=wi(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let i=0;i<this._lodPlanes.length;i++)this._lodPlanes[i].dispose()}_cleanup(e){this._renderer.setRenderTarget(vi),e.scissorTest=!1,Si(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===h||e.mapping===d?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),vi=this._renderer.getRenderTarget();const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:T,minFilter:T,generateMipmaps:!1,type:R,format:D,encoding:j,depthBuffer:!1},r=bi(e,t,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=bi(e,t,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(e){const t=[],n=[],r=[];let o=e;const l=e-4+1+pi.length;for(let i=0;i<l;i++){const l=Math.pow(2,o);n.push(l);let c=1/l;i>e-4?c=pi[i-e+4-1]:0===i&&(c=0),r.push(c);const h=1/(l-2),d=-h,f=1+h,m=[d,d,f,d,f,f,d,d,f,f,d,f],v=6,_=6,x=3,y=2,M=1,S=new Float32Array(x*_*v),w=new Float32Array(y*_*v),T=new Float32Array(M*_*v);for(let e=0;e<v;e++){const t=e%3*2/3-1,n=e>2?0:-1,r=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0];S.set(r,x*_*e),w.set(m,y*_*e);const o=[e,e,e,e,e,e];T.set(o,M*_*e)}const E=new mn;E.setAttribute("position",new rn(S,x)),E.setAttribute("uv",new rn(w,y)),E.setAttribute("faceIndex",new rn(T,M)),t.push(E),o>4&&o--}return{lodPlanes:t,sizeLods:n,sigmas:r}}(r)),this._blurMaterial=function(e,t,n){const r=new Float32Array(fi),o=new ze(0,1,0);return new Bn({name:"SphericalGaussianBlur",defines:{n:fi,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:r},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:o}},vertexShader:Ei(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}(r,e,t)}return r}_compileMaterial(e){const t=new In(this._lodPlanes[0],e);this._renderer.compile(t,mi)}_sceneToCubeUV(e,t,n,r){const o=new Vn(90,1,t,n),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],h=this._renderer,d=h.autoClear,f=h.toneMapping;h.getClearColor(gi),h.toneMapping=0,h.autoClear=!1;const m=new en({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),v=new In(new On,m);let _=!1;const x=e.background;x?x.isColor&&(m.color.copy(x),e.background=null,_=!0):(m.color.copy(gi),_=!0);for(let i=0;i<6;i++){const col=i%3;0===col?(o.up.set(0,l[i],0),o.lookAt(c[i],0,0)):1===col?(o.up.set(0,0,l[i]),o.lookAt(0,c[i],0)):(o.up.set(0,l[i],0),o.lookAt(0,0,c[i]));const t=this._cubeSize;Si(r,col*t,i>2?t:0,t,t),h.setRenderTarget(r),_&&h.render(v,o),h.render(e,o)}v.geometry.dispose(),v.material.dispose(),h.toneMapping=f,h.autoClear=d,e.background=x}_textureToCubeUV(e,t){const n=this._renderer,r=e.mapping===h||e.mapping===d;r?(null===this._cubemapMaterial&&(this._cubemapMaterial=Ti()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===e.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=wi());const o=r?this._cubemapMaterial:this._equirectMaterial,l=new In(this._lodPlanes[0],o);o.uniforms.envMap.value=e;const c=this._cubeSize;Si(t,0,0,3*c,2*c),n.setRenderTarget(t),n.render(l,mi)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let i=1;i<this._lodPlanes.length;i++){const t=Math.sqrt(this._sigmas[i]*this._sigmas[i]-this._sigmas[i-1]*this._sigmas[i-1]),n=yi[(i-1)%yi.length];this._blur(e,i-1,i,t,n)}t.autoClear=n}_blur(e,t,n,r,o){const l=this._pingPongRenderTarget;this._halfBlur(e,l,t,n,r,"latitudinal",o),this._halfBlur(l,e,n,n,r,"longitudinal",o)}_halfBlur(e,t,n,r,o,l,c){const h=this._renderer,d=this._blurMaterial;"latitudinal"!==l&&"longitudinal"!==l&&console.error("blur direction must be either latitudinal or longitudinal!");const f=new In(this._lodPlanes[r],d),m=d.uniforms,v=this._sizeLods[n]-1,_=isFinite(o)?Math.PI/(2*v):2*Math.PI/39,x=o/_,y=isFinite(o)?1+Math.floor(3*x):fi;y>fi&&console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${y} samples when the maximum is set to 20`);const M=[];let S=0;for(let i=0;i<fi;++i){const e=i/x,t=Math.exp(-e*e/2);M.push(t),0===i?S+=t:i<y&&(S+=2*t)}for(let i=0;i<M.length;i++)M[i]=M[i]/S;m.envMap.value=e.texture,m.samples.value=y,m.weights.value=M,m.latitudinal.value="latitudinal"===l,c&&(m.poleAxis.value=c);const{_lodMax:w}=this;m.dTheta.value=_,m.mipInt.value=w-n;const T=this._sizeLods[r];Si(t,3*T*(r>w-4?r-w+4:0),4*(this._cubeSize-T),3*T,2*T),h.setRenderTarget(t),h.render(f,mi)}}function bi(e,t,n){const r=new De(e,t,n);return r.texture.mapping=v,r.texture.name="PMREM.cubeUv",r.scissorTest=!0,r}function Si(e,t,n,r,o){e.viewport.set(t,n,r,o),e.scissor.set(t,n,r,o)}function wi(){return new Bn({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Ei(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function Ti(){return new Bn({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Ei(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function Ei(){return"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"}function Ai(e){let t=new WeakMap,n=null;function r(e){const n=e.target;n.removeEventListener("dispose",r);const o=t.get(n);void 0!==o&&(t.delete(n),o.dispose())}return{get:function(o){if(o&&o.isTexture){const l=o.mapping,c=l===f||l===m,v=l===h||l===d;if(c||v){if(o.isRenderTargetTexture&&!0===o.needsPMREMUpdate){o.needsPMREMUpdate=!1;let r=t.get(o);return null===n&&(n=new Mi(e)),r=c?n.fromEquirectangular(o,r):n.fromCubemap(o,r),t.set(o,r),r.texture}if(t.has(o))return t.get(o).texture;{const image=o.image;if(c&&image&&image.height>0||v&&image&&function(image){let e=0;const t=6;for(let i=0;i<t;i++)void 0!==image[i]&&e++;return e===t}(image)){null===n&&(n=new Mi(e));const l=c?n.fromEquirectangular(o):n.fromCubemap(o);return t.set(o,l),o.addEventListener("dispose",r),l.texture}return null}}}return o},dispose:function(){t=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function Li(e){const t={};function n(n){if(void 0!==t[n])return t[n];let r;switch(n){case"WEBGL_depth_texture":r=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=e.getExtension(n)}return t[n]=r,r}return{has:function(e){return null!==n(e)},init:function(e){e.isWebGL2?n("EXT_color_buffer_float"):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(e){const t=n(e);return null===t&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function Ci(e,t,n,r){const o={},l=new WeakMap;function c(e){const h=e.target;null!==h.index&&t.remove(h.index);for(const e in h.attributes)t.remove(h.attributes[e]);h.removeEventListener("dispose",c),delete o[h.id];const d=l.get(h);d&&(t.remove(d),l.delete(h)),r.releaseStatesOfGeometry(h),!0===h.isInstancedBufferGeometry&&delete h._maxInstanceCount,n.memory.geometries--}function h(e){const n=[],r=e.index,o=e.attributes.position;let c=0;if(null!==r){const e=r.array;c=r.version;for(let i=0,t=e.length;i<t;i+=3){const a=e[i+0],b=e[i+1],t=e[i+2];n.push(a,b,b,t,t,a)}}else{const e=o.array;c=o.version;for(let i=0,t=e.length/3-1;i<t;i+=3){const a=i+0,b=i+1,e=i+2;n.push(a,b,b,e,e,a)}}const h=new(de(n)?sn:an)(n,1);h.version=c;const d=l.get(e);d&&t.remove(d),l.set(e,h)}return{get:function(object,e){return!0===o[e.id]||(e.addEventListener("dispose",c),o[e.id]=!0,n.memory.geometries++),e},update:function(e){const n=e.attributes;for(const e in n)t.update(n[e],34962);const r=e.morphAttributes;for(const e in r){const n=r[e];for(let i=0,e=n.length;i<e;i++)t.update(n[i],34962)}},getWireframeAttribute:function(e){const t=l.get(e);if(t){const n=e.index;null!==n&&t.version<n.version&&h(e)}else h(e);return l.get(e)}}}function Ri(e,t,n,r){const o=r.isWebGL2;let l,c,h;this.setMode=function(e){l=e},this.setIndex=function(e){c=e.type,h=e.bytesPerElement},this.render=function(t,r){e.drawElements(l,r,c,t*h),n.update(r,l,1)},this.renderInstances=function(r,d,f){if(0===f)return;let m,v;if(o)m=e,v="drawElementsInstanced";else if(m=t.get("ANGLE_instanced_arrays"),v="drawElementsInstancedANGLE",null===m)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");m[v](l,d,c,r*h,f),n.update(d,l,f)}}function Pi(e){const t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(e,n,r){switch(t.calls++,n){case 4:t.triangles+=r*(e/3);break;case 1:t.lines+=r*(e/2);break;case 3:t.lines+=r*(e-1);break;case 2:t.lines+=r*e;break;case 0:t.points+=r*e;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function Di(a,b){return a[0]-b[0]}function Ii(a,b){return Math.abs(b[1])-Math.abs(a[1])}function Ni(e,t){let n=1;const r=t.isInterleavedBufferAttribute?t.data.array:t.array;r instanceof Int8Array?n=127:r instanceof Int16Array?n=32767:r instanceof Int32Array?n=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",r),e.divideScalar(n)}function Oi(e,t,n){const r={},o=new Float32Array(8),l=new WeakMap,c=new Pe,h=[];for(let i=0;i<8;i++)h[i]=[i,0];return{update:function(object,d,f,m){const v=object.morphTargetInfluences;if(!0===t.isWebGL2){const r=d.morphAttributes.position||d.morphAttributes.normal||d.morphAttributes.color,o=void 0!==r?r.length:0;let h=l.get(d);if(void 0===h||h.count!==o){void 0!==h&&h.texture.dispose();const e=void 0!==d.morphAttributes.position,n=void 0!==d.morphAttributes.normal,r=void 0!==d.morphAttributes.color,f=d.morphAttributes.position||[],m=d.morphAttributes.normal||[],v=d.morphAttributes.color||[];let _=0;!0===e&&(_=1),!0===n&&(_=2),!0===r&&(_=3);let x=d.attributes.position.count*_,y=1;x>t.maxTextureSize&&(y=Math.ceil(x/t.maxTextureSize),x=t.maxTextureSize);const M=new Float32Array(x*y*4*o),S=new Ie(M,x,y,o);S.type=C,S.needsUpdate=!0;const w=4*_;for(let i=0;i<o;i++){const t=f[i],o=m[i],l=v[i],h=x*y*4*i;for(let d=0;d<t.count;d++){const f=d*w;!0===e&&(c.fromBufferAttribute(t,d),!0===t.normalized&&Ni(c,t),M[h+f+0]=c.x,M[h+f+1]=c.y,M[h+f+2]=c.z,M[h+f+3]=0),!0===n&&(c.fromBufferAttribute(o,d),!0===o.normalized&&Ni(c,o),M[h+f+4]=c.x,M[h+f+5]=c.y,M[h+f+6]=c.z,M[h+f+7]=0),!0===r&&(c.fromBufferAttribute(l,d),!0===l.normalized&&Ni(c,l),M[h+f+8]=c.x,M[h+f+9]=c.y,M[h+f+10]=c.z,M[h+f+11]=4===l.itemSize?c.w:1)}}function T(){S.dispose(),l.delete(d),d.removeEventListener("dispose",T)}h={count:o,texture:S,size:new he(x,y)},l.set(d,h),d.addEventListener("dispose",T)}let f=0;for(let i=0;i<v.length;i++)f+=v[i];const _=d.morphTargetsRelative?1:1-f;m.getUniforms().setValue(e,"morphTargetBaseInfluence",_),m.getUniforms().setValue(e,"morphTargetInfluences",v),m.getUniforms().setValue(e,"morphTargetsTexture",h.texture,n),m.getUniforms().setValue(e,"morphTargetsTextureSize",h.size)}else{const t=void 0===v?0:v.length;let n=r[d.id];if(void 0===n||n.length!==t){n=[];for(let i=0;i<t;i++)n[i]=[i,0];r[d.id]=n}for(let i=0;i<t;i++){const e=n[i];e[0]=i,e[1]=v[i]}n.sort(Ii);for(let i=0;i<8;i++)i<t&&n[i][1]?(h[i][0]=n[i][0],h[i][1]=n[i][1]):(h[i][0]=Number.MAX_SAFE_INTEGER,h[i][1]=0);h.sort(Di);const l=d.morphAttributes.position,c=d.morphAttributes.normal;let f=0;for(let i=0;i<8;i++){const e=h[i],t=e[0],n=e[1];t!==Number.MAX_SAFE_INTEGER&&n?(l&&d.getAttribute("morphTarget"+i)!==l[t]&&d.setAttribute("morphTarget"+i,l[t]),c&&d.getAttribute("morphNormal"+i)!==c[t]&&d.setAttribute("morphNormal"+i,c[t]),o[i]=n,f+=n):(l&&!0===d.hasAttribute("morphTarget"+i)&&d.deleteAttribute("morphTarget"+i),c&&!0===d.hasAttribute("morphNormal"+i)&&d.deleteAttribute("morphNormal"+i),o[i]=0)}const _=d.morphTargetsRelative?1:1-f;m.getUniforms().setValue(e,"morphTargetBaseInfluence",_),m.getUniforms().setValue(e,"morphTargetInfluences",o)}}}}function zi(e,t,n,r){let o=new WeakMap;function l(e){const t=e.target;t.removeEventListener("dispose",l),n.remove(t.instanceMatrix),null!==t.instanceColor&&n.remove(t.instanceColor)}return{update:function(object){const e=r.render.frame,c=object.geometry,h=t.get(object,c);return o.get(h)!==e&&(t.update(h),o.set(h,e)),object.isInstancedMesh&&(!1===object.hasEventListener("dispose",l)&&object.addEventListener("dispose",l),n.update(object.instanceMatrix,34962),null!==object.instanceColor&&n.update(object.instanceColor,34962)),h},dispose:function(){o=new WeakMap}}}const Ui=new Re,Fi=new Ie,Bi=new Ne,ki=new Wn,Vi=[],Hi=[],Gi=new Float32Array(16),Wi=new Float32Array(9),ji=new Float32Array(4);function qi(e,t,n){const r=e[0];if(r<=0||r>0)return e;const o=t*n;let l=Vi[o];if(void 0===l&&(l=new Float32Array(o),Vi[o]=l),0!==t){r.toArray(l,0);for(let i=1,r=0;i!==t;++i)r+=n,e[i].toArray(l,r)}return l}function Xi(a,b){if(a.length!==b.length)return!1;for(let i=0,e=a.length;i<e;i++)if(a[i]!==b[i])return!1;return!0}function Yi(a,b){for(let i=0,e=b.length;i<e;i++)a[i]=b[i]}function Zi(e,t){let n=Hi[t];void 0===n&&(n=new Int32Array(t),Hi[t]=n);for(let i=0;i!==t;++i)n[i]=e.allocateTextureUnit();return n}function Ki(e,t){const n=this.cache;n[0]!==t&&(e.uniform1f(this.addr,t),n[0]=t)}function Ji(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(Xi(n,t))return;e.uniform2fv(this.addr,t),Yi(n,t)}}function Qi(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(void 0!==t.r)n[0]===t.r&&n[1]===t.g&&n[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(Xi(n,t))return;e.uniform3fv(this.addr,t),Yi(n,t)}}function $i(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(Xi(n,t))return;e.uniform4fv(this.addr,t),Yi(n,t)}}function er(e,t){const n=this.cache,r=t.elements;if(void 0===r){if(Xi(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),Yi(n,t)}else{if(Xi(n,r))return;ji.set(r),e.uniformMatrix2fv(this.addr,!1,ji),Yi(n,r)}}function nr(e,t){const n=this.cache,r=t.elements;if(void 0===r){if(Xi(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),Yi(n,t)}else{if(Xi(n,r))return;Wi.set(r),e.uniformMatrix3fv(this.addr,!1,Wi),Yi(n,r)}}function ir(e,t){const n=this.cache,r=t.elements;if(void 0===r){if(Xi(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),Yi(n,t)}else{if(Xi(n,r))return;Gi.set(r),e.uniformMatrix4fv(this.addr,!1,Gi),Yi(n,r)}}function rr(e,t){const n=this.cache;n[0]!==t&&(e.uniform1i(this.addr,t),n[0]=t)}function ar(e,t){const n=this.cache;Xi(n,t)||(e.uniform2iv(this.addr,t),Yi(n,t))}function sr(e,t){const n=this.cache;Xi(n,t)||(e.uniform3iv(this.addr,t),Yi(n,t))}function or(e,t){const n=this.cache;Xi(n,t)||(e.uniform4iv(this.addr,t),Yi(n,t))}function lr(e,t){const n=this.cache;n[0]!==t&&(e.uniform1ui(this.addr,t),n[0]=t)}function cr(e,t){const n=this.cache;Xi(n,t)||(e.uniform2uiv(this.addr,t),Yi(n,t))}function ur(e,t){const n=this.cache;Xi(n,t)||(e.uniform3uiv(this.addr,t),Yi(n,t))}function dr(e,t){const n=this.cache;Xi(n,t)||(e.uniform4uiv(this.addr,t),Yi(n,t))}function pr(e,t,n){const r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(e.uniform1i(this.addr,o),r[0]=o),n.setTexture2D(t||Ui,o)}function fr(e,t,n){const r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(e.uniform1i(this.addr,o),r[0]=o),n.setTexture3D(t||Bi,o)}function mr(e,t,n){const r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(e.uniform1i(this.addr,o),r[0]=o),n.setTextureCube(t||ki,o)}function gr(e,t,n){const r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(e.uniform1i(this.addr,o),r[0]=o),n.setTexture2DArray(t||Fi,o)}function vr(e,t){e.uniform1fv(this.addr,t)}function _r(e,t){const data=qi(t,this.size,2);e.uniform2fv(this.addr,data)}function xr(e,t){const data=qi(t,this.size,3);e.uniform3fv(this.addr,data)}function yr(e,t){const data=qi(t,this.size,4);e.uniform4fv(this.addr,data)}function Mr(e,t){const data=qi(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,data)}function Sr(e,t){const data=qi(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,data)}function wr(e,t){const data=qi(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,data)}function Tr(e,t){e.uniform1iv(this.addr,t)}function Er(e,t){e.uniform2iv(this.addr,t)}function Ar(e,t){e.uniform3iv(this.addr,t)}function Lr(e,t){e.uniform4iv(this.addr,t)}function Cr(e,t){e.uniform1uiv(this.addr,t)}function Rr(e,t){e.uniform2uiv(this.addr,t)}function Pr(e,t){e.uniform3uiv(this.addr,t)}function Dr(e,t){e.uniform4uiv(this.addr,t)}function Ir(e,t,n){const r=t.length,o=Zi(n,r);e.uniform1iv(this.addr,o);for(let i=0;i!==r;++i)n.setTexture2D(t[i]||Ui,o[i])}function Nr(e,t,n){const r=t.length,o=Zi(n,r);e.uniform1iv(this.addr,o);for(let i=0;i!==r;++i)n.setTexture3D(t[i]||Bi,o[i])}function Or(e,t,n){const r=t.length,o=Zi(n,r);e.uniform1iv(this.addr,o);for(let i=0;i!==r;++i)n.setTextureCube(t[i]||ki,o[i])}function zr(e,t,n){const r=t.length,o=Zi(n,r);e.uniform1iv(this.addr,o);for(let i=0;i!==r;++i)n.setTexture2DArray(t[i]||Fi,o[i])}class Ur{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=function(e){switch(e){case 5126:return Ki;case 35664:return Ji;case 35665:return Qi;case 35666:return $i;case 35674:return er;case 35675:return nr;case 35676:return ir;case 5124:case 35670:return rr;case 35667:case 35671:return ar;case 35668:case 35672:return sr;case 35669:case 35673:return or;case 5125:return lr;case 36294:return cr;case 36295:return ur;case 36296:return dr;case 35678:case 36198:case 36298:case 36306:case 35682:return pr;case 35679:case 36299:case 36307:return fr;case 35680:case 36300:case 36308:case 36293:return mr;case 36289:case 36303:case 36311:case 36292:return gr}}(t.type)}}class Fr{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=function(e){switch(e){case 5126:return vr;case 35664:return _r;case 35665:return xr;case 35666:return yr;case 35674:return Mr;case 35675:return Sr;case 35676:return wr;case 5124:case 35670:return Tr;case 35667:case 35671:return Er;case 35668:case 35672:return Ar;case 35669:case 35673:return Lr;case 5125:return Cr;case 36294:return Rr;case 36295:return Pr;case 36296:return Dr;case 35678:case 36198:case 36298:case 36306:case 35682:return Ir;case 35679:case 36299:case 36307:return Nr;case 35680:case 36300:case 36308:case 36293:return Or;case 36289:case 36303:case 36311:case 36292:return zr}}(t.type)}}class Br{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const r=this.seq;for(let i=0,o=r.length;i!==o;++i){const u=r[i];u.setValue(e,t[u.id],n)}}}const kr=/(\w+)(\])?(\[|\.)?/g;function Vr(e,t){e.seq.push(t),e.map[t.id]=t}function Hr(e,t,n){const path=e.name,r=path.length;for(kr.lastIndex=0;;){const o=kr.exec(path),l=kr.lastIndex;let c=o[1];const h="]"===o[2],d=o[3];if(h&&(c|=0),void 0===d||"["===d&&l+2===r){Vr(n,void 0===d?new Ur(c,e,t):new Fr(c,e,t));break}{let e=n.map[c];void 0===e&&(e=new Br(c),Vr(n,e)),n=e}}}class Gr{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,35718);for(let i=0;i<n;++i){const n=e.getActiveUniform(t,i);Hr(n,e.getUniformLocation(t,n.name),this)}}setValue(e,t,n,r){const u=this.map[t];void 0!==u&&u.setValue(e,n,r)}setOptional(e,object,t){const n=object[t];void 0!==n&&this.setValue(e,t,n)}static upload(e,t,n,r){for(let i=0,o=t.length;i!==o;++i){const u=t[i],o=n[u.id];!1!==o.needsUpdate&&u.setValue(e,o.value,r)}}static seqWithValue(e,t){const n=[];for(let i=0,r=e.length;i!==r;++i){const u=e[i];u.id in t&&n.push(u)}return n}}function Wr(e,t,n){const r=e.createShader(t);return e.shaderSource(r,n),e.compileShader(r),r}let jr=0;function qr(e,t,n){const r=e.getShaderParameter(t,35713),o=e.getShaderInfoLog(t).trim();if(r&&""===o)return"";const l=/ERROR: 0:(\d+)/.exec(o);if(l){const r=parseInt(l[1]);return n.toUpperCase()+"\n\n"+o+"\n\n"+function(e,t){const n=e.split("\n"),r=[],o=Math.max(t-6,0),l=Math.min(t+6,n.length);for(let i=o;i<l;i++){const line=i+1;r.push(`${line===t?">":" "} ${line}: ${n[i]}`)}return r.join("\n")}(e.getShaderSource(t),r)}return o}function Xr(e,t){const n=function(e){switch(e){case j:return["Linear","( value )"];case X:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",e),["Linear","( value )"]}}(t);return"vec4 "+e+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function Yr(e,t){let n;switch(t){case 1:n="Linear";break;case 2:n="Reinhard";break;case 3:n="OptimizedCineon";break;case 4:n="ACESFilmic";break;case 5:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function Zr(e){return""!==e}function Kr(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function Jr(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const Qr=/^[ \t]*#include +<([\w\d./]+)>/gm;function $r(e){return e.replace(Qr,ea)}function ea(e,t){const n=ni[t];if(void 0===n)throw new Error("Can not resolve #include <"+t+">");return $r(n)}const ta=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,na=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function ia(e){return e.replace(na,aa).replace(ta,ra)}function ra(e,t,n,r){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),aa(e,t,n,r)}function aa(e,t,n,r){let o="";for(let i=parseInt(t);i<parseInt(n);i++)o+=r.replace(/\[\s*i\s*\]/g,"[ "+i+" ]").replace(/UNROLLED_LOOP_INDEX/g,i);return o}function sa(e){let t="precision "+e.precision+" float;\nprecision "+e.precision+" int;";return"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function oa(e,t,n,r){const o=e.getContext(),l=n.defines;let c=n.vertexShader,f=n.fragmentShader;const m=function(e){let t="SHADOWMAP_TYPE_BASIC";return 1===e.shadowMapType?t="SHADOWMAP_TYPE_PCF":2===e.shadowMapType?t="SHADOWMAP_TYPE_PCF_SOFT":3===e.shadowMapType&&(t="SHADOWMAP_TYPE_VSM"),t}(n),_=function(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case h:case d:t="ENVMAP_TYPE_CUBE";break;case v:t="ENVMAP_TYPE_CUBE_UV"}return t}(n),x=function(e){let t="ENVMAP_MODE_REFLECTION";e.envMap&&e.envMapMode===d&&(t="ENVMAP_MODE_REFRACTION");return t}(n),y=function(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case 0:t="ENVMAP_BLENDING_MULTIPLY";break;case 1:t="ENVMAP_BLENDING_MIX";break;case 2:t="ENVMAP_BLENDING_ADD"}return t}(n),M=function(e){const t=e.envMapCubeUVHeight;if(null===t)return null;const n=Math.log2(t)-2,r=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:r,maxMip:n}}(n),S=n.isWebGL2?"":function(e){return[e.extensionDerivatives||e.envMapCubeUVHeight||e.bumpMap||e.tangentSpaceNormalMap||e.clearcoatNormalMap||e.flatShading||"physical"===e.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(e.extensionFragDepth||e.logarithmicDepthBuffer)&&e.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",e.extensionDrawBuffers&&e.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(e.extensionShaderTextureLOD||e.envMap||e.transmission)&&e.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Zr).join("\n")}(n),w=function(e){const t=[];for(const n in e){const r=e[n];!1!==r&&t.push("#define "+n+" "+r)}return t.join("\n")}(l),T=o.createProgram();let E,A,L=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(E=[w].filter(Zr).join("\n"),E.length>0&&(E+="\n"),A=[S,w].filter(Zr).join("\n"),A.length>0&&(A+="\n")):(E=[sa(n),"#define SHADER_NAME "+n.shaderName,w,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+x:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+m:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Zr).join("\n"),A=[S,sa(n),"#define SHADER_NAME "+n.shaderName,w,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+_:"",n.envMap?"#define "+x:"",n.envMap?"#define "+y:"",M?"#define CUBEUV_TEXEL_WIDTH "+M.texelWidth:"",M?"#define CUBEUV_TEXEL_HEIGHT "+M.texelHeight:"",M?"#define CUBEUV_MAX_MIP "+M.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+m:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==n.toneMapping?"#define TONE_MAPPING":"",0!==n.toneMapping?ni.tonemapping_pars_fragment:"",0!==n.toneMapping?Yr("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",ni.encodings_pars_fragment,Xr("linearToOutputTexel",n.outputEncoding),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(Zr).join("\n")),c=$r(c),c=Kr(c,n),c=Jr(c,n),f=$r(f),f=Kr(f,n),f=Jr(f,n),c=ia(c),f=ia(f),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(L="#version 300 es\n",E=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+E,A=["#define varying in",n.glslVersion===Q?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===Q?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+A);const C=L+A+f,R=Wr(o,35633,L+E+c),P=Wr(o,35632,C);if(o.attachShader(T,R),o.attachShader(T,P),void 0!==n.index0AttributeName?o.bindAttribLocation(T,0,n.index0AttributeName):!0===n.morphTargets&&o.bindAttribLocation(T,0,"position"),o.linkProgram(T),e.debug.checkShaderErrors){const e=o.getProgramInfoLog(T).trim(),t=o.getShaderInfoLog(R).trim(),n=o.getShaderInfoLog(P).trim();let r=!0,l=!0;if(!1===o.getProgramParameter(T,35714)){r=!1;const t=qr(o,R,"vertex"),n=qr(o,P,"fragment");console.error("THREE.WebGLProgram: Shader Error "+o.getError()+" - VALIDATE_STATUS "+o.getProgramParameter(T,35715)+"\n\nProgram Info Log: "+e+"\n"+t+"\n"+n)}else""!==e?console.warn("THREE.WebGLProgram: Program Info Log:",e):""!==t&&""!==n||(l=!1);l&&(this.diagnostics={runnable:r,programLog:e,vertexShader:{log:t,prefix:E},fragmentShader:{log:n,prefix:A}})}let D,I;return o.deleteShader(R),o.deleteShader(P),this.getUniforms=function(){return void 0===D&&(D=new Gr(o,T)),D},this.getAttributes=function(){return void 0===I&&(I=function(e,t){const n={},r=e.getProgramParameter(t,35721);for(let i=0;i<r;i++){const r=e.getActiveAttrib(t,i),o=r.name;let l=1;35674===r.type&&(l=2),35675===r.type&&(l=3),35676===r.type&&(l=4),n[o]={type:r.type,location:e.getAttribLocation(t,o),locationSize:l}}return n}(o,T)),I},this.destroy=function(){r.releaseStatesOfProgram(this),o.deleteProgram(T),this.program=void 0},this.name=n.shaderName,this.id=jr++,this.cacheKey=t,this.usedTimes=1,this.program=T,this.vertexShader=R,this.fragmentShader=P,this}let la=0;class ca{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,r=this._getShaderStage(t),o=this._getShaderStage(n),l=this._getShaderCacheForMaterial(e);return!1===l.has(r)&&(l.add(r),r.usedTimes++),!1===l.has(o)&&(l.add(o),o.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const e of t)e.usedTimes--,0===e.usedTimes&&this.shaderCache.delete(e.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;return!1===t.has(e)&&t.set(e,new Set),t.get(e)}_getShaderStage(code){const e=this.shaderCache;if(!1===e.has(code)){const t=new ha(code);e.set(code,t)}return e.get(code)}}class ha{constructor(code){this.id=la++,this.code=code,this.usedTimes=0}}function ua(e,t,n,r,o,l,c){const h=new Et,d=new ca,f=[],m=o.isWebGL2,_=o.logarithmicDepthBuffer,x=o.vertexTextures;let y=o.precision;const M={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(l,h,f,S,object){const w=S.fog,T=object.geometry,E=l.isMeshStandardMaterial?S.environment:null,A=(l.isMeshStandardMaterial?n:t).get(l.envMap||E),L=A&&A.mapping===v?A.image.height:null,C=M[l.type];null!==l.precision&&(y=o.getMaxPrecision(l.precision),y!==l.precision&&console.warn("THREE.WebGLProgram.getParameters:",l.precision,"not supported, using",y,"instead."));const R=T.morphAttributes.position||T.morphAttributes.normal||T.morphAttributes.color,P=void 0!==R?R.length:0;let D,I,N,O,z=0;if(void 0!==T.morphAttributes.position&&(z=1),void 0!==T.morphAttributes.normal&&(z=2),void 0!==T.morphAttributes.color&&(z=3),C){const e=ri[C];D=e.vertexShader,I=e.fragmentShader}else D=l.vertexShader,I=l.fragmentShader,d.update(l),N=d.getVertexShaderID(l),O=d.getFragmentShaderID(l);const U=e.getRenderTarget(),F=l.alphaTest>0,B=l.clearcoat>0,k=l.iridescence>0;return{isWebGL2:m,shaderID:C,shaderName:l.type,vertexShader:D,fragmentShader:I,defines:l.defines,customVertexShaderID:N,customFragmentShaderID:O,isRawShaderMaterial:!0===l.isRawShaderMaterial,glslVersion:l.glslVersion,precision:y,instancing:!0===object.isInstancedMesh,instancingColor:!0===object.isInstancedMesh&&null!==object.instanceColor,supportsVertexTextures:x,outputEncoding:null===U?e.outputEncoding:!0===U.isXRRenderTarget?U.texture.encoding:j,map:!!l.map,matcap:!!l.matcap,envMap:!!A,envMapMode:A&&A.mapping,envMapCubeUVHeight:L,lightMap:!!l.lightMap,aoMap:!!l.aoMap,emissiveMap:!!l.emissiveMap,bumpMap:!!l.bumpMap,normalMap:!!l.normalMap,objectSpaceNormalMap:1===l.normalMapType,tangentSpaceNormalMap:0===l.normalMapType,decodeVideoTexture:!!l.map&&!0===l.map.isVideoTexture&&l.map.encoding===X,clearcoat:B,clearcoatMap:B&&!!l.clearcoatMap,clearcoatRoughnessMap:B&&!!l.clearcoatRoughnessMap,clearcoatNormalMap:B&&!!l.clearcoatNormalMap,iridescence:k,iridescenceMap:k&&!!l.iridescenceMap,iridescenceThicknessMap:k&&!!l.iridescenceThicknessMap,displacementMap:!!l.displacementMap,roughnessMap:!!l.roughnessMap,metalnessMap:!!l.metalnessMap,specularMap:!!l.specularMap,specularIntensityMap:!!l.specularIntensityMap,specularColorMap:!!l.specularColorMap,opaque:!1===l.transparent&&1===l.blending,alphaMap:!!l.alphaMap,alphaTest:F,gradientMap:!!l.gradientMap,sheen:l.sheen>0,sheenColorMap:!!l.sheenColorMap,sheenRoughnessMap:!!l.sheenRoughnessMap,transmission:l.transmission>0,transmissionMap:!!l.transmissionMap,thicknessMap:!!l.thicknessMap,combine:l.combine,vertexTangents:!!l.normalMap&&!!T.attributes.tangent,vertexColors:l.vertexColors,vertexAlphas:!0===l.vertexColors&&!!T.attributes.color&&4===T.attributes.color.itemSize,vertexUvs:!!(l.map||l.bumpMap||l.normalMap||l.specularMap||l.alphaMap||l.emissiveMap||l.roughnessMap||l.metalnessMap||l.clearcoatMap||l.clearcoatRoughnessMap||l.clearcoatNormalMap||l.iridescenceMap||l.iridescenceThicknessMap||l.displacementMap||l.transmissionMap||l.thicknessMap||l.specularIntensityMap||l.specularColorMap||l.sheenColorMap||l.sheenRoughnessMap),uvsVertexOnly:!(l.map||l.bumpMap||l.normalMap||l.specularMap||l.alphaMap||l.emissiveMap||l.roughnessMap||l.metalnessMap||l.clearcoatNormalMap||l.iridescenceMap||l.iridescenceThicknessMap||l.transmission>0||l.transmissionMap||l.thicknessMap||l.specularIntensityMap||l.specularColorMap||l.sheen>0||l.sheenColorMap||l.sheenRoughnessMap||!l.displacementMap),fog:!!w,useFog:!0===l.fog,fogExp2:w&&w.isFogExp2,flatShading:!!l.flatShading,sizeAttenuation:l.sizeAttenuation,logarithmicDepthBuffer:_,skinning:!0===object.isSkinnedMesh,morphTargets:void 0!==T.morphAttributes.position,morphNormals:void 0!==T.morphAttributes.normal,morphColors:void 0!==T.morphAttributes.color,morphTargetsCount:P,morphTextureStride:z,numDirLights:h.directional.length,numPointLights:h.point.length,numSpotLights:h.spot.length,numRectAreaLights:h.rectArea.length,numHemiLights:h.hemi.length,numDirLightShadows:h.directionalShadowMap.length,numPointLightShadows:h.pointShadowMap.length,numSpotLightShadows:h.spotShadowMap.length,numClippingPlanes:c.numPlanes,numClipIntersection:c.numIntersection,dithering:l.dithering,shadowMapEnabled:e.shadowMap.enabled&&f.length>0,shadowMapType:e.shadowMap.type,toneMapping:l.toneMapped?e.toneMapping:0,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:l.premultipliedAlpha,doubleSided:2===l.side,flipSided:1===l.side,useDepthPacking:!!l.depthPacking,depthPacking:l.depthPacking||0,index0AttributeName:l.index0AttributeName,extensionDerivatives:l.extensions&&l.extensions.derivatives,extensionFragDepth:l.extensions&&l.extensions.fragDepth,extensionDrawBuffers:l.extensions&&l.extensions.drawBuffers,extensionShaderTextureLOD:l.extensions&&l.extensions.shaderTextureLOD,rendererExtensionFragDepth:m||r.has("EXT_frag_depth"),rendererExtensionDrawBuffers:m||r.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:m||r.has("EXT_shader_texture_lod"),customProgramCacheKey:l.customProgramCacheKey()}},getProgramCacheKey:function(t){const n=[];if(t.shaderID?n.push(t.shaderID):(n.push(t.customVertexShaderID),n.push(t.customFragmentShaderID)),void 0!==t.defines)for(const e in t.defines)n.push(e),n.push(t.defines[e]);return!1===t.isRawShaderMaterial&&(!function(e,t){e.push(t.precision),e.push(t.outputEncoding),e.push(t.envMapMode),e.push(t.envMapCubeUVHeight),e.push(t.combine),e.push(t.vertexUvs),e.push(t.fogExp2),e.push(t.sizeAttenuation),e.push(t.morphTargetsCount),e.push(t.morphAttributeCount),e.push(t.numDirLights),e.push(t.numPointLights),e.push(t.numSpotLights),e.push(t.numHemiLights),e.push(t.numRectAreaLights),e.push(t.numDirLightShadows),e.push(t.numPointLightShadows),e.push(t.numSpotLightShadows),e.push(t.shadowMapType),e.push(t.toneMapping),e.push(t.numClippingPlanes),e.push(t.numClipIntersection),e.push(t.depthPacking)}(n,t),function(e,t){h.disableAll(),t.isWebGL2&&h.enable(0);t.supportsVertexTextures&&h.enable(1);t.instancing&&h.enable(2);t.instancingColor&&h.enable(3);t.map&&h.enable(4);t.matcap&&h.enable(5);t.envMap&&h.enable(6);t.lightMap&&h.enable(7);t.aoMap&&h.enable(8);t.emissiveMap&&h.enable(9);t.bumpMap&&h.enable(10);t.normalMap&&h.enable(11);t.objectSpaceNormalMap&&h.enable(12);t.tangentSpaceNormalMap&&h.enable(13);t.clearcoat&&h.enable(14);t.clearcoatMap&&h.enable(15);t.clearcoatRoughnessMap&&h.enable(16);t.clearcoatNormalMap&&h.enable(17);t.iridescence&&h.enable(18);t.iridescenceMap&&h.enable(19);t.iridescenceThicknessMap&&h.enable(20);t.displacementMap&&h.enable(21);t.specularMap&&h.enable(22);t.roughnessMap&&h.enable(23);t.metalnessMap&&h.enable(24);t.gradientMap&&h.enable(25);t.alphaMap&&h.enable(26);t.alphaTest&&h.enable(27);t.vertexColors&&h.enable(28);t.vertexAlphas&&h.enable(29);t.vertexUvs&&h.enable(30);t.vertexTangents&&h.enable(31);t.uvsVertexOnly&&h.enable(32);t.fog&&h.enable(33);e.push(h.mask),h.disableAll(),t.useFog&&h.enable(0);t.flatShading&&h.enable(1);t.logarithmicDepthBuffer&&h.enable(2);t.skinning&&h.enable(3);t.morphTargets&&h.enable(4);t.morphNormals&&h.enable(5);t.morphColors&&h.enable(6);t.premultipliedAlpha&&h.enable(7);t.shadowMapEnabled&&h.enable(8);t.physicallyCorrectLights&&h.enable(9);t.doubleSided&&h.enable(10);t.flipSided&&h.enable(11);t.useDepthPacking&&h.enable(12);t.dithering&&h.enable(13);t.specularIntensityMap&&h.enable(14);t.specularColorMap&&h.enable(15);t.transmission&&h.enable(16);t.transmissionMap&&h.enable(17);t.thicknessMap&&h.enable(18);t.sheen&&h.enable(19);t.sheenColorMap&&h.enable(20);t.sheenRoughnessMap&&h.enable(21);t.decodeVideoTexture&&h.enable(22);t.opaque&&h.enable(23);e.push(h.mask)}(n,t),n.push(e.outputEncoding)),n.push(t.customProgramCacheKey),n.join()},getUniforms:function(e){const t=M[e.type];let n;if(t){const e=ri[t];n=Fn.clone(e.uniforms)}else n=e.uniforms;return n},acquireProgram:function(t,n){let r;for(let p=0,e=f.length;p<e;p++){const e=f[p];if(e.cacheKey===n){r=e,++r.usedTimes;break}}return void 0===r&&(r=new oa(e,n,t,l),f.push(r)),r},releaseProgram:function(e){if(0==--e.usedTimes){const i=f.indexOf(e);f[i]=f[f.length-1],f.pop(),e.destroy()}},releaseShaderCache:function(e){d.remove(e)},programs:f,dispose:function(){d.dispose()}}}function da(){let e=new WeakMap;return{get:function(object){let map=e.get(object);return void 0===map&&(map={},e.set(object,map)),map},remove:function(object){e.delete(object)},update:function(object,t,n){e.get(object)[t]=n},dispose:function(){e=new WeakMap}}}function pa(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function fa(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function ma(){const e=[];let t=0;const n=[],r=[],o=[];function l(object,n,r,o,l,c){let h=e[t];return void 0===h?(h={id:object.id,object:object,geometry:n,material:r,groupOrder:o,renderOrder:object.renderOrder,z:l,group:c},e[t]=h):(h.id=object.id,h.object=object,h.geometry=n,h.material=r,h.groupOrder=o,h.renderOrder=object.renderOrder,h.z=l,h.group=c),t++,h}return{opaque:n,transmissive:r,transparent:o,init:function(){t=0,n.length=0,r.length=0,o.length=0},push:function(object,e,t,c,h,d){const f=l(object,e,t,c,h,d);t.transmission>0?r.push(f):!0===t.transparent?o.push(f):n.push(f)},unshift:function(object,e,t,c,h,d){const f=l(object,e,t,c,h,d);t.transmission>0?r.unshift(f):!0===t.transparent?o.unshift(f):n.unshift(f)},finish:function(){for(let i=t,n=e.length;i<n;i++){const t=e[i];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.group=null}},sort:function(e,t){n.length>1&&n.sort(e||pa),r.length>1&&r.sort(t||fa),o.length>1&&o.sort(t||fa)}}}function ga(){let e=new WeakMap;return{get:function(t,n){let r;return!1===e.has(t)?(r=new ma,e.set(t,[r])):n>=e.get(t).length?(r=new ma,e.get(t).push(r)):r=e.get(t)[n],r},dispose:function(){e=new WeakMap}}}function va(){const e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];let n;switch(t.type){case"DirectionalLight":n={direction:new ze,color:new we};break;case"SpotLight":n={position:new ze,direction:new ze,color:new we,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new ze,color:new we,distance:0,decay:0};break;case"HemisphereLight":n={direction:new ze,skyColor:new we,groundColor:new we};break;case"RectAreaLight":n={color:new we,position:new ze,halfWidth:new ze,halfHeight:new ze}}return e[t.id]=n,n}}}let _a=0;function xa(e,t){return(t.castShadow?1:0)-(e.castShadow?1:0)}function ya(e,t){const n=new va,r=function(){const e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];let n;switch(t.type){case"DirectionalLight":case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new he};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new he,shadowCameraNear:1,shadowCameraFar:1e3}}return e[t.id]=n,n}}}(),o={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let i=0;i<9;i++)o.probe.push(new ze);const l=new ze,c=new mt,h=new mt;return{setup:function(l,c){let h=0,g=0,b=0;for(let i=0;i<9;i++)o.probe[i].set(0,0,0);let d=0,f=0,m=0,v=0,_=0,x=0,y=0,M=0;l.sort(xa);const S=!0!==c?Math.PI:1;for(let i=0,e=l.length;i<e;i++){const e=l[i],t=e.color,c=e.intensity,w=e.distance,T=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)h+=t.r*c*S,g+=t.g*c*S,b+=t.b*c*S;else if(e.isLightProbe)for(let t=0;t<9;t++)o.probe[t].addScaledVector(e.sh.coefficients[t],c);else if(e.isDirectionalLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*S),e.castShadow){const shadow=e.shadow,t=r.get(e);t.shadowBias=shadow.bias,t.shadowNormalBias=shadow.normalBias,t.shadowRadius=shadow.radius,t.shadowMapSize=shadow.mapSize,o.directionalShadow[d]=t,o.directionalShadowMap[d]=T,o.directionalShadowMatrix[d]=e.shadow.matrix,x++}o.directional[d]=t,d++}else if(e.isSpotLight){const l=n.get(e);if(l.position.setFromMatrixPosition(e.matrixWorld),l.color.copy(t).multiplyScalar(c*S),l.distance=w,l.coneCos=Math.cos(e.angle),l.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),l.decay=e.decay,e.castShadow){const shadow=e.shadow,t=r.get(e);t.shadowBias=shadow.bias,t.shadowNormalBias=shadow.normalBias,t.shadowRadius=shadow.radius,t.shadowMapSize=shadow.mapSize,o.spotShadow[m]=t,o.spotShadowMap[m]=T,o.spotShadowMatrix[m]=e.shadow.matrix,M++}o.spot[m]=l,m++}else if(e.isRectAreaLight){const r=n.get(e);r.color.copy(t).multiplyScalar(c),r.halfWidth.set(.5*e.width,0,0),r.halfHeight.set(0,.5*e.height,0),o.rectArea[v]=r,v++}else if(e.isPointLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*S),t.distance=e.distance,t.decay=e.decay,e.castShadow){const shadow=e.shadow,t=r.get(e);t.shadowBias=shadow.bias,t.shadowNormalBias=shadow.normalBias,t.shadowRadius=shadow.radius,t.shadowMapSize=shadow.mapSize,t.shadowCameraNear=shadow.camera.near,t.shadowCameraFar=shadow.camera.far,o.pointShadow[f]=t,o.pointShadowMap[f]=T,o.pointShadowMatrix[f]=e.shadow.matrix,y++}o.point[f]=t,f++}else if(e.isHemisphereLight){const t=n.get(e);t.skyColor.copy(e.color).multiplyScalar(c*S),t.groundColor.copy(e.groundColor).multiplyScalar(c*S),o.hemi[_]=t,_++}}v>0&&(t.isWebGL2||!0===e.has("OES_texture_float_linear")?(o.rectAreaLTC1=ii.LTC_FLOAT_1,o.rectAreaLTC2=ii.LTC_FLOAT_2):!0===e.has("OES_texture_half_float_linear")?(o.rectAreaLTC1=ii.LTC_HALF_1,o.rectAreaLTC2=ii.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),o.ambient[0]=h,o.ambient[1]=g,o.ambient[2]=b;const w=o.hash;w.directionalLength===d&&w.pointLength===f&&w.spotLength===m&&w.rectAreaLength===v&&w.hemiLength===_&&w.numDirectionalShadows===x&&w.numPointShadows===y&&w.numSpotShadows===M||(o.directional.length=d,o.spot.length=m,o.rectArea.length=v,o.point.length=f,o.hemi.length=_,o.directionalShadow.length=x,o.directionalShadowMap.length=x,o.pointShadow.length=y,o.pointShadowMap.length=y,o.spotShadow.length=M,o.spotShadowMap.length=M,o.directionalShadowMatrix.length=x,o.pointShadowMatrix.length=y,o.spotShadowMatrix.length=M,w.directionalLength=d,w.pointLength=f,w.spotLength=m,w.rectAreaLength=v,w.hemiLength=_,w.numDirectionalShadows=x,w.numPointShadows=y,w.numSpotShadows=M,o.version=_a++)},setupView:function(e,t){let n=0,r=0,d=0,f=0,m=0;const v=t.matrixWorldInverse;for(let i=0,t=e.length;i<t;i++){const t=e[i];if(t.isDirectionalLight){const e=o.directional[n];e.direction.setFromMatrixPosition(t.matrixWorld),l.setFromMatrixPosition(t.target.matrixWorld),e.direction.sub(l),e.direction.transformDirection(v),n++}else if(t.isSpotLight){const e=o.spot[d];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(v),e.direction.setFromMatrixPosition(t.matrixWorld),l.setFromMatrixPosition(t.target.matrixWorld),e.direction.sub(l),e.direction.transformDirection(v),d++}else if(t.isRectAreaLight){const e=o.rectArea[f];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(v),h.identity(),c.copy(t.matrixWorld),c.premultiply(v),h.extractRotation(c),e.halfWidth.set(.5*t.width,0,0),e.halfHeight.set(0,.5*t.height,0),e.halfWidth.applyMatrix4(h),e.halfHeight.applyMatrix4(h),f++}else if(t.isPointLight){const e=o.point[r];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(v),r++}else if(t.isHemisphereLight){const e=o.hemi[m];e.direction.setFromMatrixPosition(t.matrixWorld),e.direction.transformDirection(v),m++}}},state:o}}function Ma(e,t){const n=new ya(e,t),r=[],o=[];return{init:function(){r.length=0,o.length=0},state:{lightsArray:r,shadowsArray:o,lights:n},setupLights:function(e){n.setup(r,e)},setupLightsView:function(e){n.setupView(r,e)},pushLight:function(e){r.push(e)},pushShadow:function(e){o.push(e)}}}function ba(e,t){let n=new WeakMap;return{get:function(r,o=0){let l;return!1===n.has(r)?(l=new Ma(e,t),n.set(r,[l])):o>=n.get(r).length?(l=new Ma(e,t),n.get(r).push(l)):l=n.get(r)[o],l},dispose:function(){n=new WeakMap}}}class Sa extends $t{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(source){return super.copy(source),this.depthPacking=source.depthPacking,this.map=source.map,this.alphaMap=source.alphaMap,this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this}}class wa extends $t{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.referencePosition=new ze,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(source){return super.copy(source),this.referencePosition.copy(source.referencePosition),this.nearDistance=source.nearDistance,this.farDistance=source.farDistance,this.map=source.map,this.alphaMap=source.alphaMap,this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this}}function Ta(e,t,n){let r=new Qn;const o=new he,l=new he,c=new Pe,h=new Sa({depthPacking:3201}),d=new wa,f={},m=n.maxTextureSize,v={0:1,1:0,2:2},_=new Bn({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new he},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),x=_.clone();x.defines.HORIZONTAL_PASS=1;const y=new mn;y.setAttribute("position",new rn(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const S=new In(y,_),w=this;function T(shadow,n){const r=t.update(S);_.defines.VSM_SAMPLES!==shadow.blurSamples&&(_.defines.VSM_SAMPLES=shadow.blurSamples,x.defines.VSM_SAMPLES=shadow.blurSamples,_.needsUpdate=!0,x.needsUpdate=!0),_.uniforms.shadow_pass.value=shadow.map.texture,_.uniforms.resolution.value=shadow.mapSize,_.uniforms.radius.value=shadow.radius,e.setRenderTarget(shadow.mapPass),e.clear(),e.renderBufferDirect(n,null,r,_,S,null),x.uniforms.shadow_pass.value=shadow.mapPass.texture,x.uniforms.resolution.value=shadow.mapSize,x.uniforms.radius.value=shadow.radius,e.setRenderTarget(shadow.map),e.clear(),e.renderBufferDirect(n,null,r,x,S,null)}function E(object,t,n,r,o,l){let c=null;const m=!0===n.isPointLight?object.customDistanceMaterial:object.customDepthMaterial;if(c=void 0!==m?m:!0===n.isPointLight?d:h,e.localClippingEnabled&&!0===t.clipShadows&&0!==t.clippingPlanes.length||t.displacementMap&&0!==t.displacementScale||t.alphaMap&&t.alphaTest>0){const e=c.uuid,n=t.uuid;let r=f[e];void 0===r&&(r={},f[e]=r);let o=r[n];void 0===o&&(o=c.clone(),r[n]=o),c=o}return c.visible=t.visible,c.wireframe=t.wireframe,c.side=3===l?null!==t.shadowSide?t.shadowSide:t.side:null!==t.shadowSide?t.shadowSide:v[t.side],c.alphaMap=t.alphaMap,c.alphaTest=t.alphaTest,c.clipShadows=t.clipShadows,c.clippingPlanes=t.clippingPlanes,c.clipIntersection=t.clipIntersection,c.displacementMap=t.displacementMap,c.displacementScale=t.displacementScale,c.displacementBias=t.displacementBias,c.wireframeLinewidth=t.wireframeLinewidth,c.linewidth=t.linewidth,!0===n.isPointLight&&!0===c.isMeshDistanceMaterial&&(c.referencePosition.setFromMatrixPosition(n.matrixWorld),c.nearDistance=r,c.farDistance=o),c}function A(object,n,o,l,c){if(!1===object.visible)return;if(object.layers.test(n.layers)&&(object.isMesh||object.isLine||object.isPoints)&&(object.castShadow||object.receiveShadow&&3===c)&&(!object.frustumCulled||r.intersectsObject(object))){object.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse,object.matrixWorld);const n=t.update(object),r=object.material;if(Array.isArray(r)){const t=n.groups;for(let h=0,d=t.length;h<d;h++){const d=t[h],f=r[d.materialIndex];if(f&&f.visible){const t=E(object,f,l,o.near,o.far,c);e.renderBufferDirect(o,null,n,t,object,d)}}}else if(r.visible){const t=E(object,r,l,o.near,o.far,c);e.renderBufferDirect(o,null,n,t,object,null)}}const h=object.children;for(let i=0,e=h.length;i<e;i++)A(h[i],n,o,l,c)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(t,n,h){if(!1===w.enabled)return;if(!1===w.autoUpdate&&!1===w.needsUpdate)return;if(0===t.length)return;const d=e.getRenderTarget(),f=e.getActiveCubeFace(),v=e.getActiveMipmapLevel(),_=e.state;_.setBlending(0),_.buffers.color.setClear(1,1,1,1),_.buffers.depth.setTest(!0),_.setScissorTest(!1);for(let i=0,d=t.length;i<d;i++){const d=t[i],shadow=d.shadow;if(void 0===shadow){console.warn("THREE.WebGLShadowMap:",d,"has no shadow.");continue}if(!1===shadow.autoUpdate&&!1===shadow.needsUpdate)continue;o.copy(shadow.mapSize);const f=shadow.getFrameExtents();if(o.multiply(f),l.copy(shadow.mapSize),(o.x>m||o.y>m)&&(o.x>m&&(l.x=Math.floor(m/f.x),o.x=l.x*f.x,shadow.mapSize.x=l.x),o.y>m&&(l.y=Math.floor(m/f.y),o.y=l.y*f.y,shadow.mapSize.y=l.y)),null!==shadow.map||shadow.isPointLightShadow||3!==this.type||(shadow.map=new De(o.x,o.y),shadow.map.texture.name=d.name+".shadowMap",shadow.mapPass=new De(o.x,o.y),shadow.camera.updateProjectionMatrix()),null===shadow.map){const e={minFilter:M,magFilter:M,format:D};shadow.map=new De(o.x,o.y,e),shadow.map.texture.name=d.name+".shadowMap",shadow.camera.updateProjectionMatrix()}e.setRenderTarget(shadow.map),e.clear();const v=shadow.getViewportCount();for(let e=0;e<v;e++){const t=shadow.getViewport(e);c.set(l.x*t.x,l.y*t.y,l.x*t.z,l.y*t.w),_.viewport(c),shadow.updateMatrices(d,e),r=shadow.getFrustum(),A(n,h,shadow.camera,d,this.type)}shadow.isPointLightShadow||3!==this.type||T(shadow,h),shadow.needsUpdate=!1}w.needsUpdate=!1,e.setRenderTarget(d,f,v)}}function Ea(e,t,n){const r=n.isWebGL2;const o=new function(){let t=!1;const n=new Pe;let r=null;const o=new Pe(0,0,0,0);return{setMask:function(n){r===n||t||(e.colorMask(n,n,n,n),r=n)},setLocked:function(e){t=e},setClear:function(t,g,b,a,r){!0===r&&(t*=a,g*=a,b*=a),n.set(t,g,b,a),!1===o.equals(n)&&(e.clearColor(t,g,b,a),o.copy(n))},reset:function(){t=!1,r=null,o.set(-1,0,0,0)}}},l=new function(){let t=!1,n=null,r=null,o=null;return{setTest:function(e){e?X(2929):Y(2929)},setMask:function(r){n===r||t||(e.depthMask(r),n=r)},setFunc:function(t){if(r!==t){if(t)switch(t){case 0:e.depthFunc(512);break;case 1:e.depthFunc(519);break;case 2:e.depthFunc(513);break;case 3:default:e.depthFunc(515);break;case 4:e.depthFunc(514);break;case 5:e.depthFunc(518);break;case 6:e.depthFunc(516);break;case 7:e.depthFunc(517)}else e.depthFunc(515);r=t}},setLocked:function(e){t=e},setClear:function(t){o!==t&&(e.clearDepth(t),o=t)},reset:function(){t=!1,n=null,r=null,o=null}}},h=new function(){let t=!1,n=null,r=null,o=null,l=null,c=null,h=null,d=null,f=null;return{setTest:function(e){t||(e?X(2960):Y(2960))},setMask:function(r){n===r||t||(e.stencilMask(r),n=r)},setFunc:function(t,n,c){r===t&&o===n&&l===c||(e.stencilFunc(t,n,c),r=t,o=n,l=c)},setOp:function(t,n,r){c===t&&h===n&&d===r||(e.stencilOp(t,n,r),c=t,h=n,d=r)},setLocked:function(e){t=e},setClear:function(t){f!==t&&(e.clearStencil(t),f=t)},reset:function(){t=!1,n=null,r=null,o=null,l=null,c=null,h=null,d=null,f=null}}};let d={},f={},m=new WeakMap,v=[],_=null,x=!1,y=null,M=null,S=null,w=null,T=null,E=null,A=null,L=!1,C=null,R=null,P=null,D=null,I=null;const N=e.getParameter(35661);let O=!1,z=0;const U=e.getParameter(7938);-1!==U.indexOf("WebGL")?(z=parseFloat(/^WebGL (\d)/.exec(U)[1]),O=z>=1):-1!==U.indexOf("OpenGL ES")&&(z=parseFloat(/^OpenGL ES (\d)/.exec(U)[1]),O=z>=2);let F=null,B={};const k=e.getParameter(3088),V=e.getParameter(2978),H=(new Pe).fromArray(k),G=(new Pe).fromArray(V);function W(t,n,r){const data=new Uint8Array(4),o=e.createTexture();e.bindTexture(t,o),e.texParameteri(t,10241,9728),e.texParameteri(t,10240,9728);for(let i=0;i<r;i++)e.texImage2D(n+i,0,6408,1,1,0,6408,5121,data);return o}const j={};function X(t){!0!==d[t]&&(e.enable(t),d[t]=!0)}function Y(t){!1!==d[t]&&(e.disable(t),d[t]=!1)}j[3553]=W(3553,3553,1),j[34067]=W(34067,34069,6),o.setClear(0,0,0,1),l.setClear(1),h.setClear(0),X(2929),l.setFunc(3),Q(!1),$(1),X(2884),J(0);const Z={[c]:32774,101:32778,102:32779};if(r)Z[103]=32775,Z[104]=32776;else{const e=t.get("EXT_blend_minmax");null!==e&&(Z[103]=e.MIN_EXT,Z[104]=e.MAX_EXT)}const K={200:0,201:1,202:768,204:770,210:776,208:774,206:772,203:769,205:771,209:775,207:773};function J(t,n,r,o,l,h,d,f){if(0!==t){if(!1===x&&(X(3042),x=!0),5===t)l=l||n,h=h||r,d=d||o,n===M&&l===T||(e.blendEquationSeparate(Z[n],Z[l]),M=n,T=l),r===S&&o===w&&h===E&&d===A||(e.blendFuncSeparate(K[r],K[o],K[h],K[d]),S=r,w=o,E=h,A=d),y=t,L=null;else if(t!==y||f!==L){if(M===c&&T===c||(e.blendEquation(32774),M=c,T=c),f)switch(t){case 1:e.blendFuncSeparate(1,771,1,771);break;case 2:e.blendFunc(1,1);break;case 3:e.blendFuncSeparate(0,769,0,1);break;case 4:e.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case 1:e.blendFuncSeparate(770,771,1,771);break;case 2:e.blendFunc(770,1);break;case 3:e.blendFuncSeparate(0,769,0,1);break;case 4:e.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}S=null,w=null,E=null,A=null,y=t,L=f}}else!0===x&&(Y(3042),x=!1)}function Q(t){C!==t&&(t?e.frontFace(2304):e.frontFace(2305),C=t)}function $(t){0!==t?(X(2884),t!==R&&(1===t?e.cullFace(1029):2===t?e.cullFace(1028):e.cullFace(1032))):Y(2884),R=t}function ee(t,n,r){t?(X(32823),D===n&&I===r||(e.polygonOffset(n,r),D=n,I=r)):Y(32823)}function te(t){void 0===t&&(t=33984+N-1),F!==t&&(e.activeTexture(t),F=t)}return{buffers:{color:o,depth:l,stencil:h},enable:X,disable:Y,bindFramebuffer:function(t,n){return f[t]!==n&&(e.bindFramebuffer(t,n),f[t]=n,r&&(36009===t&&(f[36160]=n),36160===t&&(f[36009]=n)),!0)},drawBuffers:function(r,o){let l=v,c=!1;if(r)if(l=m.get(o),void 0===l&&(l=[],m.set(o,l)),r.isWebGLMultipleRenderTargets){const e=r.texture;if(l.length!==e.length||36064!==l[0]){for(let i=0,t=e.length;i<t;i++)l[i]=36064+i;l.length=e.length,c=!0}}else 36064!==l[0]&&(l[0]=36064,c=!0);else 1029!==l[0]&&(l[0]=1029,c=!0);c&&(n.isWebGL2?e.drawBuffers(l):t.get("WEBGL_draw_buffers").drawBuffersWEBGL(l))},useProgram:function(t){return _!==t&&(e.useProgram(t),_=t,!0)},setBlending:J,setMaterial:function(e,t){2===e.side?Y(2884):X(2884);let n=1===e.side;t&&(n=!n),Q(n),1===e.blending&&!1===e.transparent?J(0):J(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),l.setFunc(e.depthFunc),l.setTest(e.depthTest),l.setMask(e.depthWrite),o.setMask(e.colorWrite);const r=e.stencilWrite;h.setTest(r),r&&(h.setMask(e.stencilWriteMask),h.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),h.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),ee(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage?X(32926):Y(32926)},setFlipSided:Q,setCullFace:$,setLineWidth:function(t){t!==P&&(O&&e.lineWidth(t),P=t)},setPolygonOffset:ee,setScissorTest:function(e){e?X(3089):Y(3089)},activeTexture:te,bindTexture:function(t,n){null===F&&te();let r=B[F];void 0===r&&(r={type:void 0,texture:void 0},B[F]=r),r.type===t&&r.texture===n||(e.bindTexture(t,n||j[t]),r.type=t,r.texture=n)},unbindTexture:function(){const t=B[F];void 0!==t&&void 0!==t.type&&(e.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texStorage2D:function(){try{e.texStorage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texStorage3D:function(){try{e.texStorage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texSubImage2D:function(){try{e.texSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texSubImage3D:function(){try{e.texSubImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexSubImage2D:function(){try{e.compressedTexSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},scissor:function(t){!1===H.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),H.copy(t))},viewport:function(t){!1===G.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),G.copy(t))},reset:function(){e.disable(3042),e.disable(2884),e.disable(2929),e.disable(32823),e.disable(3089),e.disable(2960),e.disable(32926),e.blendEquation(32774),e.blendFunc(1,0),e.blendFuncSeparate(1,0,1,0),e.colorMask(!0,!0,!0,!0),e.clearColor(0,0,0,0),e.depthMask(!0),e.depthFunc(513),e.clearDepth(1),e.stencilMask(4294967295),e.stencilFunc(519,0,4294967295),e.stencilOp(7680,7680,7680),e.clearStencil(0),e.cullFace(1029),e.frontFace(2305),e.polygonOffset(0,0),e.activeTexture(33984),e.bindFramebuffer(36160,null),!0===r&&(e.bindFramebuffer(36009,null),e.bindFramebuffer(36008,null)),e.useProgram(null),e.lineWidth(1),e.scissor(0,0,e.canvas.width,e.canvas.height),e.viewport(0,0,e.canvas.width,e.canvas.height),d={},F=null,B={},f={},m=new WeakMap,v=[],_=null,x=!1,y=null,M=null,S=null,w=null,T=null,E=null,A=null,L=!1,C=null,R=null,P=null,D=null,I=null,H.set(0,0,e.canvas.width,e.canvas.height),G.set(0,0,e.canvas.width,e.canvas.height),o.reset(),l.reset(),h.reset()}}}function Aa(e,t,n,r,o,l,c){const h=o.isWebGL2,d=o.maxTextures,f=o.maxCubemapSize,m=o.maxTextureSize,v=o.maxSamples,O=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,z=/OculusBrowser/g.test(navigator.userAgent),U=new WeakMap;let F;const B=new WeakMap;let k=!1;try{k="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(e){}function V(e,t){return k?new OffscreenCanvas(e,t):pe("canvas")}function H(image,e,t,n){let r=1;if((image.width>n||image.height>n)&&(r=n/Math.max(image.width,image.height)),r<1||!0===e){if("undefined"!=typeof HTMLImageElement&&image instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&image instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&image instanceof ImageBitmap){const n=e?ce:Math.floor,o=n(r*image.width),l=n(r*image.height);void 0===F&&(F=V(o,l));const canvas=t?V(o,l):F;canvas.width=o,canvas.height=l;return canvas.getContext("2d").drawImage(image,0,0,o,l),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+image.width+"x"+image.height+") to ("+o+"x"+l+")."),canvas}return"data"in image&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+image.width+"x"+image.height+")."),image}return image}function G(image){return le(image.width)&&le(image.height)}function W(e,t){return e.generateMipmaps&&t&&e.minFilter!==M&&e.minFilter!==T}function Y(t){e.generateMipmap(t)}function Z(n,r,o,l,c=!1){if(!1===h)return r;if(null!==n){if(void 0!==e[n])return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let d=r;return 6403===r&&(5126===o&&(d=33326),5131===o&&(d=33325),5121===o&&(d=33321)),33319===r&&(5126===o&&(d=33328),5131===o&&(d=33327),5121===o&&(d=33323)),6408===r&&(5126===o&&(d=34836),5131===o&&(d=34842),5121===o&&(d=l===X&&!1===c?35907:32856),32819===o&&(d=32854),32820===o&&(d=32855)),33325!==d&&33326!==d&&33327!==d&&33328!==d&&34842!==d&&34836!==d||t.get("EXT_color_buffer_float"),d}function K(e,image,t){return!0===W(e,t)||e.isFramebufferTexture&&e.minFilter!==M&&e.minFilter!==T?Math.log2(Math.max(image.width,image.height))+1:void 0!==e.mipmaps&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?image.mipmaps.length:1}function J(e){return e===M||e===S||e===w?9728:9729}function Q(e){const t=e.target;t.removeEventListener("dispose",Q),function(e){const t=r.get(e);if(void 0===t.__webglInit)return;const source=e.source,n=B.get(source);if(n){const r=n[t.__cacheKey];r.usedTimes--,0===r.usedTimes&&te(e),0===Object.keys(n).length&&B.delete(source)}r.remove(e)}(t),t.isVideoTexture&&U.delete(t)}function ee(t){const n=t.target;n.removeEventListener("dispose",ee),function(t){const n=t.texture,o=r.get(t),l=r.get(n);void 0!==l.__webglTexture&&(e.deleteTexture(l.__webglTexture),c.memory.textures--);t.depthTexture&&t.depthTexture.dispose();if(t.isWebGLCubeRenderTarget)for(let i=0;i<6;i++)e.deleteFramebuffer(o.__webglFramebuffer[i]),o.__webglDepthbuffer&&e.deleteRenderbuffer(o.__webglDepthbuffer[i]);else{if(e.deleteFramebuffer(o.__webglFramebuffer),o.__webglDepthbuffer&&e.deleteRenderbuffer(o.__webglDepthbuffer),o.__webglMultisampledFramebuffer&&e.deleteFramebuffer(o.__webglMultisampledFramebuffer),o.__webglColorRenderbuffer)for(let i=0;i<o.__webglColorRenderbuffer.length;i++)o.__webglColorRenderbuffer[i]&&e.deleteRenderbuffer(o.__webglColorRenderbuffer[i]);o.__webglDepthRenderbuffer&&e.deleteRenderbuffer(o.__webglDepthRenderbuffer)}if(t.isWebGLMultipleRenderTargets)for(let i=0,t=n.length;i<t;i++){const t=r.get(n[i]);t.__webglTexture&&(e.deleteTexture(t.__webglTexture),c.memory.textures--),r.remove(n[i])}r.remove(n),r.remove(t)}(n)}function te(t){const n=r.get(t);e.deleteTexture(n.__webglTexture);const source=t.source;delete B.get(source)[n.__cacheKey],c.memory.textures--}let ne=0;function ie(e,slot){const t=r.get(e);if(e.isVideoTexture&&function(e){const t=c.render.frame;U.get(e)!==t&&(U.set(e,t),e.update())}(e),!1===e.isRenderTargetTexture&&e.version>0&&t.__version!==e.version){const image=e.image;if(null===image)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==image.complete)return void he(t,e,slot);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(33984+slot),n.bindTexture(3553,t.__webglTexture)}const re={[_]:10497,[x]:33071,[y]:33648},ae={[M]:9728,[S]:9984,[w]:9986,[T]:9729,1007:9985,[E]:9987};function se(n,l,c){if(c?(e.texParameteri(n,10242,re[l.wrapS]),e.texParameteri(n,10243,re[l.wrapT]),32879!==n&&35866!==n||e.texParameteri(n,32882,re[l.wrapR]),e.texParameteri(n,10240,ae[l.magFilter]),e.texParameteri(n,10241,ae[l.minFilter])):(e.texParameteri(n,10242,33071),e.texParameteri(n,10243,33071),32879!==n&&35866!==n||e.texParameteri(n,32882,33071),l.wrapS===x&&l.wrapT===x||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(n,10240,J(l.magFilter)),e.texParameteri(n,10241,J(l.minFilter)),l.minFilter!==M&&l.minFilter!==T&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===t.has("EXT_texture_filter_anisotropic")){const c=t.get("EXT_texture_filter_anisotropic");if(l.type===C&&!1===t.has("OES_texture_float_linear"))return;if(!1===h&&l.type===R&&!1===t.has("OES_texture_half_float_linear"))return;(l.anisotropy>1||r.get(l).__currentAnisotropy)&&(e.texParameterf(n,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(l.anisotropy,o.getMaxAnisotropy())),r.get(l).__currentAnisotropy=l.anisotropy)}}function oe(t,n){let r=!1;void 0===t.__webglInit&&(t.__webglInit=!0,n.addEventListener("dispose",Q));const source=n.source;let o=B.get(source);void 0===o&&(o={},B.set(source,o));const l=function(e){const t=[];return t.push(e.wrapS),t.push(e.wrapT),t.push(e.magFilter),t.push(e.minFilter),t.push(e.anisotropy),t.push(e.internalFormat),t.push(e.format),t.push(e.type),t.push(e.generateMipmaps),t.push(e.premultiplyAlpha),t.push(e.flipY),t.push(e.unpackAlignment),t.push(e.encoding),t.join()}(n);if(l!==t.__cacheKey){void 0===o[l]&&(o[l]={texture:e.createTexture(),usedTimes:0},c.memory.textures++,r=!0),o[l].usedTimes++;const h=o[t.__cacheKey];void 0!==h&&(o[t.__cacheKey].usedTimes--,0===h.usedTimes&&te(n)),t.__cacheKey=l,t.__webglTexture=o[l].texture}return r}function he(t,r,slot){let o=3553;r.isDataArrayTexture&&(o=35866),r.isData3DTexture&&(o=32879);const c=oe(t,r),source=r.source;if(n.activeTexture(33984+slot),n.bindTexture(o,t.__webglTexture),source.version!==source.__currentVersion||!0===c){e.pixelStorei(37440,r.flipY),e.pixelStorei(37441,r.premultiplyAlpha),e.pixelStorei(3317,r.unpackAlignment),e.pixelStorei(37443,0);const t=function(e){return!h&&(e.wrapS!==x||e.wrapT!==x||e.minFilter!==M&&e.minFilter!==T)}(r)&&!1===G(r.image);let image=H(r.image,t,!1,m);image=ve(r,image);const d=G(image)||h,f=l.convert(r.format,r.encoding);let v,_=l.convert(r.type),y=Z(r.internalFormat,f,_,r.encoding,r.isVideoTexture);se(o,r,d);const S=r.mipmaps,w=h&&!0!==r.isVideoTexture,E=void 0===source.__currentVersion||!0===c,A=K(r,image,d);if(r.isDepthTexture)y=6402,h?y=r.type===C?36012:r.type===L?33190:r.type===P?35056:33189:r.type===C&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),r.format===I&&6402===y&&1012!==r.type&&r.type!==L&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),r.type=L,_=l.convert(r.type)),r.format===N&&6402===y&&(y=34041,r.type!==P&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),r.type=P,_=l.convert(r.type))),E&&(w?n.texStorage2D(3553,1,y,image.width,image.height):n.texImage2D(3553,0,y,image.width,image.height,0,f,_,null));else if(r.isDataTexture)if(S.length>0&&d){w&&E&&n.texStorage2D(3553,A,y,S[0].width,S[0].height);for(let i=0,e=S.length;i<e;i++)v=S[i],w?n.texSubImage2D(3553,i,0,0,v.width,v.height,f,_,v.data):n.texImage2D(3553,i,y,v.width,v.height,0,f,_,v.data);r.generateMipmaps=!1}else w?(E&&n.texStorage2D(3553,A,y,image.width,image.height),n.texSubImage2D(3553,0,0,0,image.width,image.height,f,_,image.data)):n.texImage2D(3553,0,y,image.width,image.height,0,f,_,image.data);else if(r.isCompressedTexture){w&&E&&n.texStorage2D(3553,A,y,S[0].width,S[0].height);for(let i=0,e=S.length;i<e;i++)v=S[i],r.format!==D?null!==f?w?n.compressedTexSubImage2D(3553,i,0,0,v.width,v.height,f,v.data):n.compressedTexImage2D(3553,i,y,v.width,v.height,0,v.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):w?n.texSubImage2D(3553,i,0,0,v.width,v.height,f,_,v.data):n.texImage2D(3553,i,y,v.width,v.height,0,f,_,v.data)}else if(r.isDataArrayTexture)w?(E&&n.texStorage3D(35866,A,y,image.width,image.height,image.depth),n.texSubImage3D(35866,0,0,0,0,image.width,image.height,image.depth,f,_,image.data)):n.texImage3D(35866,0,y,image.width,image.height,image.depth,0,f,_,image.data);else if(r.isData3DTexture)w?(E&&n.texStorage3D(32879,A,y,image.width,image.height,image.depth),n.texSubImage3D(32879,0,0,0,0,image.width,image.height,image.depth,f,_,image.data)):n.texImage3D(32879,0,y,image.width,image.height,image.depth,0,f,_,image.data);else if(r.isFramebufferTexture){if(E)if(w)n.texStorage2D(3553,A,y,image.width,image.height);else{let e=image.width,t=image.height;for(let i=0;i<A;i++)n.texImage2D(3553,i,y,e,t,0,f,_,null),e>>=1,t>>=1}}else if(S.length>0&&d){w&&E&&n.texStorage2D(3553,A,y,S[0].width,S[0].height);for(let i=0,e=S.length;i<e;i++)v=S[i],w?n.texSubImage2D(3553,i,0,0,f,_,v):n.texImage2D(3553,i,y,f,_,v);r.generateMipmaps=!1}else w?(E&&n.texStorage2D(3553,A,y,image.width,image.height),n.texSubImage2D(3553,0,0,0,f,_,image)):n.texImage2D(3553,0,y,f,_,image);W(r,d)&&Y(o),source.__currentVersion=source.version,r.onUpdate&&r.onUpdate(r)}t.__version=r.version}function ue(t,o,c,h,d){const f=l.convert(c.format,c.encoding),m=l.convert(c.type),v=Z(c.internalFormat,f,m,c.encoding);r.get(o).__hasExternalTextures||(32879===d||35866===d?n.texImage3D(d,0,v,o.width,o.height,o.depth,0,f,m,null):n.texImage2D(d,0,v,o.width,o.height,0,f,m,null)),n.bindFramebuffer(36160,t),ge(o)?O.framebufferTexture2DMultisampleEXT(36160,h,d,r.get(c).__webglTexture,0,me(o)):e.framebufferTexture2D(36160,h,d,r.get(c).__webglTexture,0),n.bindFramebuffer(36160,null)}function de(t,n,r){if(e.bindRenderbuffer(36161,t),n.depthBuffer&&!n.stencilBuffer){let o=33189;if(r||ge(n)){const t=n.depthTexture;t&&t.isDepthTexture&&(t.type===C?o=36012:t.type===L&&(o=33190));const r=me(n);ge(n)?O.renderbufferStorageMultisampleEXT(36161,r,o,n.width,n.height):e.renderbufferStorageMultisample(36161,r,o,n.width,n.height)}else e.renderbufferStorage(36161,o,n.width,n.height);e.framebufferRenderbuffer(36160,36096,36161,t)}else if(n.depthBuffer&&n.stencilBuffer){const o=me(n);r&&!1===ge(n)?e.renderbufferStorageMultisample(36161,o,35056,n.width,n.height):ge(n)?O.renderbufferStorageMultisampleEXT(36161,o,35056,n.width,n.height):e.renderbufferStorage(36161,34041,n.width,n.height),e.framebufferRenderbuffer(36160,33306,36161,t)}else{const t=!0===n.isWebGLMultipleRenderTargets?n.texture:[n.texture];for(let i=0;i<t.length;i++){const o=t[i],c=l.convert(o.format,o.encoding),h=l.convert(o.type),d=Z(o.internalFormat,c,h,o.encoding),f=me(n);r&&!1===ge(n)?e.renderbufferStorageMultisample(36161,f,d,n.width,n.height):ge(n)?O.renderbufferStorageMultisampleEXT(36161,f,d,n.width,n.height):e.renderbufferStorage(36161,d,n.width,n.height)}}e.bindRenderbuffer(36161,null)}function fe(t){const o=r.get(t),l=!0===t.isWebGLCubeRenderTarget;if(t.depthTexture&&!o.__autoAllocateDepthBuffer){if(l)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,o){if(o&&o.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(36160,t),!o.depthTexture||!o.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");r.get(o.depthTexture).__webglTexture&&o.depthTexture.image.width===o.width&&o.depthTexture.image.height===o.height||(o.depthTexture.image.width=o.width,o.depthTexture.image.height=o.height,o.depthTexture.needsUpdate=!0),ie(o.depthTexture,0);const l=r.get(o.depthTexture).__webglTexture,c=me(o);if(o.depthTexture.format===I)ge(o)?O.framebufferTexture2DMultisampleEXT(36160,36096,3553,l,0,c):e.framebufferTexture2D(36160,36096,3553,l,0);else{if(o.depthTexture.format!==N)throw new Error("Unknown depthTexture format");ge(o)?O.framebufferTexture2DMultisampleEXT(36160,33306,3553,l,0,c):e.framebufferTexture2D(36160,33306,3553,l,0)}}(o.__webglFramebuffer,t)}else if(l){o.__webglDepthbuffer=[];for(let i=0;i<6;i++)n.bindFramebuffer(36160,o.__webglFramebuffer[i]),o.__webglDepthbuffer[i]=e.createRenderbuffer(),de(o.__webglDepthbuffer[i],t,!1)}else n.bindFramebuffer(36160,o.__webglFramebuffer),o.__webglDepthbuffer=e.createRenderbuffer(),de(o.__webglDepthbuffer,t,!1);n.bindFramebuffer(36160,null)}function me(e){return Math.min(v,e.samples)}function ge(e){const n=r.get(e);return h&&e.samples>0&&!0===t.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function ve(e,image){const n=e.encoding,r=e.format,o=e.type;return!0===e.isCompressedTexture||!0===e.isVideoTexture||e.format===$||n!==j&&(n===X?!1===h?!0===t.has("EXT_sRGB")&&r===D?(e.format=$,e.minFilter=T,e.generateMipmaps=!1):image=Ee.sRGBToLinear(image):r===D&&o===A||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",n)),image}this.allocateTextureUnit=function(){const e=ne;return e>=d&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+d),ne+=1,e},this.resetTextureUnits=function(){ne=0},this.setTexture2D=ie,this.setTexture2DArray=function(e,slot){const t=r.get(e);e.version>0&&t.__version!==e.version?he(t,e,slot):(n.activeTexture(33984+slot),n.bindTexture(35866,t.__webglTexture))},this.setTexture3D=function(e,slot){const t=r.get(e);e.version>0&&t.__version!==e.version?he(t,e,slot):(n.activeTexture(33984+slot),n.bindTexture(32879,t.__webglTexture))},this.setTextureCube=function(t,slot){const o=r.get(t);t.version>0&&o.__version!==t.version?function(t,r,slot){if(6!==r.image.length)return;const o=oe(t,r),source=r.source;if(n.activeTexture(33984+slot),n.bindTexture(34067,t.__webglTexture),source.version!==source.__currentVersion||!0===o){e.pixelStorei(37440,r.flipY),e.pixelStorei(37441,r.premultiplyAlpha),e.pixelStorei(3317,r.unpackAlignment),e.pixelStorei(37443,0);const t=r.isCompressedTexture||r.image[0].isCompressedTexture,c=r.image[0]&&r.image[0].isDataTexture,d=[];for(let i=0;i<6;i++)d[i]=t||c?c?r.image[i].image:r.image[i]:H(r.image[i],!1,!0,f),d[i]=ve(r,d[i]);const image=d[0],m=G(image)||h,v=l.convert(r.format,r.encoding),_=l.convert(r.type),x=Z(r.internalFormat,v,_,r.encoding),y=h&&!0!==r.isVideoTexture,M=void 0===source.__currentVersion||!0===o;let S,w=K(r,image,m);if(se(34067,r,m),t){y&&M&&n.texStorage2D(34067,w,x,image.width,image.height);for(let i=0;i<6;i++){S=d[i].mipmaps;for(let e=0;e<S.length;e++){const t=S[e];r.format!==D?null!==v?y?n.compressedTexSubImage2D(34069+i,e,0,0,t.width,t.height,v,t.data):n.compressedTexImage2D(34069+i,e,x,t.width,t.height,0,t.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):y?n.texSubImage2D(34069+i,e,0,0,t.width,t.height,v,_,t.data):n.texImage2D(34069+i,e,x,t.width,t.height,0,v,_,t.data)}}}else{S=r.mipmaps,y&&M&&(S.length>0&&w++,n.texStorage2D(34067,w,x,d[0].width,d[0].height));for(let i=0;i<6;i++)if(c){y?n.texSubImage2D(34069+i,0,0,0,d[i].width,d[i].height,v,_,d[i].data):n.texImage2D(34069+i,0,x,d[i].width,d[i].height,0,v,_,d[i].data);for(let e=0;e<S.length;e++){const t=S[e].image[i].image;y?n.texSubImage2D(34069+i,e+1,0,0,t.width,t.height,v,_,t.data):n.texImage2D(34069+i,e+1,x,t.width,t.height,0,v,_,t.data)}}else{y?n.texSubImage2D(34069+i,0,0,0,v,_,d[i]):n.texImage2D(34069+i,0,x,v,_,d[i]);for(let e=0;e<S.length;e++){const t=S[e];y?n.texSubImage2D(34069+i,e+1,0,0,v,_,t.image[i]):n.texImage2D(34069+i,e+1,x,v,_,t.image[i])}}}W(r,m)&&Y(34067),source.__currentVersion=source.version,r.onUpdate&&r.onUpdate(r)}t.__version=r.version}(o,t,slot):(n.activeTexture(33984+slot),n.bindTexture(34067,o.__webglTexture))},this.rebindTextures=function(e,t,n){const o=r.get(e);void 0!==t&&ue(o.__webglFramebuffer,e,e.texture,36064,3553),void 0!==n&&fe(e)},this.setupRenderTarget=function(t){const d=t.texture,f=r.get(t),m=r.get(d);t.addEventListener("dispose",ee),!0!==t.isWebGLMultipleRenderTargets&&(void 0===m.__webglTexture&&(m.__webglTexture=e.createTexture()),m.__version=d.version,c.memory.textures++);const v=!0===t.isWebGLCubeRenderTarget,_=!0===t.isWebGLMultipleRenderTargets,x=G(t)||h;if(v){f.__webglFramebuffer=[];for(let i=0;i<6;i++)f.__webglFramebuffer[i]=e.createFramebuffer()}else{if(f.__webglFramebuffer=e.createFramebuffer(),_)if(o.drawBuffers){const n=t.texture;for(let i=0,t=n.length;i<t;i++){const t=r.get(n[i]);void 0===t.__webglTexture&&(t.__webglTexture=e.createTexture(),c.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(h&&t.samples>0&&!1===ge(t)){const r=_?d:[d];f.__webglMultisampledFramebuffer=e.createFramebuffer(),f.__webglColorRenderbuffer=[],n.bindFramebuffer(36160,f.__webglMultisampledFramebuffer);for(let i=0;i<r.length;i++){const n=r[i];f.__webglColorRenderbuffer[i]=e.createRenderbuffer(),e.bindRenderbuffer(36161,f.__webglColorRenderbuffer[i]);const o=l.convert(n.format,n.encoding),c=l.convert(n.type),h=Z(n.internalFormat,o,c,n.encoding),d=me(t);e.renderbufferStorageMultisample(36161,d,h,t.width,t.height),e.framebufferRenderbuffer(36160,36064+i,36161,f.__webglColorRenderbuffer[i])}e.bindRenderbuffer(36161,null),t.depthBuffer&&(f.__webglDepthRenderbuffer=e.createRenderbuffer(),de(f.__webglDepthRenderbuffer,t,!0)),n.bindFramebuffer(36160,null)}}if(v){n.bindTexture(34067,m.__webglTexture),se(34067,d,x);for(let i=0;i<6;i++)ue(f.__webglFramebuffer[i],t,d,36064,34069+i);W(d,x)&&Y(34067),n.unbindTexture()}else if(_){const e=t.texture;for(let i=0,o=e.length;i<o;i++){const o=e[i],l=r.get(o);n.bindTexture(3553,l.__webglTexture),se(3553,o,x),ue(f.__webglFramebuffer,t,o,36064+i,3553),W(o,x)&&Y(3553)}n.unbindTexture()}else{let e=3553;(t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(h?e=t.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),n.bindTexture(e,m.__webglTexture),se(e,d,x),ue(f.__webglFramebuffer,t,d,36064,e),W(d,x)&&Y(e),n.unbindTexture()}t.depthBuffer&&fe(t)},this.updateRenderTargetMipmap=function(e){const t=G(e)||h,o=!0===e.isWebGLMultipleRenderTargets?e.texture:[e.texture];for(let i=0,l=o.length;i<l;i++){const l=o[i];if(W(l,t)){const t=e.isWebGLCubeRenderTarget?34067:3553,o=r.get(l).__webglTexture;n.bindTexture(t,o),Y(t),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(t){if(h&&t.samples>0&&!1===ge(t)){const o=t.isWebGLMultipleRenderTargets?t.texture:[t.texture],l=t.width,c=t.height;let mask=16384;const h=[],d=t.stencilBuffer?33306:36096,f=r.get(t),m=!0===t.isWebGLMultipleRenderTargets;if(m)for(let i=0;i<o.length;i++)n.bindFramebuffer(36160,f.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(36160,36064+i,36161,null),n.bindFramebuffer(36160,f.__webglFramebuffer),e.framebufferTexture2D(36009,36064+i,3553,null,0);n.bindFramebuffer(36008,f.__webglMultisampledFramebuffer),n.bindFramebuffer(36009,f.__webglFramebuffer);for(let i=0;i<o.length;i++){h.push(36064+i),t.depthBuffer&&h.push(d);const n=void 0!==f.__ignoreDepthValues&&f.__ignoreDepthValues;if(!1===n&&(t.depthBuffer&&(mask|=256),t.stencilBuffer&&(mask|=1024)),m&&e.framebufferRenderbuffer(36008,36064,36161,f.__webglColorRenderbuffer[i]),!0===n&&(e.invalidateFramebuffer(36008,[d]),e.invalidateFramebuffer(36009,[d])),m){const t=r.get(o[i]).__webglTexture;e.framebufferTexture2D(36009,36064,3553,t,0)}e.blitFramebuffer(0,0,l,c,0,0,l,c,mask,9728),z&&e.invalidateFramebuffer(36008,h)}if(n.bindFramebuffer(36008,null),n.bindFramebuffer(36009,null),m)for(let i=0;i<o.length;i++){n.bindFramebuffer(36160,f.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(36160,36064+i,36161,f.__webglColorRenderbuffer[i]);const t=r.get(o[i]).__webglTexture;n.bindFramebuffer(36160,f.__webglFramebuffer),e.framebufferTexture2D(36009,36064+i,3553,t,0)}n.bindFramebuffer(36009,f.__webglMultisampledFramebuffer)}},this.setupDepthRenderbuffer=fe,this.setupFrameBufferTexture=ue,this.useMultisampledRTT=ge}function La(e,t,n){const r=n.isWebGL2;return{convert:function(p,n=null){let o;if(p===A)return 5121;if(1017===p)return 32819;if(1018===p)return 32820;if(1010===p)return 5120;if(1011===p)return 5122;if(1012===p)return 5123;if(1013===p)return 5124;if(p===L)return 5125;if(p===C)return 5126;if(p===R)return r?5131:(o=t.get("OES_texture_half_float"),null!==o?o.HALF_FLOAT_OES:null);if(1021===p)return 6406;if(p===D)return 6408;if(1024===p)return 6409;if(1025===p)return 6410;if(p===I)return 6402;if(p===N)return 34041;if(1028===p)return 6403;if(1022===p)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(p===$)return o=t.get("EXT_sRGB"),null!==o?o.SRGB_ALPHA_EXT:null;if(1029===p)return 36244;if(1030===p)return 33319;if(1031===p)return 33320;if(1033===p)return 36249;if(p===O||p===z||p===U||p===F)if(n===X){if(o=t.get("WEBGL_compressed_texture_s3tc_srgb"),null===o)return null;if(p===O)return o.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(p===z)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(p===U)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(p===F)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(o=t.get("WEBGL_compressed_texture_s3tc"),null===o)return null;if(p===O)return o.COMPRESSED_RGB_S3TC_DXT1_EXT;if(p===z)return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(p===U)return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(p===F)return o.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===p||35841===p||35842===p||35843===p){if(o=t.get("WEBGL_compressed_texture_pvrtc"),null===o)return null;if(35840===p)return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===p)return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===p)return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===p)return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===p)return o=t.get("WEBGL_compressed_texture_etc1"),null!==o?o.COMPRESSED_RGB_ETC1_WEBGL:null;if(37492===p||37496===p){if(o=t.get("WEBGL_compressed_texture_etc"),null===o)return null;if(37492===p)return n===X?o.COMPRESSED_SRGB8_ETC2:o.COMPRESSED_RGB8_ETC2;if(37496===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:o.COMPRESSED_RGBA8_ETC2_EAC}if(37808===p||37809===p||37810===p||37811===p||37812===p||37813===p||37814===p||37815===p||37816===p||37817===p||37818===p||37819===p||37820===p||37821===p){if(o=t.get("WEBGL_compressed_texture_astc"),null===o)return null;if(37808===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:o.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:o.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:o.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:o.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:o.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:o.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:o.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:o.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:o.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:o.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:o.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:o.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:o.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===p)return n===X?o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:o.COMPRESSED_RGBA_ASTC_12x12_KHR}if(36492===p){if(o=t.get("EXT_texture_compression_bptc"),null===o)return null;if(36492===p)return n===X?o.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:o.COMPRESSED_RGBA_BPTC_UNORM_EXT}return p===P?r?34042:(o=t.get("WEBGL_depth_texture"),null!==o?o.UNSIGNED_INT_24_8_WEBGL:null):void 0!==e[p]?e[p]:null}}}class Ca extends Vn{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class Ra extends kt{constructor(){super(),this.isGroup=!0,this.type="Group"}}const Pa={type:"move"};class Da{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new Ra,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new Ra,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new ze,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new ze),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new Ra,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new ze,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new ze),this._grip}dispatchEvent(e){return null!==this._targetRay&&this._targetRay.dispatchEvent(e),null!==this._grip&&this._grip.dispatchEvent(e),null!==this._hand&&this._hand.dispatchEvent(e),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(e,t,n){let r=null,o=null,l=null;const c=this._targetRay,h=this._grip,d=this._hand;if(e&&"visible-blurred"!==t.session.visibilityState)if(null!==c&&(r=t.getPose(e.targetRaySpace,n),null!==r&&(c.matrix.fromArray(r.transform.matrix),c.matrix.decompose(c.position,c.rotation,c.scale),r.linearVelocity?(c.hasLinearVelocity=!0,c.linearVelocity.copy(r.linearVelocity)):c.hasLinearVelocity=!1,r.angularVelocity?(c.hasAngularVelocity=!0,c.angularVelocity.copy(r.angularVelocity)):c.hasAngularVelocity=!1,this.dispatchEvent(Pa))),d&&e.hand){l=!0;for(const r of e.hand.values()){const e=t.getJointPose(r,n);if(void 0===d.joints[r.jointName]){const e=new Ra;e.matrixAutoUpdate=!1,e.visible=!1,d.joints[r.jointName]=e,d.add(e)}const o=d.joints[r.jointName];null!==e&&(o.matrix.fromArray(e.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.jointRadius=e.radius),o.visible=null!==e}const r=d.joints["index-finger-tip"],o=d.joints["thumb-tip"],c=r.position.distanceTo(o.position),h=.02,f=.005;d.inputState.pinching&&c>h+f?(d.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!d.inputState.pinching&&c<=h-f&&(d.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else null!==h&&e.gripSpace&&(o=t.getPose(e.gripSpace,n),null!==o&&(h.matrix.fromArray(o.transform.matrix),h.matrix.decompose(h.position,h.rotation,h.scale),o.linearVelocity?(h.hasLinearVelocity=!0,h.linearVelocity.copy(o.linearVelocity)):h.hasLinearVelocity=!1,o.angularVelocity?(h.hasAngularVelocity=!0,h.angularVelocity.copy(o.angularVelocity)):h.hasAngularVelocity=!1));return null!==c&&(c.visible=null!==r),null!==h&&(h.visible=null!==o),null!==d&&(d.visible=null!==l),this}}class Ia extends Re{constructor(e,t,n,r,o,l,c,h,d,f){if((f=void 0!==f?f:I)!==I&&f!==N)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&f===I&&(n=L),void 0===n&&f===N&&(n=P),super(null,r,o,l,c,h,f,n,d),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=void 0!==c?c:M,this.minFilter=void 0!==h?h:M,this.flipY=!1,this.generateMipmaps=!1}}class Na extends ee{constructor(e,t){super();const n=this;let r=null,o=1,l=null,c="local-floor",h=null,d=null,f=null,m=null,v=null,_=null;const x=t.getContextAttributes();let y=null,M=null;const S=[],w=new Map,T=new Vn;T.layers.enable(1),T.viewport=new Pe;const E=new Vn;E.layers.enable(2),E.viewport=new Pe;const C=[T,E],R=new Ca;R.layers.enable(1),R.layers.enable(2);let O=null,z=null;function U(e){const t=w.get(e.inputSource);void 0!==t&&t.dispatchEvent({type:e.type,data:e.inputSource})}function F(){r.removeEventListener("select",U),r.removeEventListener("selectstart",U),r.removeEventListener("selectend",U),r.removeEventListener("squeeze",U),r.removeEventListener("squeezestart",U),r.removeEventListener("squeezeend",U),r.removeEventListener("end",F),r.removeEventListener("inputsourceschange",B),w.forEach((function(e,t){void 0!==e&&e.disconnect(t)})),w.clear(),O=null,z=null,e.setRenderTarget(y),v=null,m=null,f=null,r=null,M=null,W.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}function B(e){const t=r.inputSources;for(let i=0;i<t.length;i++){const e="right"===t[i].handedness?1:0;w.set(t[i],S[e])}for(let i=0;i<e.removed.length;i++){const t=e.removed[i],n=w.get(t);n&&(n.dispatchEvent({type:"disconnected",data:t}),w.delete(t))}for(let i=0;i<e.added.length;i++){const t=e.added[i],n=w.get(t);n&&n.dispatchEvent({type:"connected",data:t})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=S[e];return void 0===t&&(t=new Da,S[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=S[e];return void 0===t&&(t=new Da,S[e]=t),t.getGripSpace()},this.getHand=function(e){let t=S[e];return void 0===t&&(t=new Da,S[e]=t),t.getHandSpace()},this.setFramebufferScaleFactor=function(e){o=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(e){c=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return h||l},this.setReferenceSpace=function(e){h=e},this.getBaseLayer=function(){return null!==m?m:v},this.getBinding=function(){return f},this.getFrame=function(){return _},this.getSession=function(){return r},this.setSession=async function(d){if(r=d,null!==r){if(y=e.getRenderTarget(),r.addEventListener("select",U),r.addEventListener("selectstart",U),r.addEventListener("selectend",U),r.addEventListener("squeeze",U),r.addEventListener("squeezestart",U),r.addEventListener("squeezeend",U),r.addEventListener("end",F),r.addEventListener("inputsourceschange",B),!0!==x.xrCompatible&&await t.makeXRCompatible(),void 0===r.renderState.layers||!1===e.capabilities.isWebGL2){const n={antialias:void 0!==r.renderState.layers||x.antialias,alpha:x.alpha,depth:x.depth,stencil:x.stencil,framebufferScaleFactor:o};v=new XRWebGLLayer(r,t,n),r.updateRenderState({baseLayer:v}),M=new De(v.framebufferWidth,v.framebufferHeight,{format:D,type:A,encoding:e.outputEncoding})}else{let n=null,l=null,c=null;x.depth&&(c=x.stencil?35056:33190,n=x.stencil?N:I,l=x.stencil?P:L);const h={colorFormat:e.outputEncoding===X?35907:32856,depthFormat:c,scaleFactor:o};f=new XRWebGLBinding(r,t),m=f.createProjectionLayer(h),r.updateRenderState({layers:[m]}),M=new De(m.textureWidth,m.textureHeight,{format:D,type:A,depthTexture:new Ia(m.textureWidth,m.textureHeight,l,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:x.stencil,encoding:e.outputEncoding,samples:x.antialias?4:0});e.properties.get(M).__ignoreDepthValues=m.ignoreDepthValues}M.isXRRenderTarget=!0,this.setFoveation(1),h=null,l=await r.requestReferenceSpace(c),W.setContext(r),W.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};const k=new ze,V=new ze;function H(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.updateCamera=function(e){if(null===r)return;R.near=E.near=T.near=e.near,R.far=E.far=T.far=e.far,O===R.near&&z===R.far||(r.updateRenderState({depthNear:R.near,depthFar:R.far}),O=R.near,z=R.far);const t=e.parent,n=R.cameras;H(R,t);for(let i=0;i<n.length;i++)H(n[i],t);R.matrixWorld.decompose(R.position,R.quaternion,R.scale),e.position.copy(R.position),e.quaternion.copy(R.quaternion),e.scale.copy(R.scale),e.matrix.copy(R.matrix),e.matrixWorld.copy(R.matrixWorld);const o=e.children;for(let i=0,e=o.length;i<e;i++)o[i].updateMatrixWorld(!0);2===n.length?function(e,t,n){k.setFromMatrixPosition(t.matrixWorld),V.setFromMatrixPosition(n.matrixWorld);const r=k.distanceTo(V),o=t.projectionMatrix.elements,l=n.projectionMatrix.elements,c=o[14]/(o[10]-1),h=o[14]/(o[10]+1),d=(o[9]+1)/o[5],f=(o[9]-1)/o[5],m=(o[8]-1)/o[0],v=(l[8]+1)/l[0],_=c*m,x=c*v,y=r/(-m+v),M=y*-m;t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(M),e.translateZ(y),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert();const S=c+y,w=h+y,T=_-M,E=x+(r-M),A=d*h/w*S,L=f*h/w*S;e.projectionMatrix.makePerspective(T,E,A,L,S,w)}(R,T,E):R.projectionMatrix.copy(T.projectionMatrix)},this.getCamera=function(){return R},this.getFoveation=function(){return null!==m?m.fixedFoveation:null!==v?v.fixedFoveation:void 0},this.setFoveation=function(e){null!==m&&(m.fixedFoveation=e),null!==v&&void 0!==v.fixedFoveation&&(v.fixedFoveation=e)};let G=null;const W=new $n;W.setAnimationLoop((function(time,t){if(d=t.getViewerPose(h||l),_=t,null!==d){const t=d.views;null!==v&&(e.setRenderTargetFramebuffer(M,v.framebuffer),e.setRenderTarget(M));let n=!1;t.length!==R.cameras.length&&(R.cameras.length=0,n=!0);for(let i=0;i<t.length;i++){const view=t[i];let r=null;if(null!==v)r=v.getViewport(view);else{const t=f.getViewSubImage(m,view);r=t.viewport,0===i&&(e.setRenderTargetTextures(M,t.colorTexture,m.ignoreDepthValues?void 0:t.depthStencilTexture),e.setRenderTarget(M))}let o=C[i];void 0===o&&(o=new Vn,o.layers.enable(i),o.viewport=new Pe,C[i]=o),o.matrix.fromArray(view.transform.matrix),o.projectionMatrix.fromArray(view.projectionMatrix),o.viewport.set(r.x,r.y,r.width,r.height),0===i&&R.matrix.copy(o.matrix),!0===n&&R.cameras.push(o)}}const n=r.inputSources;for(let i=0;i<S.length;i++){const e=n[i],r=w.get(e);void 0!==r&&r.update(e,t,h||l)}G&&G(time,t),_=null})),this.setAnimationLoop=function(e){G=e},this.dispose=function(){}}}function Oa(e,t){function n(n,r){n.opacity.value=r.opacity,r.color&&n.diffuse.value.copy(r.color),r.emissive&&n.emissive.value.copy(r.emissive).multiplyScalar(r.emissiveIntensity),r.map&&(n.map.value=r.map),r.alphaMap&&(n.alphaMap.value=r.alphaMap),r.bumpMap&&(n.bumpMap.value=r.bumpMap,n.bumpScale.value=r.bumpScale,1===r.side&&(n.bumpScale.value*=-1)),r.displacementMap&&(n.displacementMap.value=r.displacementMap,n.displacementScale.value=r.displacementScale,n.displacementBias.value=r.displacementBias),r.emissiveMap&&(n.emissiveMap.value=r.emissiveMap),r.normalMap&&(n.normalMap.value=r.normalMap,n.normalScale.value.copy(r.normalScale),1===r.side&&n.normalScale.value.negate()),r.specularMap&&(n.specularMap.value=r.specularMap),r.alphaTest>0&&(n.alphaTest.value=r.alphaTest);const o=t.get(r).envMap;if(o&&(n.envMap.value=o,n.flipEnvMap.value=o.isCubeTexture&&!1===o.isRenderTargetTexture?-1:1,n.reflectivity.value=r.reflectivity,n.ior.value=r.ior,n.refractionRatio.value=r.refractionRatio),r.lightMap){n.lightMap.value=r.lightMap;const t=!0!==e.physicallyCorrectLights?Math.PI:1;n.lightMapIntensity.value=r.lightMapIntensity*t}let l,c;r.aoMap&&(n.aoMap.value=r.aoMap,n.aoMapIntensity.value=r.aoMapIntensity),r.map?l=r.map:r.specularMap?l=r.specularMap:r.displacementMap?l=r.displacementMap:r.normalMap?l=r.normalMap:r.bumpMap?l=r.bumpMap:r.roughnessMap?l=r.roughnessMap:r.metalnessMap?l=r.metalnessMap:r.alphaMap?l=r.alphaMap:r.emissiveMap?l=r.emissiveMap:r.clearcoatMap?l=r.clearcoatMap:r.clearcoatNormalMap?l=r.clearcoatNormalMap:r.clearcoatRoughnessMap?l=r.clearcoatRoughnessMap:r.iridescenceMap?l=r.iridescenceMap:r.iridescenceThicknessMap?l=r.iridescenceThicknessMap:r.specularIntensityMap?l=r.specularIntensityMap:r.specularColorMap?l=r.specularColorMap:r.transmissionMap?l=r.transmissionMap:r.thicknessMap?l=r.thicknessMap:r.sheenColorMap?l=r.sheenColorMap:r.sheenRoughnessMap&&(l=r.sheenRoughnessMap),void 0!==l&&(l.isWebGLRenderTarget&&(l=l.texture),!0===l.matrixAutoUpdate&&l.updateMatrix(),n.uvTransform.value.copy(l.matrix)),r.aoMap?c=r.aoMap:r.lightMap&&(c=r.lightMap),void 0!==c&&(c.isWebGLRenderTarget&&(c=c.texture),!0===c.matrixAutoUpdate&&c.updateMatrix(),n.uv2Transform.value.copy(c.matrix))}return{refreshFogUniforms:function(e,t){e.fogColor.value.copy(t.color),t.isFog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t.isFogExp2&&(e.fogDensity.value=t.density)},refreshMaterialUniforms:function(e,r,o,l,c){r.isMeshBasicMaterial||r.isMeshLambertMaterial?n(e,r):r.isMeshToonMaterial?(n(e,r),function(e,t){t.gradientMap&&(e.gradientMap.value=t.gradientMap)}(e,r)):r.isMeshPhongMaterial?(n(e,r),function(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4)}(e,r)):r.isMeshStandardMaterial?(n(e,r),function(e,n){e.roughness.value=n.roughness,e.metalness.value=n.metalness,n.roughnessMap&&(e.roughnessMap.value=n.roughnessMap);n.metalnessMap&&(e.metalnessMap.value=n.metalnessMap);t.get(n).envMap&&(e.envMapIntensity.value=n.envMapIntensity)}(e,r),r.isMeshPhysicalMaterial&&function(e,t,n){e.ior.value=t.ior,t.sheen>0&&(e.sheenColor.value.copy(t.sheenColor).multiplyScalar(t.sheen),e.sheenRoughness.value=t.sheenRoughness,t.sheenColorMap&&(e.sheenColorMap.value=t.sheenColorMap),t.sheenRoughnessMap&&(e.sheenRoughnessMap.value=t.sheenRoughnessMap));t.clearcoat>0&&(e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.clearcoatMap&&(e.clearcoatMap.value=t.clearcoatMap),t.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap),t.clearcoatNormalMap&&(e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),e.clearcoatNormalMap.value=t.clearcoatNormalMap,1===t.side&&e.clearcoatNormalScale.value.negate()));t.iridescence>0&&(e.iridescence.value=t.iridescence,e.iridescenceIOR.value=t.iridescenceIOR,e.iridescenceThicknessMinimum.value=t.iridescenceThicknessRange[0],e.iridescenceThicknessMaximum.value=t.iridescenceThicknessRange[1],t.iridescenceMap&&(e.iridescenceMap.value=t.iridescenceMap),t.iridescenceThicknessMap&&(e.iridescenceThicknessMap.value=t.iridescenceThicknessMap));t.transmission>0&&(e.transmission.value=t.transmission,e.transmissionSamplerMap.value=n.texture,e.transmissionSamplerSize.value.set(n.width,n.height),t.transmissionMap&&(e.transmissionMap.value=t.transmissionMap),e.thickness.value=t.thickness,t.thicknessMap&&(e.thicknessMap.value=t.thicknessMap),e.attenuationDistance.value=t.attenuationDistance,e.attenuationColor.value.copy(t.attenuationColor));e.specularIntensity.value=t.specularIntensity,e.specularColor.value.copy(t.specularColor),t.specularIntensityMap&&(e.specularIntensityMap.value=t.specularIntensityMap);t.specularColorMap&&(e.specularColorMap.value=t.specularColorMap)}(e,r,c)):r.isMeshMatcapMaterial?(n(e,r),function(e,t){t.matcap&&(e.matcap.value=t.matcap)}(e,r)):r.isMeshDepthMaterial?n(e,r):r.isMeshDistanceMaterial?(n(e,r),function(e,t){e.referencePosition.value.copy(t.referencePosition),e.nearDistance.value=t.nearDistance,e.farDistance.value=t.farDistance}(e,r)):r.isMeshNormalMaterial?n(e,r):r.isLineBasicMaterial?(function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity}(e,r),r.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}(e,r)):r.isPointsMaterial?function(e,t,n,r){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*n,e.scale.value=.5*r,t.map&&(e.map.value=t.map);t.alphaMap&&(e.alphaMap.value=t.alphaMap);t.alphaTest>0&&(e.alphaTest.value=t.alphaTest);let o;t.map?o=t.map:t.alphaMap&&(o=t.alphaMap);void 0!==o&&(!0===o.matrixAutoUpdate&&o.updateMatrix(),e.uvTransform.value.copy(o.matrix))}(e,r,o,l):r.isSpriteMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,t.map&&(e.map.value=t.map);t.alphaMap&&(e.alphaMap.value=t.alphaMap);t.alphaTest>0&&(e.alphaTest.value=t.alphaTest);let n;t.map?n=t.map:t.alphaMap&&(n=t.alphaMap);void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),e.uvTransform.value.copy(n.matrix))}(e,r):r.isShadowMaterial?(e.color.value.copy(r.color),e.opacity.value=r.opacity):r.isShaderMaterial&&(r.uniformsNeedUpdate=!1)}}}function za(e={}){this.isWebGLRenderer=!0;const t=void 0!==e.canvas?e.canvas:function(){const canvas=pe("canvas");return canvas.style.display="block",canvas}(),n=void 0!==e.context?e.context:null,r=void 0===e.depth||e.depth,o=void 0===e.stencil||e.stencil,l=void 0!==e.antialias&&e.antialias,c=void 0===e.premultipliedAlpha||e.premultipliedAlpha,h=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,d=void 0!==e.powerPreference?e.powerPreference:"default",f=void 0!==e.failIfMajorPerformanceCaveat&&e.failIfMajorPerformanceCaveat;let m;m=null!==n?n.getContextAttributes().alpha:void 0!==e.alpha&&e.alpha;let v=null,_=null;const x=[],y=[];this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=j,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1,Object.defineProperties(this,{gammaFactor:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."),2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}});const M=this;let S=!1,w=0,T=0,L=null,P=-1,I=null;const N=new Pe,O=new Pe;let z=null,U=t.width,F=t.height,B=1,k=null,V=null;const H=new Pe(0,0,U,F),G=new Pe(0,0,U,F);let W=!1;const X=new Qn;let Y=!1,Z=!1,K=null;const J=new mt,Q=new he,$=new ze,ee={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function te(){return null===L?B:1}let ne,ie,re,ae,se,oe,le,ue,de,fe,me,ge,ve,_e,xe,ye,Me,be,Se,we,Te,Ee,Ae,Le=n;function Ce(e,n){for(let i=0;i<e.length;i++){const r=e[i],o=t.getContext(r,n);if(null!==o)return o}return null}try{const e={alpha:!0,depth:r,stencil:o,antialias:l,premultipliedAlpha:c,preserveDrawingBuffer:h,powerPreference:d,failIfMajorPerformanceCaveat:f};if("setAttribute"in t&&t.setAttribute("data-engine","three.js r141"),t.addEventListener("webglcontextlost",Ne,!1),t.addEventListener("webglcontextrestored",Oe,!1),t.addEventListener("webglcontextcreationerror",Ue,!1),null===Le){const t=["webgl2","webgl","experimental-webgl"];if(!0===M.isWebGL1Renderer&&t.shift(),Le=Ce(t,e),null===Le)throw Ce(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===Le.getShaderPrecisionFormat&&(Le.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}function Re(){ne=new Li(Le),ie=new ci(Le,ne,e),ne.init(ie),Ee=new La(Le,ne,ie),re=new Ea(Le,ne,ie),ae=new Pi(Le),se=new da,oe=new Aa(Le,ne,re,se,ie,Ee,ae),le=new ui(M),ue=new Ai(M),de=new ei(Le,ie),Ae=new si(Le,ne,de,ie),fe=new Ci(Le,de,ae,Ae),me=new zi(Le,fe,de,ae),Se=new Oi(Le,ie,oe),ye=new hi(se),ge=new ua(M,le,ue,ne,ie,Ae,ye),ve=new Oa(M,se),_e=new ga,xe=new ba(ne,ie),be=new ai(M,le,re,me,m,c),Me=new Ta(M,me,ie),we=new oi(Le,ne,ae,ie),Te=new Ri(Le,ne,ae,ie),ae.programs=ge.programs,M.capabilities=ie,M.extensions=ne,M.properties=se,M.renderLists=_e,M.shadowMap=Me,M.state=re,M.info=ae}Re();const Ie=new Na(M,Le);function Ne(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),S=!0}function Oe(){console.log("THREE.WebGLRenderer: Context Restored."),S=!1;const e=ae.autoReset,t=Me.enabled,n=Me.autoUpdate,r=Me.needsUpdate,o=Me.type;Re(),ae.autoReset=e,Me.enabled=t,Me.autoUpdate=n,Me.needsUpdate=r,Me.type=o}function Ue(e){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",e.statusMessage)}function Fe(e){const t=e.target;t.removeEventListener("dispose",Fe),function(e){(function(e){const t=se.get(e).programs;void 0!==t&&(t.forEach((function(e){ge.releaseProgram(e)})),e.isShaderMaterial&&ge.releaseShaderCache(e))})(e),se.remove(e)}(t)}this.xr=Ie,this.getContext=function(){return Le},this.getContextAttributes=function(){return Le.getContextAttributes()},this.forceContextLoss=function(){const e=ne.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){const e=ne.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return B},this.setPixelRatio=function(e){void 0!==e&&(B=e,this.setSize(U,F,!1))},this.getSize=function(e){return e.set(U,F)},this.setSize=function(e,n,r){Ie.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(U=e,F=n,t.width=Math.floor(e*B),t.height=Math.floor(n*B),!1!==r&&(t.style.width=e+"px",t.style.height=n+"px"),this.setViewport(0,0,e,n))},this.getDrawingBufferSize=function(e){return e.set(U*B,F*B).floor()},this.setDrawingBufferSize=function(e,n,r){U=e,F=n,B=r,t.width=Math.floor(e*r),t.height=Math.floor(n*r),this.setViewport(0,0,e,n)},this.getCurrentViewport=function(e){return e.copy(N)},this.getViewport=function(e){return e.copy(H)},this.setViewport=function(e,t,n,r){e.isVector4?H.set(e.x,e.y,e.z,e.w):H.set(e,t,n,r),re.viewport(N.copy(H).multiplyScalar(B).floor())},this.getScissor=function(e){return e.copy(G)},this.setScissor=function(e,t,n,r){e.isVector4?G.set(e.x,e.y,e.z,e.w):G.set(e,t,n,r),re.scissor(O.copy(G).multiplyScalar(B).floor())},this.getScissorTest=function(){return W},this.setScissorTest=function(e){re.setScissorTest(W=e)},this.setOpaqueSort=function(e){k=e},this.setTransparentSort=function(e){V=e},this.getClearColor=function(e){return e.copy(be.getClearColor())},this.setClearColor=function(){be.setClearColor.apply(be,arguments)},this.getClearAlpha=function(){return be.getClearAlpha()},this.setClearAlpha=function(){be.setClearAlpha.apply(be,arguments)},this.clear=function(e=!0,t=!0,n=!0){let r=0;e&&(r|=16384),t&&(r|=256),n&&(r|=1024),Le.clear(r)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",Ne,!1),t.removeEventListener("webglcontextrestored",Oe,!1),t.removeEventListener("webglcontextcreationerror",Ue,!1),_e.dispose(),xe.dispose(),se.dispose(),le.dispose(),ue.dispose(),me.dispose(),Ae.dispose(),ge.dispose(),Ie.dispose(),Ie.removeEventListener("sessionstart",ke),Ie.removeEventListener("sessionend",Ve),K&&(K.dispose(),K=null),He.stop()},this.renderBufferDirect=function(e,t,n,r,object,o){null===t&&(t=ee);const l=object.isMesh&&object.matrixWorld.determinant()<0,c=function(e,t,n,r,object){!0!==t.isScene&&(t=ee);oe.resetTextureUnits();const o=t.fog,l=r.isMeshStandardMaterial?t.environment:null,c=null===L?M.outputEncoding:!0===L.isXRRenderTarget?L.texture.encoding:j,h=(r.isMeshStandardMaterial?ue:le).get(r.envMap||l),d=!0===r.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,f=!!r.normalMap&&!!n.attributes.tangent,m=!!n.morphAttributes.position,v=!!n.morphAttributes.normal,x=!!n.morphAttributes.color,y=r.toneMapped?M.toneMapping:0,S=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,w=void 0!==S?S.length:0,T=se.get(r),E=_.state.lights;if(!0===Y&&(!0===Z||e!==I)){const t=e===I&&r.id===P;ye.setState(r,e,t)}let A=!1;r.version===T.__version?T.needsLights&&T.lightsStateVersion!==E.state.version||T.outputEncoding!==c||object.isInstancedMesh&&!1===T.instancing?A=!0:object.isInstancedMesh||!0!==T.instancing?object.isSkinnedMesh&&!1===T.skinning?A=!0:object.isSkinnedMesh||!0!==T.skinning?T.envMap!==h||!0===r.fog&&T.fog!==o?A=!0:void 0===T.numClippingPlanes||T.numClippingPlanes===ye.numPlanes&&T.numIntersection===ye.numIntersection?(T.vertexAlphas!==d||T.vertexTangents!==f||T.morphTargets!==m||T.morphNormals!==v||T.morphColors!==x||T.toneMapping!==y||!0===ie.isWebGL2&&T.morphTargetsCount!==w)&&(A=!0):A=!0:A=!0:A=!0:(A=!0,T.__version=r.version);let C=T.currentProgram;!0===A&&(C=Xe(r,t,object));let R=!1,D=!1,N=!1;const O=C.getUniforms(),z=T.uniforms;re.useProgram(C.program)&&(R=!0,D=!0,N=!0);r.id!==P&&(P=r.id,D=!0);if(R||I!==e){if(O.setValue(Le,"projectionMatrix",e.projectionMatrix),ie.logarithmicDepthBuffer&&O.setValue(Le,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),I!==e&&(I=e,D=!0,N=!0),r.isShaderMaterial||r.isMeshPhongMaterial||r.isMeshToonMaterial||r.isMeshStandardMaterial||r.envMap){const t=O.map.cameraPosition;void 0!==t&&t.setValue(Le,$.setFromMatrixPosition(e.matrixWorld))}(r.isMeshPhongMaterial||r.isMeshToonMaterial||r.isMeshLambertMaterial||r.isMeshBasicMaterial||r.isMeshStandardMaterial||r.isShaderMaterial)&&O.setValue(Le,"isOrthographic",!0===e.isOrthographicCamera),(r.isMeshPhongMaterial||r.isMeshToonMaterial||r.isMeshLambertMaterial||r.isMeshBasicMaterial||r.isMeshStandardMaterial||r.isShaderMaterial||r.isShadowMaterial||object.isSkinnedMesh)&&O.setValue(Le,"viewMatrix",e.matrixWorldInverse)}if(object.isSkinnedMesh){O.setOptional(Le,object,"bindMatrix"),O.setOptional(Le,object,"bindMatrixInverse");const e=object.skeleton;e&&(ie.floatVertexTextures?(null===e.boneTexture&&e.computeBoneTexture(),O.setValue(Le,"boneTexture",e.boneTexture,oe),O.setValue(Le,"boneTextureSize",e.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const U=n.morphAttributes;(void 0!==U.position||void 0!==U.normal||void 0!==U.color&&!0===ie.isWebGL2)&&Se.update(object,n,r,C);(D||T.receiveShadow!==object.receiveShadow)&&(T.receiveShadow=object.receiveShadow,O.setValue(Le,"receiveShadow",object.receiveShadow));D&&(O.setValue(Le,"toneMappingExposure",M.toneMappingExposure),T.needsLights&&(V=N,(k=z).ambientLightColor.needsUpdate=V,k.lightProbe.needsUpdate=V,k.directionalLights.needsUpdate=V,k.directionalLightShadows.needsUpdate=V,k.pointLights.needsUpdate=V,k.pointLightShadows.needsUpdate=V,k.spotLights.needsUpdate=V,k.spotLightShadows.needsUpdate=V,k.rectAreaLights.needsUpdate=V,k.hemisphereLights.needsUpdate=V),o&&!0===r.fog&&ve.refreshFogUniforms(z,o),ve.refreshMaterialUniforms(z,r,B,F,K),Gr.upload(Le,T.uniformsList,z,oe));var k,V;r.isShaderMaterial&&!0===r.uniformsNeedUpdate&&(Gr.upload(Le,T.uniformsList,z,oe),r.uniformsNeedUpdate=!1);r.isSpriteMaterial&&O.setValue(Le,"center",object.center);return O.setValue(Le,"modelViewMatrix",object.modelViewMatrix),O.setValue(Le,"normalMatrix",object.normalMatrix),O.setValue(Le,"modelMatrix",object.matrixWorld),C}(e,t,n,r,object);re.setMaterial(r,l);let h=n.index;const d=n.attributes.position;if(null===h){if(void 0===d||0===d.count)return}else if(0===h.count)return;let f,m=1;!0===r.wireframe&&(h=fe.getWireframeAttribute(n),m=2),Ae.setup(object,r,c,n,h);let v=we;null!==h&&(f=de.get(h),v=Te,v.setIndex(f));const x=null!==h?h.count:d.count,y=n.drawRange.start*m,S=n.drawRange.count*m,w=null!==o?o.start*m:0,T=null!==o?o.count*m:1/0,E=Math.max(y,w),A=Math.min(x,y+S,w+T)-1,C=Math.max(0,A-E+1);if(0!==C){if(object.isMesh)!0===r.wireframe?(re.setLineWidth(r.wireframeLinewidth*te()),v.setMode(1)):v.setMode(4);else if(object.isLine){let e=r.linewidth;void 0===e&&(e=1),re.setLineWidth(e*te()),object.isLineSegments?v.setMode(1):object.isLineLoop?v.setMode(2):v.setMode(3)}else object.isPoints?v.setMode(0):object.isSprite&&v.setMode(4);if(object.isInstancedMesh)v.renderInstances(E,C,object.count);else if(n.isInstancedBufferGeometry){const e=Math.min(n.instanceCount,n._maxInstanceCount);v.renderInstances(E,C,e)}else v.render(E,C)}},this.compile=function(e,t){_=xe.get(e),_.init(),y.push(_),e.traverseVisible((function(object){object.isLight&&object.layers.test(t.layers)&&(_.pushLight(object),object.castShadow&&_.pushShadow(object))})),_.setupLights(M.physicallyCorrectLights),e.traverse((function(object){const t=object.material;if(t)if(Array.isArray(t))for(let i=0;i<t.length;i++){Xe(t[i],e,object)}else Xe(t,e,object)})),y.pop(),_=null};let Be=null;function ke(){He.stop()}function Ve(){He.start()}const He=new $n;function Ge(object,e,t,n){if(!1===object.visible)return;if(object.layers.test(e.layers))if(object.isGroup)t=object.renderOrder;else if(object.isLOD)!0===object.autoUpdate&&object.update(e);else if(object.isLight)_.pushLight(object),object.castShadow&&_.pushShadow(object);else if(object.isSprite){if(!object.frustumCulled||X.intersectsSprite(object)){n&&$.setFromMatrixPosition(object.matrixWorld).applyMatrix4(J);const e=me.update(object),r=object.material;r.visible&&v.push(object,e,r,t,$.z,null)}}else if((object.isMesh||object.isLine||object.isPoints)&&(object.isSkinnedMesh&&object.skeleton.frame!==ae.render.frame&&(object.skeleton.update(),object.skeleton.frame=ae.render.frame),!object.frustumCulled||X.intersectsObject(object))){n&&$.setFromMatrixPosition(object.matrixWorld).applyMatrix4(J);const e=me.update(object),r=object.material;if(Array.isArray(r)){const n=e.groups;for(let i=0,o=n.length;i<o;i++){const o=n[i],l=r[o.materialIndex];l&&l.visible&&v.push(object,e,l,t,$.z,o)}}else r.visible&&v.push(object,e,r,t,$.z,null)}const r=object.children;for(let i=0,o=r.length;i<o;i++)Ge(r[i],e,t,n)}function We(e,t,n,r){const o=e.opaque,c=e.transmissive,h=e.transparent;_.setupLightsView(n),c.length>0&&function(e,t,n){const r=ie.isWebGL2;null===K&&(K=new De(1,1,{generateMipmaps:!0,type:ne.has("EXT_color_buffer_half_float")?R:A,minFilter:E,samples:r&&!0===l?4:0}));M.getDrawingBufferSize(Q),r?K.setSize(Q.x,Q.y):K.setSize(ce(Q.x),ce(Q.y));const o=M.getRenderTarget();M.setRenderTarget(K),M.clear();const c=M.toneMapping;M.toneMapping=0,je(e,t,n),M.toneMapping=c,oe.updateMultisampleRenderTarget(K),oe.updateRenderTargetMipmap(K),M.setRenderTarget(o)}(o,t,n),r&&re.viewport(N.copy(r)),o.length>0&&je(o,t,n),c.length>0&&je(c,t,n),h.length>0&&je(h,t,n),re.buffers.depth.setTest(!0),re.buffers.depth.setMask(!0),re.buffers.color.setMask(!0),re.setPolygonOffset(!1)}function je(e,t,n){const r=!0===t.isScene?t.overrideMaterial:null;for(let i=0,o=e.length;i<o;i++){const o=e[i],object=o.object,l=o.geometry,c=null===r?o.material:r,h=o.group;object.layers.test(n.layers)&&qe(object,t,n,l,c,h)}}function qe(object,e,t,n,r,o){object.onBeforeRender(M,e,t,n,r,o),object.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,object.matrixWorld),object.normalMatrix.getNormalMatrix(object.modelViewMatrix),r.onBeforeRender(M,e,t,n,object,o),!0===r.transparent&&2===r.side?(r.side=1,r.needsUpdate=!0,M.renderBufferDirect(t,e,n,r,object,o),r.side=0,r.needsUpdate=!0,M.renderBufferDirect(t,e,n,r,object,o),r.side=2):M.renderBufferDirect(t,e,n,r,object,o),object.onAfterRender(M,e,t,n,r,o)}function Xe(e,t,object){!0!==t.isScene&&(t=ee);const n=se.get(e),r=_.state.lights,o=_.state.shadowsArray,l=r.state.version,c=ge.getParameters(e,r.state,o,t,object),h=ge.getProgramCacheKey(c);let d=n.programs;n.environment=e.isMeshStandardMaterial?t.environment:null,n.fog=t.fog,n.envMap=(e.isMeshStandardMaterial?ue:le).get(e.envMap||n.environment),void 0===d&&(e.addEventListener("dispose",Fe),d=new Map,n.programs=d);let f=d.get(h);if(void 0!==f){if(n.currentProgram===f&&n.lightsStateVersion===l)return Ye(e,c),f}else c.uniforms=ge.getUniforms(e),e.onBuild(object,c,M),e.onBeforeCompile(c,M),f=ge.acquireProgram(c,h),d.set(h,f),n.uniforms=c.uniforms;const m=n.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(m.clippingPlanes=ye.uniform),Ye(e,c),n.needsLights=function(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights}(e),n.lightsStateVersion=l,n.needsLights&&(m.ambientLightColor.value=r.state.ambient,m.lightProbe.value=r.state.probe,m.directionalLights.value=r.state.directional,m.directionalLightShadows.value=r.state.directionalShadow,m.spotLights.value=r.state.spot,m.spotLightShadows.value=r.state.spotShadow,m.rectAreaLights.value=r.state.rectArea,m.ltc_1.value=r.state.rectAreaLTC1,m.ltc_2.value=r.state.rectAreaLTC2,m.pointLights.value=r.state.point,m.pointLightShadows.value=r.state.pointShadow,m.hemisphereLights.value=r.state.hemi,m.directionalShadowMap.value=r.state.directionalShadowMap,m.directionalShadowMatrix.value=r.state.directionalShadowMatrix,m.spotShadowMap.value=r.state.spotShadowMap,m.spotShadowMatrix.value=r.state.spotShadowMatrix,m.pointShadowMap.value=r.state.pointShadowMap,m.pointShadowMatrix.value=r.state.pointShadowMatrix);const v=f.getUniforms(),x=Gr.seqWithValue(v.seq,m);return n.currentProgram=f,n.uniformsList=x,f}function Ye(e,t){const n=se.get(e);n.outputEncoding=t.outputEncoding,n.instancing=t.instancing,n.skinning=t.skinning,n.morphTargets=t.morphTargets,n.morphNormals=t.morphNormals,n.morphColors=t.morphColors,n.morphTargetsCount=t.morphTargetsCount,n.numClippingPlanes=t.numClippingPlanes,n.numIntersection=t.numClipIntersection,n.vertexAlphas=t.vertexAlphas,n.vertexTangents=t.vertexTangents,n.toneMapping=t.toneMapping}He.setAnimationLoop((function(time){Be&&Be(time)})),"undefined"!=typeof self&&He.setContext(self),this.setAnimationLoop=function(e){Be=e,Ie.setAnimationLoop(e),null===e?He.stop():He.start()},Ie.addEventListener("sessionstart",ke),Ie.addEventListener("sessionend",Ve),this.render=function(e,t){if(void 0!==t&&!0!==t.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===S)return;!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),!0===Ie.enabled&&!0===Ie.isPresenting&&(!0===Ie.cameraAutoUpdate&&Ie.updateCamera(t),t=Ie.getCamera()),!0===e.isScene&&e.onBeforeRender(M,e,t,L),_=xe.get(e,y.length),_.init(),y.push(_),J.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),X.setFromProjectionMatrix(J),Z=this.localClippingEnabled,Y=ye.init(this.clippingPlanes,Z,t),v=_e.get(e,x.length),v.init(),x.push(v),Ge(e,t,0,M.sortObjects),v.finish(),!0===M.sortObjects&&v.sort(k,V),!0===Y&&ye.beginShadows();const n=_.state.shadowsArray;if(Me.render(n,e,t),!0===Y&&ye.endShadows(),!0===this.info.autoReset&&this.info.reset(),be.render(v,e),_.setupLights(M.physicallyCorrectLights),t.isArrayCamera){const n=t.cameras;for(let i=0,t=n.length;i<t;i++){const t=n[i];We(v,e,t,t.viewport)}}else We(v,e,t);null!==L&&(oe.updateMultisampleRenderTarget(L),oe.updateRenderTargetMipmap(L)),!0===e.isScene&&e.onAfterRender(M,e,t),Ae.resetDefaultState(),P=-1,I=null,y.pop(),_=y.length>0?y[y.length-1]:null,x.pop(),v=x.length>0?x[x.length-1]:null},this.getActiveCubeFace=function(){return w},this.getActiveMipmapLevel=function(){return T},this.getRenderTarget=function(){return L},this.setRenderTargetTextures=function(e,t,n){se.get(e.texture).__webglTexture=t,se.get(e.depthTexture).__webglTexture=n;const r=se.get(e);r.__hasExternalTextures=!0,r.__hasExternalTextures&&(r.__autoAllocateDepthBuffer=void 0===n,r.__autoAllocateDepthBuffer||!0===ne.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),r.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(e,t){const n=se.get(e);n.__webglFramebuffer=t,n.__useDefaultFramebuffer=void 0===t},this.setRenderTarget=function(e,t=0,n=0){L=e,w=t,T=n;let r=!0;if(e){const t=se.get(e);void 0!==t.__useDefaultFramebuffer?(re.bindFramebuffer(36160,null),r=!1):void 0===t.__webglFramebuffer?oe.setupRenderTarget(e):t.__hasExternalTextures&&oe.rebindTextures(e,se.get(e.texture).__webglTexture,se.get(e.depthTexture).__webglTexture)}let o=null,l=!1,c=!1;if(e){const n=e.texture;(n.isData3DTexture||n.isDataArrayTexture)&&(c=!0);const r=se.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(o=r[t],l=!0):o=ie.isWebGL2&&e.samples>0&&!1===oe.useMultisampledRTT(e)?se.get(e).__webglMultisampledFramebuffer:r,N.copy(e.viewport),O.copy(e.scissor),z=e.scissorTest}else N.copy(H).multiplyScalar(B).floor(),O.copy(G).multiplyScalar(B).floor(),z=W;if(re.bindFramebuffer(36160,o)&&ie.drawBuffers&&r&&re.drawBuffers(e,o),re.viewport(N),re.scissor(O),re.setScissorTest(z),l){const r=se.get(e.texture);Le.framebufferTexture2D(36160,36064,34069+t,r.__webglTexture,n)}else if(c){const r=se.get(e.texture),o=t||0;Le.framebufferTextureLayer(36160,36064,r.__webglTexture,n||0,o)}P=-1},this.readRenderTargetPixels=function(e,t,n,r,o,l,c){if(!e||!e.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let h=se.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==c&&(h=h[c]),h){re.bindFramebuffer(36160,h);try{const c=e.texture,h=c.format,d=c.type;if(h!==D&&Ee.convert(h)!==Le.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const f=d===R&&(ne.has("EXT_color_buffer_half_float")||ie.isWebGL2&&ne.has("EXT_color_buffer_float"));if(!(d===A||Ee.convert(d)===Le.getParameter(35738)||d===C&&(ie.isWebGL2||ne.has("OES_texture_float")||ne.has("WEBGL_color_buffer_float"))||f))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");t>=0&&t<=e.width-r&&n>=0&&n<=e.height-o&&Le.readPixels(t,n,r,o,Ee.convert(h),Ee.convert(d),l)}finally{const e=null!==L?se.get(L).__webglFramebuffer:null;re.bindFramebuffer(36160,e)}}},this.copyFramebufferToTexture=function(e,t,n=0){const r=Math.pow(2,-n),o=Math.floor(t.image.width*r),l=Math.floor(t.image.height*r);oe.setTexture2D(t,0),Le.copyTexSubImage2D(3553,n,0,0,e.x,e.y,o,l),re.unbindTexture()},this.copyTextureToTexture=function(e,t,n,r=0){const o=t.image.width,l=t.image.height,c=Ee.convert(n.format),h=Ee.convert(n.type);oe.setTexture2D(n,0),Le.pixelStorei(37440,n.flipY),Le.pixelStorei(37441,n.premultiplyAlpha),Le.pixelStorei(3317,n.unpackAlignment),t.isDataTexture?Le.texSubImage2D(3553,r,e.x,e.y,o,l,c,h,t.image.data):t.isCompressedTexture?Le.compressedTexSubImage2D(3553,r,e.x,e.y,t.mipmaps[0].width,t.mipmaps[0].height,c,t.mipmaps[0].data):Le.texSubImage2D(3553,r,e.x,e.y,c,h,t.image),0===r&&n.generateMipmaps&&Le.generateMipmap(3553),re.unbindTexture()},this.copyTextureToTexture3D=function(e,t,n,r,o=0){if(M.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const l=e.max.x-e.min.x+1,c=e.max.y-e.min.y+1,h=e.max.z-e.min.z+1,d=Ee.convert(r.format),f=Ee.convert(r.type);let m;if(r.isData3DTexture)oe.setTexture3D(r,0),m=32879;else{if(!r.isDataArrayTexture)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");oe.setTexture2DArray(r,0),m=35866}Le.pixelStorei(37440,r.flipY),Le.pixelStorei(37441,r.premultiplyAlpha),Le.pixelStorei(3317,r.unpackAlignment);const v=Le.getParameter(3314),_=Le.getParameter(32878),x=Le.getParameter(3316),y=Le.getParameter(3315),S=Le.getParameter(32877),image=n.isCompressedTexture?n.mipmaps[0]:n.image;Le.pixelStorei(3314,image.width),Le.pixelStorei(32878,image.height),Le.pixelStorei(3316,e.min.x),Le.pixelStorei(3315,e.min.y),Le.pixelStorei(32877,e.min.z),n.isDataTexture||n.isData3DTexture?Le.texSubImage3D(m,o,t.x,t.y,t.z,l,c,h,d,f,image.data):n.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),Le.compressedTexSubImage3D(m,o,t.x,t.y,t.z,l,c,h,d,image.data)):Le.texSubImage3D(m,o,t.x,t.y,t.z,l,c,h,d,f,image),Le.pixelStorei(3314,v),Le.pixelStorei(32878,_),Le.pixelStorei(3316,x),Le.pixelStorei(3315,y),Le.pixelStorei(32877,S),0===o&&r.generateMipmaps&&Le.generateMipmap(m),re.unbindTexture()},this.initTexture=function(e){oe.setTexture2D(e,0),re.unbindTexture()},this.resetState=function(){w=0,T=0,L=null,re.reset(),Ae.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}(class extends za{}).prototype.isWebGL1Renderer=!0;class Ua extends kt{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(source,e){return super.copy(source,e),null!==source.background&&(this.background=source.background.clone()),null!==source.environment&&(this.environment=source.environment.clone()),null!==source.fog&&(this.fog=source.fog.clone()),null!==source.overrideMaterial&&(this.overrideMaterial=source.overrideMaterial.clone()),this.autoUpdate=source.autoUpdate,this.matrixAutoUpdate=source.matrixAutoUpdate,this}toJSON(meta){const data=super.toJSON(meta);return null!==this.fog&&(data.object.fog=this.fog.toJSON()),data}}class Fa extends $t{constructor(e){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new we(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(e)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.alphaMap=source.alphaMap,this.rotation=source.rotation,this.sizeAttenuation=source.sizeAttenuation,this.fog=source.fog,this}}class Ba extends $t{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new we(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(source){return super.copy(source),this.color.copy(source.color),this.linewidth=source.linewidth,this.linecap=source.linecap,this.linejoin=source.linejoin,this.fog=source.fog,this}}class ka extends $t{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new we(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.alphaMap=source.alphaMap,this.size=source.size,this.sizeAttenuation=source.sizeAttenuation,this.fog=source.fog,this}}function Va(){let e=0,t=0,n=0,r=0;function o(o,l,c,h){e=o,t=c,n=-3*o+3*l-2*c-h,r=2*o-2*l+c+h}return{initCatmullRom:function(e,t,n,r,l){o(t,n,l*(n-e),l*(r-t))},initNonuniformCatmullRom:function(e,t,n,r,l,c,h){let d=(t-e)/l-(n-e)/(l+c)+(n-t)/c,f=(n-t)/c-(r-t)/(c+h)+(r-n)/h;d*=c,f*=c,o(t,n,d,f)},calc:function(o){const l=o*o;return e+t*o+n*l+r*(l*o)}}}new ze,new Va,new Va,new Va;new ze,new ze,new ze,new Jt;class Ha extends mn{constructor(e=1,t=32,n=16,r=0,o=2*Math.PI,l=0,c=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:r,phiLength:o,thetaStart:l,thetaLength:c},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const h=Math.min(l+c,Math.PI);let d=0;const f=[],m=new ze,v=new ze,_=[],x=[],y=[],M=[];for(let _=0;_<=n;_++){const S=[],w=_/n;let T=0;0==_&&0==l?T=.5/t:_==n&&h==Math.PI&&(T=-.5/t);for(let n=0;n<=t;n++){const u=n/t;m.x=-e*Math.cos(r+u*o)*Math.sin(l+w*c),m.y=e*Math.cos(l+w*c),m.z=e*Math.sin(r+u*o)*Math.sin(l+w*c),x.push(m.x,m.y,m.z),v.copy(m).normalize(),y.push(v.x,v.y,v.z),M.push(u+T,1-w),S.push(d++)}f.push(S)}for(let e=0;e<n;e++)for(let r=0;r<t;r++){const a=f[e][r+1],b=f[e][r],t=f[e+1][r],o=f[e+1][r+1];(0!==e||l>0)&&_.push(a,b,o),(e!==n-1||h<Math.PI)&&_.push(b,t,o)}this.setIndex(_),this.setAttribute("position",new on(x,3)),this.setAttribute("normal",new on(y,3)),this.setAttribute("uv",new on(M,2))}static fromJSON(data){return new Ha(data.radius,data.widthSegments,data.heightSegments,data.phiStart,data.phiLength,data.thetaStart,data.thetaLength)}}class Ga extends $t{constructor(e){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new we(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new we(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new he(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(source){return super.copy(source),this.defines={STANDARD:""},this.color.copy(source.color),this.roughness=source.roughness,this.metalness=source.metalness,this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.roughnessMap=source.roughnessMap,this.metalnessMap=source.metalnessMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.envMapIntensity=source.envMapIntensity,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.flatShading=source.flatShading,this.fog=source.fog,this}}const Wa={ShadowMaterial:class extends $t{constructor(e){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new we(0),this.transparent=!0,this.fog=!0,this.setValues(e)}copy(source){return super.copy(source),this.color.copy(source.color),this.fog=source.fog,this}},SpriteMaterial:Fa,RawShaderMaterial:class extends Bn{constructor(e){super(e),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}},ShaderMaterial:Bn,PointsMaterial:ka,MeshPhysicalMaterial:class extends Ga{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new he(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return ae(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(e){this.ior=(1+.4*e)/(1-.4*e)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new we(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new we(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new we(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._iridescence=0,this._transmission=0,this.setValues(e)}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(source){return super.copy(source),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=source.clearcoat,this.clearcoatMap=source.clearcoatMap,this.clearcoatRoughness=source.clearcoatRoughness,this.clearcoatRoughnessMap=source.clearcoatRoughnessMap,this.clearcoatNormalMap=source.clearcoatNormalMap,this.clearcoatNormalScale.copy(source.clearcoatNormalScale),this.ior=source.ior,this.iridescence=source.iridescence,this.iridescenceMap=source.iridescenceMap,this.iridescenceIOR=source.iridescenceIOR,this.iridescenceThicknessRange=[...source.iridescenceThicknessRange],this.iridescenceThicknessMap=source.iridescenceThicknessMap,this.sheen=source.sheen,this.sheenColor.copy(source.sheenColor),this.sheenColorMap=source.sheenColorMap,this.sheenRoughness=source.sheenRoughness,this.sheenRoughnessMap=source.sheenRoughnessMap,this.transmission=source.transmission,this.transmissionMap=source.transmissionMap,this.thickness=source.thickness,this.thicknessMap=source.thicknessMap,this.attenuationDistance=source.attenuationDistance,this.attenuationColor.copy(source.attenuationColor),this.specularIntensity=source.specularIntensity,this.specularIntensityMap=source.specularIntensityMap,this.specularColor.copy(source.specularColor),this.specularColorMap=source.specularColorMap,this}},MeshStandardMaterial:Ga,MeshPhongMaterial:class extends $t{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new we(16777215),this.specular=new we(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new we(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new he(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(source){return super.copy(source),this.color.copy(source.color),this.specular.copy(source.specular),this.shininess=source.shininess,this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.flatShading=source.flatShading,this.fog=source.fog,this}},MeshToonMaterial:class extends $t{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new we(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new we(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new he(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.gradientMap=source.gradientMap,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.alphaMap=source.alphaMap,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.fog=source.fog,this}},MeshNormalMaterial:class extends $t{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new he(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}copy(source){return super.copy(source),this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.flatShading=source.flatShading,this}},MeshLambertMaterial:class extends $t{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new we(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new we(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.fog=source.fog,this}},MeshDepthMaterial:Sa,MeshDistanceMaterial:wa,MeshBasicMaterial:en,MeshMatcapMaterial:class extends $t{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new we(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new he(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(source){return super.copy(source),this.defines={MATCAP:""},this.color.copy(source.color),this.matcap=source.matcap,this.map=source.map,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.alphaMap=source.alphaMap,this.flatShading=source.flatShading,this.fog=source.fog,this}},LineDashedMaterial:class extends Ba{constructor(e){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(source){return super.copy(source),this.scale=source.scale,this.dashSize=source.dashSize,this.gapSize=source.gapSize,this}},LineBasicMaterial:Ba,Material:$t};$t.fromType=function(e){return new Wa[e]};const ja={arraySlice:function(e,t,n){return ja.isTypedArray(e)?new e.constructor(e.subarray(t,void 0!==n?n:e.length)):e.slice(t,n)},convertArray:function(e,t,n){return!e||!n&&e.constructor===t?e:"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(object){return ArrayBuffer.isView(object)&&!(object instanceof DataView)},getKeyframeOrder:function(e){const t=e.length,n=new Array(t);for(let i=0;i!==t;++i)n[i]=i;return n.sort((function(i,t){return e[i]-e[t]})),n},sortedArray:function(e,t,n){const r=e.length,o=new e.constructor(r);for(let i=0,l=0;l!==r;++i){const r=n[i]*t;for(let n=0;n!==t;++n)o[l++]=e[r+n]}return o},flattenJSON:function(e,t,n,r){let i=1,o=e[0];for(;void 0!==o&&void 0===o[r];)o=e[i++];if(void 0===o)return;let l=o[r];if(void 0!==l)if(Array.isArray(l))do{l=o[r],void 0!==l&&(t.push(o.time),n.push.apply(n,l)),o=e[i++]}while(void 0!==o);else if(void 0!==l.toArray)do{l=o[r],void 0!==l&&(t.push(o.time),l.toArray(n,n.length)),o=e[i++]}while(void 0!==o);else do{l=o[r],void 0!==l&&(t.push(o.time),n.push(l)),o=e[i++]}while(void 0!==o)},subclip:function(e,t,n,r,o=30){const l=e.clone();l.name=t;const c=[];for(let i=0;i<l.tracks.length;++i){const track=l.tracks[i],e=track.getValueSize(),t=[],h=[];for(let l=0;l<track.times.length;++l){const c=track.times[l]*o;if(!(c<n||c>=r)){t.push(track.times[l]);for(let t=0;t<e;++t)h.push(track.values[l*e+t])}}0!==t.length&&(track.times=ja.convertArray(t,track.times.constructor),track.values=ja.convertArray(h,track.values.constructor),c.push(track))}l.tracks=c;let h=1/0;for(let i=0;i<l.tracks.length;++i)h>l.tracks[i].times[0]&&(h=l.tracks[i].times[0]);for(let i=0;i<l.tracks.length;++i)l.tracks[i].shift(-1*h);return l.resetDuration(),l},makeClipAdditive:function(e,t=0,n=e,r=30){r<=0&&(r=30);const o=n.tracks.length,l=t/r;for(let i=0;i<o;++i){const t=n.tracks[i],r=t.ValueTypeName;if("bool"===r||"string"===r)continue;const o=e.tracks.find((function(track){return track.name===t.name&&track.ValueTypeName===r}));if(void 0===o)continue;let c=0;const h=t.getValueSize();t.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=h/3);let d=0;const f=o.getValueSize();o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(d=f/3);const m=t.times.length-1;let v;if(l<=t.times[0]){const e=c,n=h-c;v=ja.arraySlice(t.values,e,n)}else if(l>=t.times[m]){const e=m*h+c,n=e+h-c;v=ja.arraySlice(t.values,e,n)}else{const e=t.createInterpolant(),n=c,r=h-c;e.evaluate(l),v=ja.arraySlice(e.resultBuffer,n,r)}if("quaternion"===r){(new Oe).fromArray(v).normalize().conjugate().toArray(v)}const _=o.times.length;for(let e=0;e<_;++e){const t=e*f+d;if("quaternion"===r)Oe.multiplyQuaternionsFlat(o.values,t,v,0,o.values,t);else{const e=f-2*d;for(let n=0;n<e;++n)o.values[t+n]-=v[n]}}}return e.blendMode=2501,e}};class qa{constructor(e,t,n,r){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==r?r:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let n=this._cachedIndex,r=t[n],o=t[n-1];e:{t:{let l;n:{i:if(!(e<r)){for(let l=n+2;;){if(void 0===r){if(e<o)break i;return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===l)break;if(o=r,r=t[++n],e<r)break t}l=t.length;break n}if(e>=o)break e;{const c=t[1];e<c&&(n=2,o=c);for(let l=n-2;;){if(void 0===o)return this._cachedIndex=0,this.copySampleValue_(0);if(n===l)break;if(r=o,o=t[--n-1],e>=o)break t}l=n,n=0}}for(;n<l;){const r=n+l>>>1;e<t[r]?l=r:n=r+1}if(r=t[n],o=t[n-1],void 0===o)return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===r)return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,o,r)}return this.interpolate_(n,o,e,r)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,r=this.valueSize,o=e*r;for(let i=0;i!==r;++i)t[i]=n[o+i];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Xa extends qa{constructor(e,t,n,r){super(e,t,n,r),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:H,endingEnd:H}}intervalChanged_(e,t,n){const r=this.parameterPositions;let o=e-2,l=e+1,c=r[o],h=r[l];if(void 0===c)switch(this.getSettings_().endingStart){case G:o=e,c=2*t-n;break;case W:o=r.length-2,c=t+r[o]-r[o+1];break;default:o=e,c=n}if(void 0===h)switch(this.getSettings_().endingEnd){case G:l=e,h=2*n-t;break;case W:l=1,h=n+r[1]-r[0];break;default:l=e-1,h=t}const d=.5*(n-t),f=this.valueSize;this._weightPrev=d/(t-c),this._weightNext=d/(h-n),this._offsetPrev=o*f,this._offsetNext=l*f}interpolate_(e,t,n,r){const o=this.resultBuffer,l=this.sampleValues,c=this.valueSize,h=e*c,d=h-c,f=this._offsetPrev,m=this._offsetNext,v=this._weightPrev,_=this._weightNext,p=(n-t)/(r-t),x=p*p,y=x*p,M=-v*y+2*v*x-v*p,S=(1+v)*y+(-1.5-2*v)*x+(-.5+v)*p+1,w=(-1-_)*y+(1.5+_)*x+.5*p,T=_*y-_*x;for(let i=0;i!==c;++i)o[i]=M*l[f+i]+S*l[d+i]+w*l[h+i]+T*l[m+i];return o}}class Ya extends qa{constructor(e,t,n,r){super(e,t,n,r)}interpolate_(e,t,n,r){const o=this.resultBuffer,l=this.sampleValues,c=this.valueSize,h=e*c,d=h-c,f=(n-t)/(r-t),m=1-f;for(let i=0;i!==c;++i)o[i]=l[d+i]*m+l[h+i]*f;return o}}class Za extends qa{constructor(e,t,n,r){super(e,t,n,r)}interpolate_(e){return this.copySampleValue_(e-1)}}class Ka{constructor(e,t,n,r){if(void 0===e)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===t||0===t.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=ja.convertArray(t,this.TimeBufferType),this.values=ja.convertArray(n,this.ValueBufferType),this.setInterpolation(r||this.DefaultInterpolation)}static toJSON(track){const e=track.constructor;let t;if(e.toJSON!==this.toJSON)t=e.toJSON(track);else{t={name:track.name,times:ja.convertArray(track.times,Array),values:ja.convertArray(track.values,Array)};const e=track.getInterpolation();e!==track.DefaultInterpolation&&(t.interpolation=e)}return t.type=track.ValueTypeName,t}InterpolantFactoryMethodDiscrete(e){return new Za(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new Ya(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new Xa(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case B:t=this.InterpolantFactoryMethodDiscrete;break;case k:t=this.InterpolantFactoryMethodLinear;break;case V:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){const t="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(t);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",t),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return B;case this.InterpolantFactoryMethodLinear:return k;case this.InterpolantFactoryMethodSmooth:return V}}getValueSize(){return this.values.length/this.times.length}shift(e){if(0!==e){const t=this.times;for(let i=0,n=t.length;i!==n;++i)t[i]+=e}return this}scale(e){if(1!==e){const t=this.times;for(let i=0,n=t.length;i!==n;++i)t[i]*=e}return this}trim(e,t){const n=this.times,r=n.length;let o=0,l=r-1;for(;o!==r&&n[o]<e;)++o;for(;-1!==l&&n[l]>t;)--l;if(++l,0!==o||l!==r){o>=l&&(l=Math.max(l,1),o=l-1);const e=this.getValueSize();this.times=ja.arraySlice(n,o,l),this.values=ja.arraySlice(this.values,o*e,l*e)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,r=this.values,o=n.length;0===o&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let l=null;for(let i=0;i!==o;i++){const t=n[i];if("number"==typeof t&&isNaN(t)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,i,t),e=!1;break}if(null!==l&&l>t){console.error("THREE.KeyframeTrack: Out of order keys.",this,i,t,l),e=!1;break}l=t}if(void 0!==r&&ja.isTypedArray(r))for(let i=0,t=r.length;i!==t;++i){const t=r[i];if(isNaN(t)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,i,t),e=!1;break}}return e}optimize(){const e=ja.arraySlice(this.times),t=ja.arraySlice(this.values),n=this.getValueSize(),r=this.getInterpolation()===V,o=e.length-1;let l=1;for(let i=1;i<o;++i){let o=!1;const time=e[i];if(time!==e[i+1]&&(1!==i||time!==e[0]))if(r)o=!0;else{const e=i*n,r=e-n,l=e+n;for(let c=0;c!==n;++c){const n=t[e+c];if(n!==t[r+c]||n!==t[l+c]){o=!0;break}}}if(o){if(i!==l){e[l]=e[i];const r=i*n,o=l*n;for(let e=0;e!==n;++e)t[o+e]=t[r+e]}++l}}if(o>0){e[l]=e[o];for(let e=o*n,r=l*n,c=0;c!==n;++c)t[r+c]=t[e+c];++l}return l!==e.length?(this.times=ja.arraySlice(e,0,l),this.values=ja.arraySlice(t,0,l*n)):(this.times=e,this.values=t),this}clone(){const e=ja.arraySlice(this.times,0),t=ja.arraySlice(this.values,0),track=new(0,this.constructor)(this.name,e,t);return track.createInterpolant=this.createInterpolant,track}}Ka.prototype.TimeBufferType=Float32Array,Ka.prototype.ValueBufferType=Float32Array,Ka.prototype.DefaultInterpolation=k;class Ja extends Ka{}Ja.prototype.ValueTypeName="bool",Ja.prototype.ValueBufferType=Array,Ja.prototype.DefaultInterpolation=B,Ja.prototype.InterpolantFactoryMethodLinear=void 0,Ja.prototype.InterpolantFactoryMethodSmooth=void 0;class Qa extends Ka{}Qa.prototype.ValueTypeName="color";class $a extends Ka{}$a.prototype.ValueTypeName="number";class es extends qa{constructor(e,t,n,r){super(e,t,n,r)}interpolate_(e,t,n,r){const o=this.resultBuffer,l=this.sampleValues,c=this.valueSize,h=(n-t)/(r-t);let d=e*c;for(let e=d+c;d!==e;d+=4)Oe.slerpFlat(o,0,l,d-c,l,d,h);return o}}class ts extends Ka{InterpolantFactoryMethodLinear(e){return new es(this.times,this.values,this.getValueSize(),e)}}ts.prototype.ValueTypeName="quaternion",ts.prototype.DefaultInterpolation=k,ts.prototype.InterpolantFactoryMethodSmooth=void 0;class ns extends Ka{}ns.prototype.ValueTypeName="string",ns.prototype.ValueBufferType=Array,ns.prototype.DefaultInterpolation=B,ns.prototype.InterpolantFactoryMethodLinear=void 0,ns.prototype.InterpolantFactoryMethodSmooth=void 0;class is extends Ka{}is.prototype.ValueTypeName="vector";const rs={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&(this.files[e]=t)},get:function(e){if(!1!==this.enabled)return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};class as{constructor(e,t,n){const r=this;let o,l=!1,c=0,h=0;const d=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(e){h++,!1===l&&void 0!==r.onStart&&r.onStart(e,c,h),l=!0},this.itemEnd=function(e){c++,void 0!==r.onProgress&&r.onProgress(e,c,h),c===h&&(l=!1,void 0!==r.onLoad&&r.onLoad())},this.itemError=function(e){void 0!==r.onError&&r.onError(e)},this.resolveURL=function(e){return o?o(e):e},this.setURLModifier=function(e){return o=e,this},this.addHandler=function(e,t){return d.push(e,t),this},this.removeHandler=function(e){const t=d.indexOf(e);return-1!==t&&d.splice(t,2),this},this.getHandler=function(e){for(let i=0,t=d.length;i<t;i+=2){const t=d[i],n=d[i+1];if(t.global&&(t.lastIndex=0),t.test(e))return n}return null}}}const ss=new as;class os{constructor(e){this.manager=void 0!==e?e:ss,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise((function(r,o){n.load(e,r,t,o)}))}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(path){return this.path=path,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}class ls extends os{constructor(e){super(e)}load(e,t,n,r){void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);const o=this,l=rs.get(e);if(void 0!==l)return o.manager.itemStart(e),setTimeout((function(){t&&t(l),o.manager.itemEnd(e)}),0),l;const image=pe("img");function c(){d(),rs.add(e,this),t&&t(this),o.manager.itemEnd(e)}function h(t){d(),r&&r(t),o.manager.itemError(e),o.manager.itemEnd(e)}function d(){image.removeEventListener("load",c,!1),image.removeEventListener("error",h,!1)}return image.addEventListener("load",c,!1),image.addEventListener("error",h,!1),"data:"!==e.slice(0,5)&&void 0!==this.crossOrigin&&(image.crossOrigin=this.crossOrigin),o.manager.itemStart(e),image.src=e,image}}class cs extends os{constructor(e){super(e)}load(e,t,n,r){const o=new Re,l=new ls(this.manager);return l.setCrossOrigin(this.crossOrigin),l.setPath(this.path),l.load(e,(function(image){o.image=image,o.needsUpdate=!0,void 0!==t&&t(o)}),n,r),o}}const hs="\\[\\]\\.:\\/",us=new RegExp("[\\[\\]\\.:\\/]","g"),ds="[^\\[\\]\\.:\\/]",ps="[^"+hs.replace("\\.","")+"]",fs=/((?:WC+[\/:])*)/.source.replace("WC",ds),ms=/(WCOD+)?/.source.replace("WCOD",ps),gs=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",ds),vs=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",ds),_s=new RegExp("^"+fs+ms+gs+vs+"$"),xs=["material","materials","bones"];class ys{constructor(e,path,t){this.path=path,this.parsedPath=t||ys.parseTrackName(path),this.node=ys.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,path,t){return e&&e.isAnimationObjectGroup?new ys.Composite(e,path,t):new ys(e,path,t)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(us,"")}static parseTrackName(e){const t=_s.exec(e);if(null===t)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},r=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==r&&-1!==r){const e=n.nodeName.substring(r+1);-1!==xs.indexOf(e)&&(n.nodeName=n.nodeName.substring(0,r),n.objectName=e)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}static findNode(e,t){if(void 0===t||""===t||"."===t||-1===t||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(void 0!==n)return n}if(e.children){const n=function(e){for(let i=0;i<e.length;i++){const r=e[i];if(r.name===t||r.uuid===t)return r;const o=n(r.children);if(o)return o}return null},r=n(e.children);if(r)return r}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const source=this.resolvedProperty;for(let i=0,n=source.length;i!==n;++i)e[t++]=source[i]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,n=t.objectName,r=t.propertyName;let o=t.propertyIndex;if(e||(e=ys.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(n){let r=t.objectIndex;switch(n){case"materials":if(!e.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!e.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);e=e.material.materials;break;case"bones":if(!e.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);e=e.skeleton.bones;for(let i=0;i<e.length;i++)if(e[i].name===r){r=i;break}break;default:if(void 0===e[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);e=e[n]}if(void 0!==r){if(void 0===e[r])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);e=e[r]}}const l=e[r];if(void 0===l){const n=t.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+r+" but it wasn't found.",e)}let c=this.Versioning.None;this.targetObject=e,void 0!==e.needsUpdate?c=this.Versioning.NeedsUpdate:void 0!==e.matrixWorldNeedsUpdate&&(c=this.Versioning.MatrixWorldNeedsUpdate);let h=this.BindingType.Direct;if(void 0!==o){if("morphTargetInfluences"===r){if(!e.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!e.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==e.morphTargetDictionary[o]&&(o=e.morphTargetDictionary[o])}h=this.BindingType.ArrayElement,this.resolvedProperty=l,this.propertyIndex=o}else void 0!==l.fromArray&&void 0!==l.toArray?(h=this.BindingType.HasFromToArray,this.resolvedProperty=l):Array.isArray(l)?(h=this.BindingType.EntireArray,this.resolvedProperty=l):this.propertyName=r;this.getValue=this.GetterByBindingType[h],this.setValue=this.SetterByBindingTypeAndVersioning[h][c]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}ys.Composite=class{constructor(e,path,t){const n=t||ys.parseTrackName(path);this._targetGroup=e,this._bindings=e.subscribe_(path,n)}getValue(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,r=this._bindings[n];void 0!==r&&r.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(e,t)}bind(){const e=this._bindings;for(let i=this._targetGroup.nCachedObjects_,t=e.length;i!==t;++i)e[i].bind()}unbind(){const e=this._bindings;for(let i=this._targetGroup.nCachedObjects_,t=e.length;i!==t;++i)e[i].unbind()}},ys.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},ys.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},ys.prototype.GetterByBindingType=[ys.prototype._getValue_direct,ys.prototype._getValue_array,ys.prototype._getValue_arrayElement,ys.prototype._getValue_toArray],ys.prototype.SetterByBindingTypeAndVersioning=[[ys.prototype._setValue_direct,ys.prototype._setValue_direct_setNeedsUpdate,ys.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[ys.prototype._setValue_array,ys.prototype._setValue_array_setNeedsUpdate,ys.prototype._setValue_array_setMatrixWorldNeedsUpdate],[ys.prototype._setValue_arrayElement,ys.prototype._setValue_arrayElement_setNeedsUpdate,ys.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[ys.prototype._setValue_fromArray,ys.prototype._setValue_fromArray_setNeedsUpdate,ys.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Ms{constructor(e=1,t=0,n=0){return this.radius=e,this.phi=t,this.theta=n,this}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){const e=1e-6;return this.phi=Math.max(e,Math.min(Math.PI-e,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(ae(t/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}const bs=new ArrayBuffer(4),Ss=(new Float32Array(bs),new Uint32Array(bs),new Uint32Array(512)),ws=new Uint32Array(512);for(let i=0;i<256;++i){const e=i-127;e<-27?(Ss[i]=0,Ss[256|i]=32768,ws[i]=24,ws[256|i]=24):e<-14?(Ss[i]=1024>>-e-14,Ss[256|i]=1024>>-e-14|32768,ws[i]=-e-1,ws[256|i]=-e-1):e<=15?(Ss[i]=e+15<<10,Ss[256|i]=e+15<<10|32768,ws[i]=13,ws[256|i]=13):e<128?(Ss[i]=31744,Ss[256|i]=64512,ws[i]=24,ws[256|i]=24):(Ss[i]=31744,Ss[256|i]=64512,ws[i]=13,ws[256|i]=13)}const Ts=new Uint32Array(2048),Es=new Uint32Array(64),As=new Uint32Array(64);for(let i=1;i<1024;++i){let e=i<<13,t=0;for(;0==(8388608&e);)e<<=1,t-=8388608;e&=-8388609,t+=947912704,Ts[i]=e|t}for(let i=1024;i<2048;++i)Ts[i]=939524096+(i-1024<<13);for(let i=1;i<31;++i)Es[i]=i<<23;Es[31]=1199570944,Es[32]=2147483648;for(let i=33;i<63;++i)Es[i]=2147483648+(i-32<<23);Es[63]=3347054592;for(let i=1;i<64;++i)32!==i&&(As[i]=1024);"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:r}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=r)},433:function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(429);const o={type:"change"},l={type:"start"},c={type:"end"};class h extends r.a{constructor(object,e){super(),void 0===e&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),e===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),this.object=object,this.domElement=e,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new r.m,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:r.b.ROTATE,MIDDLE:r.b.DOLLY,RIGHT:r.b.PAN},this.touches={ONE:r.j.ROTATE,TWO:r.j.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return f.phi},this.getAzimuthalAngle=function(){return f.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(e){e.addEventListener("keydown",ee),this._domElementKeyEvents=e},this.saveState=function(){t.target0.copy(t.target),t.position0.copy(t.object.position),t.zoom0=t.object.zoom},this.reset=function(){t.target.copy(t.target0),t.object.position.copy(t.position0),t.object.zoom=t.zoom0,t.object.updateProjectionMatrix(),t.dispatchEvent(o),t.update(),h=n.NONE},this.update=function(){const e=new r.m,l=(new r.e).setFromUnitVectors(object.up,new r.m(0,1,0)),c=l.clone().invert(),y=new r.m,M=new r.e,S=2*Math.PI;return function(){const r=t.object.position;e.copy(r).sub(t.target),e.applyQuaternion(l),f.setFromVector3(e),t.autoRotate&&h===n.NONE&&I(2*Math.PI/60/60*t.autoRotateSpeed),t.enableDamping?(f.theta+=m.theta*t.dampingFactor,f.phi+=m.phi*t.dampingFactor):(f.theta+=m.theta,f.phi+=m.phi);let w=t.minAzimuthAngle,T=t.maxAzimuthAngle;return isFinite(w)&&isFinite(T)&&(w<-Math.PI?w+=S:w>Math.PI&&(w-=S),T<-Math.PI?T+=S:T>Math.PI&&(T-=S),f.theta=w<=T?Math.max(w,Math.min(T,f.theta)):f.theta>(w+T)/2?Math.max(w,f.theta):Math.min(T,f.theta)),f.phi=Math.max(t.minPolarAngle,Math.min(t.maxPolarAngle,f.phi)),f.makeSafe(),f.radius*=v,f.radius=Math.max(t.minDistance,Math.min(t.maxDistance,f.radius)),!0===t.enableDamping?t.target.addScaledVector(_,t.dampingFactor):t.target.add(_),e.setFromSpherical(f),e.applyQuaternion(c),r.copy(t.target).add(e),t.object.lookAt(t.target),!0===t.enableDamping?(m.theta*=1-t.dampingFactor,m.phi*=1-t.dampingFactor,_.multiplyScalar(1-t.dampingFactor)):(m.set(0,0,0),_.set(0,0,0)),v=1,!!(x||y.distanceToSquared(t.object.position)>d||8*(1-M.dot(t.object.quaternion))>d)&&(t.dispatchEvent(o),y.copy(t.object.position),M.copy(t.object.quaternion),x=!1,!0)}}(),this.dispose=function(){t.domElement.removeEventListener("contextmenu",te),t.domElement.removeEventListener("pointerdown",Z),t.domElement.removeEventListener("pointercancel",Q),t.domElement.removeEventListener("wheel",$),t.domElement.removeEventListener("pointermove",K),t.domElement.removeEventListener("pointerup",J),null!==t._domElementKeyEvents&&t._domElementKeyEvents.removeEventListener("keydown",ee)};const t=this,n={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let h=n.NONE;const d=1e-6,f=new r.i,m=new r.i;let v=1;const _=new r.m;let x=!1;const y=new r.l,M=new r.l,S=new r.l,w=new r.l,T=new r.l,E=new r.l,A=new r.l,L=new r.l,C=new r.l,R=[],P={};function D(){return Math.pow(.95,t.zoomSpeed)}function I(e){m.theta-=e}function N(e){m.phi-=e}const O=function(){const e=new r.m;return function(t,n){e.setFromMatrixColumn(n,0),e.multiplyScalar(-t),_.add(e)}}(),z=function(){const e=new r.m;return function(n,r){!0===t.screenSpacePanning?e.setFromMatrixColumn(r,1):(e.setFromMatrixColumn(r,0),e.crossVectors(t.object.up,e)),e.multiplyScalar(n),_.add(e)}}(),U=function(){const e=new r.m;return function(n,r){const element=t.domElement;if(t.object.isPerspectiveCamera){const o=t.object.position;e.copy(o).sub(t.target);let l=e.length();l*=Math.tan(t.object.fov/2*Math.PI/180),O(2*n*l/element.clientHeight,t.object.matrix),z(2*r*l/element.clientHeight,t.object.matrix)}else t.object.isOrthographicCamera?(O(n*(t.object.right-t.object.left)/t.object.zoom/element.clientWidth,t.object.matrix),z(r*(t.object.top-t.object.bottom)/t.object.zoom/element.clientHeight,t.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),t.enablePan=!1)}}();function F(e){t.object.isPerspectiveCamera?v/=e:t.object.isOrthographicCamera?(t.object.zoom=Math.max(t.minZoom,Math.min(t.maxZoom,t.object.zoom*e)),t.object.updateProjectionMatrix(),x=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),t.enableZoom=!1)}function B(e){t.object.isPerspectiveCamera?v*=e:t.object.isOrthographicCamera?(t.object.zoom=Math.max(t.minZoom,Math.min(t.maxZoom,t.object.zoom/e)),t.object.updateProjectionMatrix(),x=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),t.enableZoom=!1)}function k(e){y.set(e.clientX,e.clientY)}function V(e){w.set(e.clientX,e.clientY)}function H(){if(1===R.length)y.set(R[0].pageX,R[0].pageY);else{const e=.5*(R[0].pageX+R[1].pageX),t=.5*(R[0].pageY+R[1].pageY);y.set(e,t)}}function G(){if(1===R.length)w.set(R[0].pageX,R[0].pageY);else{const e=.5*(R[0].pageX+R[1].pageX),t=.5*(R[0].pageY+R[1].pageY);w.set(e,t)}}function W(){const e=R[0].pageX-R[1].pageX,t=R[0].pageY-R[1].pageY,n=Math.sqrt(e*e+t*t);A.set(0,n)}function j(e){if(1==R.length)M.set(e.pageX,e.pageY);else{const t=re(e),n=.5*(e.pageX+t.x),r=.5*(e.pageY+t.y);M.set(n,r)}S.subVectors(M,y).multiplyScalar(t.rotateSpeed);const element=t.domElement;I(2*Math.PI*S.x/element.clientHeight),N(2*Math.PI*S.y/element.clientHeight),y.copy(M)}function X(e){if(1===R.length)T.set(e.pageX,e.pageY);else{const t=re(e),n=.5*(e.pageX+t.x),r=.5*(e.pageY+t.y);T.set(n,r)}E.subVectors(T,w).multiplyScalar(t.panSpeed),U(E.x,E.y),w.copy(T)}function Y(e){const n=re(e),r=e.pageX-n.x,o=e.pageY-n.y,l=Math.sqrt(r*r+o*o);L.set(0,l),C.set(0,Math.pow(L.y/A.y,t.zoomSpeed)),F(C.y),A.copy(L)}function Z(e){!1!==t.enabled&&(0===R.length&&(t.domElement.setPointerCapture(e.pointerId),t.domElement.addEventListener("pointermove",K),t.domElement.addEventListener("pointerup",J)),function(e){R.push(e)}(e),"touch"===e.pointerType?function(e){switch(ie(e),R.length){case 1:switch(t.touches.ONE){case r.j.ROTATE:if(!1===t.enableRotate)return;H(),h=n.TOUCH_ROTATE;break;case r.j.PAN:if(!1===t.enablePan)return;G(),h=n.TOUCH_PAN;break;default:h=n.NONE}break;case 2:switch(t.touches.TWO){case r.j.DOLLY_PAN:if(!1===t.enableZoom&&!1===t.enablePan)return;t.enableZoom&&W(),t.enablePan&&G(),h=n.TOUCH_DOLLY_PAN;break;case r.j.DOLLY_ROTATE:if(!1===t.enableZoom&&!1===t.enableRotate)return;t.enableZoom&&W(),t.enableRotate&&H(),h=n.TOUCH_DOLLY_ROTATE;break;default:h=n.NONE}break;default:h=n.NONE}h!==n.NONE&&t.dispatchEvent(l)}(e):function(e){let o;switch(e.button){case 0:o=t.mouseButtons.LEFT;break;case 1:o=t.mouseButtons.MIDDLE;break;case 2:o=t.mouseButtons.RIGHT;break;default:o=-1}switch(o){case r.b.DOLLY:if(!1===t.enableZoom)return;!function(e){A.set(e.clientX,e.clientY)}(e),h=n.DOLLY;break;case r.b.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===t.enablePan)return;V(e),h=n.PAN}else{if(!1===t.enableRotate)return;k(e),h=n.ROTATE}break;case r.b.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===t.enableRotate)return;k(e),h=n.ROTATE}else{if(!1===t.enablePan)return;V(e),h=n.PAN}break;default:h=n.NONE}h!==n.NONE&&t.dispatchEvent(l)}(e))}function K(e){!1!==t.enabled&&("touch"===e.pointerType?function(e){switch(ie(e),h){case n.TOUCH_ROTATE:if(!1===t.enableRotate)return;j(e),t.update();break;case n.TOUCH_PAN:if(!1===t.enablePan)return;X(e),t.update();break;case n.TOUCH_DOLLY_PAN:if(!1===t.enableZoom&&!1===t.enablePan)return;!function(e){t.enableZoom&&Y(e),t.enablePan&&X(e)}(e),t.update();break;case n.TOUCH_DOLLY_ROTATE:if(!1===t.enableZoom&&!1===t.enableRotate)return;!function(e){t.enableZoom&&Y(e),t.enableRotate&&j(e)}(e),t.update();break;default:h=n.NONE}}(e):function(e){if(!1===t.enabled)return;switch(h){case n.ROTATE:if(!1===t.enableRotate)return;!function(e){M.set(e.clientX,e.clientY),S.subVectors(M,y).multiplyScalar(t.rotateSpeed);const element=t.domElement;I(2*Math.PI*S.x/element.clientHeight),N(2*Math.PI*S.y/element.clientHeight),y.copy(M),t.update()}(e);break;case n.DOLLY:if(!1===t.enableZoom)return;!function(e){L.set(e.clientX,e.clientY),C.subVectors(L,A),C.y>0?F(D()):C.y<0&&B(D()),A.copy(L),t.update()}(e);break;case n.PAN:if(!1===t.enablePan)return;!function(e){T.set(e.clientX,e.clientY),E.subVectors(T,w).multiplyScalar(t.panSpeed),U(E.x,E.y),w.copy(T),t.update()}(e)}}(e))}function J(e){ne(e),0===R.length&&(t.domElement.releasePointerCapture(e.pointerId),t.domElement.removeEventListener("pointermove",K),t.domElement.removeEventListener("pointerup",J)),t.dispatchEvent(c),h=n.NONE}function Q(e){ne(e)}function $(e){!1!==t.enabled&&!1!==t.enableZoom&&h===n.NONE&&(e.preventDefault(),t.dispatchEvent(l),function(e){e.deltaY<0?B(D()):e.deltaY>0&&F(D()),t.update()}(e),t.dispatchEvent(c))}function ee(e){!1!==t.enabled&&!1!==t.enablePan&&function(e){let n=!1;switch(e.code){case t.keys.UP:U(0,t.keyPanSpeed),n=!0;break;case t.keys.BOTTOM:U(0,-t.keyPanSpeed),n=!0;break;case t.keys.LEFT:U(t.keyPanSpeed,0),n=!0;break;case t.keys.RIGHT:U(-t.keyPanSpeed,0),n=!0}n&&(e.preventDefault(),t.update())}(e)}function te(e){!1!==t.enabled&&e.preventDefault()}function ne(e){delete P[e.pointerId];for(let i=0;i<R.length;i++)if(R[i].pointerId==e.pointerId)return void R.splice(i,1)}function ie(e){let t=P[e.pointerId];void 0===t&&(t=new r.l,P[e.pointerId]=t),t.set(e.pageX,e.pageY)}function re(e){const t=e.pointerId===R[0].pointerId?R[1]:R[0];return P[t.pointerId]}t.domElement.addEventListener("contextmenu",te),t.domElement.addEventListener("pointerdown",Z),t.domElement.addEventListener("pointercancel",Q),t.domElement.addEventListener("wheel",$,{passive:!1}),this.update()}}},434:function(e,t,n){"use strict";function r(e,p,output,t){for(var n=e[p++],r=1<<n,o=r+1,l=o+1,c=n+1,h=(1<<c)-1,d=0,f=0,m=0,v=e[p++],_=new Int32Array(4096),x=null;;){for(;d<16&&0!==v;)f|=e[p++]<<d,d+=8,1===v?v=e[p++]:--v;if(d<c)break;var code=f&h;if(f>>=c,d-=c,code!==r){if(code===o)break;for(var y=code<l?code:x,M=0,S=y;S>r;)S=_[S]>>8,++M;var w=S;if(m+M+(y!==code?1:0)>t)return void console.log("Warning, gif stream longer than expected.");output[m++]=w;var b=m+=M;for(y!==code&&(output[m++]=w),S=y;M--;)S=_[S],output[--b]=255&S,S>>=8;null!==x&&l<4096&&(_[l++]=x<<8|w,l>=h+1&&c<12&&(++c,h=h<<1|1)),x=code}else l=o+1,h=(1<<(c=n+1))-1,x=null}return m!==t&&console.log("Warning, gif stream shorter than expected."),output}try{t.GifWriter=function(e,t,n,r){var p=0,o=void 0===(r=void 0===r?{}:r).loop?null:r.loop,l=void 0===r.palette?null:r.palette;if(t<=0||n<=0||t>65535||n>65535)throw new Error("Width/Height invalid.");function c(e){var t=e.length;if(t<2||t>256||t&t-1)throw new Error("Invalid code/color length, must be power of 2 and 2 .. 256.");return t}e[p++]=71,e[p++]=73,e[p++]=70,e[p++]=56,e[p++]=57,e[p++]=97;var h=0,d=0;if(null!==l){for(var f=c(l);f>>=1;)++h;if(f=1<<h,--h,void 0!==r.background){if((d=r.background)>=f)throw new Error("Background index out of range.");if(0===d)throw new Error("Background index explicitly passed as 0.")}}if(e[p++]=255&t,e[p++]=t>>8&255,e[p++]=255&n,e[p++]=n>>8&255,e[p++]=(null!==l?128:0)|h,e[p++]=d,e[p++]=0,null!==l)for(var i=0,m=l.length;i<m;++i){var v=l[i];e[p++]=v>>16&255,e[p++]=v>>8&255,e[p++]=255&v}if(null!==o){if(o<0||o>65535)throw new Error("Loop count invalid.");e[p++]=33,e[p++]=255,e[p++]=11,e[p++]=78,e[p++]=69,e[p++]=84,e[p++]=83,e[p++]=67,e[p++]=65,e[p++]=80,e[p++]=69,e[p++]=50,e[p++]=46,e[p++]=48,e[p++]=3,e[p++]=1,e[p++]=255&o,e[p++]=o>>8&255,e[p++]=0}var _=!1;this.addFrame=function(t,n,r,o,h,d){if(!0===_&&(--p,_=!1),d=void 0===d?{}:d,t<0||n<0||t>65535||n>65535)throw new Error("x/y invalid.");if(r<=0||o<=0||r>65535||o>65535)throw new Error("Width/Height invalid.");if(h.length<r*o)throw new Error("Not enough pixels for the frame size.");var f=!0,m=d.palette;if(null==m&&(f=!1,m=l),null==m)throw new Error("Must supply either a local or global palette.");for(var v=c(m),x=0;v>>=1;)++x;v=1<<x;var y=void 0===d.delay?0:d.delay,M=void 0===d.disposal?0:d.disposal;if(M<0||M>3)throw new Error("Disposal out of range.");var S=!1,w=0;if(void 0!==d.transparent&&null!==d.transparent&&(S=!0,(w=d.transparent)<0||w>=v))throw new Error("Transparent color index.");if((0!==M||S||0!==y)&&(e[p++]=33,e[p++]=249,e[p++]=4,e[p++]=M<<2|(!0===S?1:0),e[p++]=255&y,e[p++]=y>>8&255,e[p++]=w,e[p++]=0),e[p++]=44,e[p++]=255&t,e[p++]=t>>8&255,e[p++]=255&n,e[p++]=n>>8&255,e[p++]=255&r,e[p++]=r>>8&255,e[p++]=255&o,e[p++]=o>>8&255,e[p++]=!0===f?128|x-1:0,!0===f)for(var i=0,T=m.length;i<T;++i){var E=m[i];e[p++]=E>>16&255,e[p++]=E>>8&255,e[p++]=255&E}return p=function(e,p,t,n){e[p++]=t;var r=p++,o=1<<t,l=o-1,c=o+1,h=c+1,d=t+1,f=0,m=0;function v(t){for(;f>=t;)e[p++]=255&m,m>>=8,f-=8,p===r+256&&(e[r]=255,r=p++)}function _(e){m|=e<<f,f+=d,v(8)}var x=n[0]&l,y={};_(o);for(var i=1,M=n.length;i<M;++i){var S=n[i]&l,w=x<<8|S,T=y[w];if(void 0===T){for(m|=x<<f,f+=d;f>=8;)e[p++]=255&m,m>>=8,f-=8,p===r+256&&(e[r]=255,r=p++);4096===h?(_(o),h=c+1,d=t+1,y={}):(h>=1<<d&&++d,y[w]=h++),x=S}else x=T}return _(x),_(c),v(1),r+1===p?e[r]=0:(e[r]=p-r-1,e[p++]=0),p}(e,p,x<2?2:x,h),p},this.end=function(){return!1===_&&(e[p++]=59,_=!0),p},this.getOutputBuffer=function(){return e},this.setOutputBuffer=function(t){e=t},this.getOutputBufferPosition=function(){return p},this.setOutputBufferPosition=function(e){p=e}},t.GifReader=function(e){var p=0;if(71!==e[p++]||73!==e[p++]||70!==e[p++]||56!==e[p++]||56!=(e[p++]+1&253)||97!==e[p++])throw new Error("Invalid GIF 87a/89a header.");var t=e[p++]|e[p++]<<8,n=e[p++]|e[p++]<<8,o=e[p++],l=o>>7,c=1<<1+(7&o);e[p++],e[p++];var h=null,d=null;l&&(h=p,d=c,p+=3*c);var f=!0,m=[],v=0,_=null,x=0,y=null;for(this.width=t,this.height=n;f&&p<e.length;)switch(e[p++]){case 33:switch(e[p++]){case 255:if(11!==e[p]||78==e[p+1]&&69==e[p+2]&&84==e[p+3]&&83==e[p+4]&&67==e[p+5]&&65==e[p+6]&&80==e[p+7]&&69==e[p+8]&&50==e[p+9]&&46==e[p+10]&&48==e[p+11]&&3==e[p+12]&&1==e[p+13]&&0==e[p+16])p+=14,y=e[p++]|e[p++]<<8,p++;else for(p+=12;;){if(!((N=e[p++])>=0))throw Error("Invalid block size");if(0===N)break;p+=N}break;case 249:if(4!==e[p++]||0!==e[p+4])throw new Error("Invalid graphics extension block.");var M=e[p++];v=e[p++]|e[p++]<<8,_=e[p++],0==(1&M)&&(_=null),x=M>>2&7,p++;break;case 254:for(;;){if(!((N=e[p++])>=0))throw Error("Invalid block size");if(0===N)break;p+=N}break;default:throw new Error("Unknown graphic control label: 0x"+e[p-1].toString(16))}break;case 44:var S=e[p++]|e[p++]<<8,w=e[p++]|e[p++]<<8,T=e[p++]|e[p++]<<8,E=e[p++]|e[p++]<<8,A=e[p++],L=A>>6&1,C=1<<1+(7&A),R=h,P=d,D=!1;A>>7&&(D=!0,R=p,P=C,p+=3*C);var I=p;for(p++;;){var N;if(!((N=e[p++])>=0))throw Error("Invalid block size");if(0===N)break;p+=N}m.push({x:S,y:w,width:T,height:E,has_local_palette:D,palette_offset:R,palette_size:P,data_offset:I,data_length:p-I,transparent_index:_,interlaced:!!L,delay:v,disposal:x});break;case 59:f=!1;break;default:throw new Error("Unknown gif block: 0x"+e[p-1].toString(16))}this.numFrames=function(){return m.length},this.loopCount=function(){return y},this.frameInfo=function(e){if(e<0||e>=m.length)throw new Error("Frame index out of range.");return m[e]},this.decodeAndBlitFrameBGRA=function(n,o){var l=this.frameInfo(n),c=l.width*l.height,h=new Uint8Array(c);r(e,l.data_offset,h,c);var d=l.palette_offset,f=l.transparent_index;null===f&&(f=256);var m=l.width,v=t-m,_=m,x=4*(l.y*t+l.x),y=4*((l.y+l.height)*t+l.x),M=x,S=4*v;!0===l.interlaced&&(S+=4*t*7);for(var w=8,i=0,T=h.length;i<T;++i){var E=h[i];if(0===_&&(_=m,(M+=S)>=y&&(S=4*v+4*t*(w-1),M=x+(m+v)*(w<<1),w>>=1)),E===f)M+=4;else{var A=e[d+3*E],g=e[d+3*E+1],b=e[d+3*E+2];o[M++]=b,o[M++]=g,o[M++]=A,o[M++]=255}--_}},this.decodeAndBlitFrameRGBA=function(n,o){var l=this.frameInfo(n),c=l.width*l.height,h=new Uint8Array(c);r(e,l.data_offset,h,c);var d=l.palette_offset,f=l.transparent_index;null===f&&(f=256);var m=l.width,v=t-m,_=m,x=4*(l.y*t+l.x),y=4*((l.y+l.height)*t+l.x),M=x,S=4*v;!0===l.interlaced&&(S+=4*t*7);for(var w=8,i=0,T=h.length;i<T;++i){var E=h[i];if(0===_&&(_=m,(M+=S)>=y&&(S=4*v+4*t*(w-1),M=x+(m+v)*(w<<1),w>>=1)),E===f)M+=4;else{var A=e[d+3*E],g=e[d+3*E+1],b=e[d+3*E+2];o[M++]=A,o[M++]=g,o[M++]=b,o[M++]=255}--_}}}}catch(e){}}}]);